<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NBMA</title>
  
  <subtitle>学习 记录 分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="nbma.info/"/>
  <updated>2018-04-22T05:09:46.180Z</updated>
  <id>nbma.info/</id>
  
  <author>
    <name>Mansur</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ipsec协商过程分析</title>
    <link href="nbma.info/ipsec-theory/"/>
    <id>nbma.info/ipsec-theory/</id>
    <published>2018-04-21T09:27:21.000Z</published>
    <updated>2018-04-22T05:09:46.180Z</updated>
    
    <content type="html"><![CDATA[<p>ipsec vpn，刚学完的时候以为自己掌握的还挺好的，各种排错无压力。去年到电信面试，连基本过程都说不清楚了，就记得是非对称加密协商对称加密的算法和密钥。说了一句跟HTTPS原理差不多……欸。趁着周末闲了赶紧再补补。<br><a id="more"></a></p><p>ipsec协商总共9个包，在没有nat穿越的情况下，这9个包的源目端口都是<code>UDP 500</code>，使用<code>isakmp</code>封装。<br>9个包之后加密<code>ESP</code>封装。</p><h2 id="协商过程"><a href="#协商过程" class="headerlink" title="协商过程"></a>协商过程</h2><p><img src="http://ww1.sinaimg.cn/large/68e0aeafly1fqkfo6qgkej20o90bg0t8.jpg" alt=""></p><h3 id="第一阶段第1-2包"><a href="#第一阶段第1-2包" class="headerlink" title="第一阶段第1-2包"></a>第一阶段第1-2包</h3><p>A发送自己的sa(ipsec组成部分以及协商对预共享密钥的加密策略），B发送自己的sa</p><h3 id="第一阶段第3-4包"><a href="#第一阶段第3-4包" class="headerlink" title="第一阶段第3-4包"></a>第一阶段第3-4包</h3><p>交互DH。这个阶段用于生成非对称加密算法（由1-2阶段协商）的三对密钥</p><h3 id="第一阶段第5-6包"><a href="#第一阶段第5-6包" class="headerlink" title="第一阶段第5-6包"></a>第一阶段第5-6包</h3><p>使用3-4形成的第一把密钥，加密内容是预共享密钥，用于验证双方身份</p><h3 id="第二阶段第1-2包"><a href="#第二阶段第1-2包" class="headerlink" title="第二阶段第1-2包"></a>第二阶段第1-2包</h3><p>使用第二把密钥，协商对数据（感兴趣流）的加密策略</p><h3 id="第二阶段第3个包"><a href="#第二阶段第3个包" class="headerlink" title="第二阶段第3个包"></a>第二阶段第3个包</h3><p>确认，形成SPI代表控制层结束<br><img src="http://ww1.sinaimg.cn/large/68e0aeafly1fqkmt3p5n0j20g306qdgj.jpg" alt=""><br>最终，对感兴趣流<br>使用第三把密钥对数据进行加密，使用第二阶段1-2协商的加密策略 </p><h2 id="数据包结构"><a href="#数据包结构" class="headerlink" title="数据包结构"></a>数据包结构</h2><h3 id="esp的加密位置"><a href="#esp的加密位置" class="headerlink" title="esp的加密位置"></a>esp的加密位置</h3><pre><code>1、传输模式：通讯点和加密点一致这种模式下ESP报头在ip 头部之内，对四层以内的报头和数据进行加密2、隧道模式：通讯点和加密点不一致ESP直接将原来三层以内的报文全部加密，重新生成新的ip头部</code></pre><p>这两种模式相比，transform模式数据比原数据包只多了一个esp头部，包长度有优势，传输效率高；tunnel模式在处理数据的时候不要拆开IP头部，直接加密，更快。</p><p>这部分由于ESP之后的部分全是加密的，所以只能通过数据包大小来对比，需要真机实现，等有机会了再做，<del>模拟器只能为transport，设置tunnel无效</del></p><h3 id="GRE头部的位置"><a href="#GRE头部的位置" class="headerlink" title="GRE头部的位置"></a>GRE头部的位置</h3><p>我是按照这个拓扑做的测试对比，主要看包接口和后续ESP数据包的大小<br><img src="http://ww1.sinaimg.cn/large/68e0aeafly1fqlbwebtrgj20mq04tt93.jpg" alt=""><br>从思科设备发起的ping默认大小是14+28+72=<code>114</code>Bytes.<br>GRE头部大小是<code>24</code>Bytes</p><p><strong>基于感兴趣流的IPSEC</strong><br><img src="http://ww1.sinaimg.cn/large/68e0aeafly1fqlc2kpwkjj20my09ggm5.jpg" alt=""></p><p><strong>思科的SVTI技术</strong><br>tunnel模式设置为<code>tunnel mode ipsec ipv4</code>，其他配置和GRE over IPSec完全一样<br><img src="http://ww1.sinaimg.cn/large/68e0aeafly1fqlc2rs3fsj20mp09ejrx.jpg" alt=""></p><p><strong>GRE over IPSec</strong><br><img src="http://ww1.sinaimg.cn/large/68e0aeafly1fqlc30h42pj20mq09cmxp.jpg" alt=""></p><p><strong>思科的IPSec over GRE</strong><br>至于为什么会有这个，我看能百度搜到的华为设备全是按照这种方式配置的，蛋疼。<br><img src="http://ww1.sinaimg.cn/large/68e0aeafly1fqlc37bsqcj20mo0afmxr.jpg" alt=""></p><p><strong>华为的IPSec over GRE</strong><br>待验证</p><p>思科的SVTI技术确实厉害~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ipsec vpn，刚学完的时候以为自己掌握的还挺好的，各种排错无压力。去年到电信面试，连基本过程都说不清楚了，就记得是非对称加密协商对称加密的算法和密钥。说了一句跟HTTPS原理差不多……欸。趁着周末闲了赶紧再补补。&lt;br&gt;
    
    </summary>
    
    
      <category term="网络" scheme="nbma.info/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="cisco" scheme="nbma.info/tags/cisco/"/>
    
      <category term="ipsec" scheme="nbma.info/tags/ipsec/"/>
    
  </entry>
  
  <entry>
    <title>在nginx部署https</title>
    <link href="nbma.info/nginx-deploy-https/"/>
    <id>nbma.info/nginx-deploy-https/</id>
    <published>2018-04-16T10:18:08.000Z</published>
    <updated>2018-04-21T09:14:32.589Z</updated>
    
    <content type="html"><![CDATA[<p>上周看nginx视频，中间看到https的部署，发现了很多自己一直以来都能接触到，但是完全不了解的专业名词。于是暂停视频，花了三天的时间，吧https相关的协议原理和证书类型都了解一下。<br><a id="more"></a><br>周末重写了<a href="/https-theory/">https的工作原理</a>，今天快下班没事，吧https部署写一下。之后就要开始撸<code>ansible</code>了。</p><h2 id="证书类型"><a href="#证书类型" class="headerlink" title="证书类型"></a>证书类型</h2><p>目前主流的SSL证书主要分为DV SSL 、 OV SSL 、EV SSL。</p><table><thead><tr><th>数字证书</th><th>DV SSL</th><th>OV SSL</th><th>EV SSL</th></tr></thead><tbody><tr><td>用户建议</td><td>个人</td><td>组织、企业</td><td>大型企业、金融机构</td></tr><tr><td>公信等级</td><td>一般</td><td>高</td><td>强</td></tr><tr><td>认证强度</td><td>网站真实性</td><td>组织及企业真实性</td><td>严格认证</td></tr><tr><td>安全性</td><td>一般</td><td>中</td><td>高</td></tr><tr><td>可信度</td><td>常规</td><td>中</td><td>高（地址栏绿色）</td></tr></tbody></table><p>要购买或者签发SSL证书，需要先在本地生成CSR，其中包含域名、所有人、位置等，然后根据CSR签发对应的证书。</p><h2 id="自签证书"><a href="#自签证书" class="headerlink" title="自签证书"></a>自签证书</h2><p>CentOS系统已经安装了openssl，可以用来生成自签证书，但是这种证书由于其CA不在主机的受信任列表，只能用来做加密，无法提供任何验证，而且需要在浏览器中手动确认。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#生成私钥</span><br><span class="line">  openssl genrsa -idea -out mansur.key 1024</span><br><span class="line">#生成证书申请请求CSR</span><br><span class="line">  openssl req -new -key mansur.key -out mansur.csr</span><br><span class="line">#使用私钥签发证书</span><br><span class="line">  openssl x509 -req -days 3650 -in mansur.csr -signkey mansur.key -out mansur.crt</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#直接生成符合苹果ATS规范的证书和对应私钥</span><br><span class="line">  openssl req -days 3650 -x509 -sha256 -nodes -newkey rsa:2048 -keyout mansur.key -out mansur_apple.crt</span><br></pre></td></tr></table></figure><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7-copy tmp]#   openssl req -days 3650 -x509 -sha256 -nodes -newkey rsa:2048 -keyout mansur.key -out mansur_apple.crt</span><br><span class="line">Generating a 2048 bit RSA private key</span><br><span class="line">....+++</span><br><span class="line">.........................................................................................................................+++</span><br><span class="line">writing new private key to &apos;mansur.key&apos;</span><br><span class="line">-----</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &apos;.&apos;, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:Beijing</span><br><span class="line">Locality Name (eg, city) [Default City]:Chaoyang</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:NBMABLOG</span><br><span class="line">Organizational Unit Name (eg, section) []:Net</span><br><span class="line">Common Name (eg, your name or your server&apos;s hostname) []:nbma.info</span><br><span class="line">Email Address []:i@nbma.info</span><br><span class="line"></span><br><span class="line">[root@CentOS7-copy tmp]# ll</span><br><span class="line">总用量 12</span><br><span class="line">-rw-r--r-- 1 root root 1391 4月  17 10:14 mansur_apple.crt</span><br><span class="line">-rw-r--r-- 1 root root 1704 4月  17 10:14 mansur.key</span><br></pre></td></tr></table></figure></p><h2 id="Let’s-encrypt免费证书"><a href="#Let’s-encrypt免费证书" class="headerlink" title="Let’s encrypt免费证书"></a>Let’s encrypt免费证书</h2><p><code>Let&#39;s encrypt</code>可以签发免费的DV证书，常用于个人网站，但是其证书有效期只有三个月，需要手动续租。<br>具体怎么签发，还有待研究，github上有很多脚本可以实现。<br>签发完成后会得到四个文件</p><blockquote><p>cert.pem  #网站证书<br>chain.pem  #链证书<br>fullchain.pem  #网站证书+链证书<br>privkey.pem  #私钥</p></blockquote><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>不想写注释了，就这么看吧。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">        listen 443 ssl http2;</span><br><span class="line">    server_name nbma.info;</span><br><span class="line">    index index.php index.html index.htm default.php default.htm default.html;</span><br><span class="line">    root /www/wwwroot/nbma.info;</span><br><span class="line">    </span><br><span class="line">    #SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则</span><br><span class="line">    #error_page 404/404.html;</span><br><span class="line"></span><br><span class="line">    #HTTP_TO_HTTPS_START</span><br><span class="line">    if ($server_port !~ 443)&#123;</span><br><span class="line">        rewrite ^(/.*)$ https://$host$1 permanent;</span><br><span class="line">    &#125;</span><br><span class="line">    #HTTP_TO_HTTPS_END</span><br><span class="line"></span><br><span class="line">    ssl_certificate    fullchain.pem;</span><br><span class="line">    ssl_certificate_key    privkey.pem;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    error_page 497  https://$host$request_uri;</span><br><span class="line"></span><br><span class="line">    #SSL-END</span><br><span class="line">    </span><br><span class="line">    #.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h2><p>另外，做完上面这些发现有个问题，这些证书有的是.key格式，还有crt、pem等，专门查了一下，其实在unix中证书的这几个扩展名无所谓。他不过是一串字符串。但是，对于证书而言，他有两种不同的编码格式需要注意；<br>首先所有的证书都是满足X.509标准的，这个标准定义了证书中应该包含哪些内容，具体需要查看RFC5280<br>在这个标准之下，不同的操作系统或者中间件常用的编码方式也不一样：</p><p><strong>PEM</strong> - Privacy Enhanced Mail,打开看文本格式,以”—–BEGIN…”开头, “—–END…”结尾,内容是BASE64编码.<br>查看PEM格式证书的信息:<code>openssl x509 -in certificate.pem -text -noout</code><br>Apache和Linux服务器偏向于使用这种编码格式。</p><p><strong>DER</strong> - Distinguished Encoding Rules,打开看是二进制格式,不可读.<br>查看DER格式证书的信息:<code>openssl x509 -in certificate.der -text -noout -inform der</code><br>Java和Windows服务器偏向于使用这种编码格式.</p><p>更多有关证书的说明，请查阅参考文档：<br><a href="http://www.cnblogs.com/guogangj/p/4118605.html" target="_blank" rel="noopener">那些证书相关的玩意儿(SSL,X.509,PEM,DER,CRT,CER,KEY,CSR,P12等)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上周看nginx视频，中间看到https的部署，发现了很多自己一直以来都能接触到，但是完全不了解的专业名词。于是暂停视频，花了三天的时间，吧https相关的协议原理和证书类型都了解一下。&lt;br&gt;
    
    </summary>
    
    
      <category term="centos" scheme="nbma.info/tags/centos/"/>
    
      <category term="https" scheme="nbma.info/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>802.1X认证过程(翻译)</title>
    <link href="nbma.info/8021X-auth-progression/"/>
    <id>nbma.info/8021X-auth-progression/</id>
    <published>2018-04-10T08:34:00.000Z</published>
    <updated>2018-04-21T09:14:32.577Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、初始化"><a href="#1、初始化" class="headerlink" title="1、初始化"></a>1、初始化</h3><p>当交换机检测到有新的请求者时，端口被启用，切状态是未授权。这种状态下，只允许802.1X的流量，其他流量（如TCP/UDP）将被丢弃。<br><a id="more"></a></p><h3 id="2、启动"><a href="#2、启动" class="headerlink" title="2、启动"></a>2、启动</h3><p>为了启动认证，交换机将周期性的发送<code>EAP-Request Identity</code>帧到本地LAN中的特殊mac地址<code>01:80:C2:00:00:03</code>。<br>请求者将侦听这个地址，并且在收到<code>EAP-Request Identity</code>时，使用包含<strong>请求者标识符（如用户ID）</strong>的<code>EAP-Response Identity</code>帧进行响应。<br>交换机左右认证者，将此身份响应封装到<code>Radius Access-Request</code>数据包中，并转发到认证服务器。<br>另外，请求者也可以通过向认证者发送<code>EAPOL-Start</code>帧来启动或重新启动认证，认证者使用<code>EAP-Request Identity</code>进行回复。</p><h3 id="3、EAP协商"><a href="#3、EAP协商" class="headerlink" title="3、EAP协商"></a>3、EAP协商</h3><p>身份认证服务器给交换机发送一个<code>RADIUS Access-Challenge</code>的回复报文，报文中包含了一个<code>EAP Request</code>，指定了EAP方法（认证服务器希望请求者使用的基于EAP的认证类型）。<br>认证者将这个EAP Request封装到EAPOL帧中，转发给请求者。<br>此时，请求者可以开始使用这个请求的EAP方法，或者执行NAK否认消息并响应一个自己希望执行的EAP方法。</p><h3 id="4、认证"><a href="#4、认证" class="headerlink" title="4、认证"></a>4、认证</h3><p>如果请求和认证服务器同意之前的EAP方法，那么他们将会发送EAP Request和Responses给对方，通过认证者转发，直到认证服务器响应一个封装在<code>RADIUS Access-Accept</code>报文中的EAP-Success，或者封装在<code>RADIUS Access-Reject</code>报文中的EAP-Failure。<br>如果认证成功，那么交换机端口将变为”授权”状态，允许所有正常流量。<br>如果认证失败，交换机端口保持”未授权”状态。<br>当申请者注销的时候，它会发送一个<code>EAPOL-logoff</code>信息给认证者，认证者改变端口状态到”未授权”，并阻止非EAP流量通过</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/1/17/802-1X.png" alt=""></p><p>原文：<a href="https://en.wikipedia.org/wiki/IEEE_802.1X" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/IEEE_802.1X</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、初始化&quot;&gt;&lt;a href=&quot;#1、初始化&quot; class=&quot;headerlink&quot; title=&quot;1、初始化&quot;&gt;&lt;/a&gt;1、初始化&lt;/h3&gt;&lt;p&gt;当交换机检测到有新的请求者时，端口被启用，切状态是未授权。这种状态下，只允许802.1X的流量，其他流量（如TCP/UDP）将被丢弃。&lt;br&gt;
    
    </summary>
    
    
      <category term="网络" scheme="nbma.info/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>SSLVPN基于安全组（角色）下发不同路由</title>
    <link href="nbma.info/cisco-asa-ssl-vpn-policy-base-security-group/"/>
    <id>nbma.info/cisco-asa-ssl-vpn-policy-base-security-group/</id>
    <published>2018-04-09T12:09:07.000Z</published>
    <updated>2018-04-21T09:14:32.581Z</updated>
    
    <content type="html"><![CDATA[<p>之前已经说过了ssl VPN的<a href="cisco-asa-ssl-vpn-configure/">基本配置</a>，再此基础上，实现不同角色的用户使用不同的策略。</p><a id="more"></a><p>针对radius段角色为<code>SSLVPN-DBA</code>的用户</p><h2 id="关闭客户端的tunnel-group-list显示"><a href="#关闭客户端的tunnel-group-list显示" class="headerlink" title="关闭客户端的tunnel group list显示"></a>关闭客户端的tunnel group list显示</h2><p>不关闭的话，所有策略将以下拉菜单列表的方式展现在在anyconnect端，且用户可自由选择<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ciscoasa(config)# webvpn </span><br><span class="line">ciscoasa(config-webvpn)# no tunnel-group-list enable</span><br></pre></td></tr></table></figure></p><h2 id="针对SSLVPN-DBA角色配置策略"><a href="#针对SSLVPN-DBA角色配置策略" class="headerlink" title="针对SSLVPN-DBA角色配置策略"></a>针对SSLVPN-DBA角色配置策略</h2><h3 id="下发路由列表TECH-SPL"><a href="#下发路由列表TECH-SPL" class="headerlink" title="下发路由列表TECH-SPL"></a>下发路由列表<code>TECH-SPL</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access-list TECH-SPL extended permit ip 172.17.0.0 255.255.0.0 any</span><br></pre></td></tr></table></figure><h3 id="配置group-policy，关联需要下发的路由TECH-SPL、访问控制SSL-ACL、地址池SSL-POOL"><a href="#配置group-policy，关联需要下发的路由TECH-SPL、访问控制SSL-ACL、地址池SSL-POOL" class="headerlink" title="配置group-policy，关联需要下发的路由TECH-SPL、访问控制SSL-ACL、地址池SSL-POOL"></a>配置group-policy，关联需要下发的路由<code>TECH-SPL</code>、访问控制<code>SSL-ACL</code>、地址池<code>SSL-POOL</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">group-policy SSLVPN-DBA internal</span><br><span class="line">group-policy SSLVPN-DBA attributes</span><br><span class="line"> dns-server value 192.168.115.11 192.168.115.12</span><br><span class="line"> vpn-simultaneous-logins 30</span><br><span class="line"> vpn-idle-timeout 120</span><br><span class="line"> vpn-filter value SSL-ACL</span><br><span class="line"> vpn-tunnel-protocol ssl-client </span><br><span class="line"> split-tunnel-policy tunnelspecified</span><br><span class="line"> split-tunnel-network-list value TECH-SPL</span><br><span class="line"> address-pools value SSL-POOL</span><br><span class="line"> webvpn</span><br><span class="line">  anyconnect ssl dtls enable</span><br><span class="line">  anyconnect mtu 1200</span><br><span class="line">  anyconnect keep-installer installed</span><br><span class="line">  anyconnect dtls compression lzs</span><br><span class="line">  anyconnect ask none default anyconnect</span><br></pre></td></tr></table></figure><h3 id="配置tunnel-group，关联认证radius服务器SSL和group策略SSLVPN-DBA"><a href="#配置tunnel-group，关联认证radius服务器SSL和group策略SSLVPN-DBA" class="headerlink" title="配置tunnel-group，关联认证radius服务器SSL和group策略SSLVPN-DBA"></a>配置<code>tunnel-group</code>，关联认证radius服务器<code>SSL</code>和group策略<code>SSLVPN-DBA</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tunnel-group SSLVPN-DBA type remote-access</span><br><span class="line">tunnel-group SSLVPN-DBA general-attributes</span><br><span class="line"> default-group-policy SSLVPN-DBA</span><br><span class="line"> authentication-server-group SSL</span><br><span class="line"> accounting-server-group SSL</span><br><span class="line">tunnel-group SSLVPN-DBA webvpn-attributes</span><br><span class="line"> group-alias SSLVPN-DBA enable</span><br></pre></td></tr></table></figure><p>此时输入该角色的用户在拨入时将获得与default不通的权限。</p><p>参考文档:<a href="https://www.fir3net.com/Firewalls/Cisco/cisco-asa-displaying-webvpn-bookmarks-based-on-ldap-ou.html" target="_blank" rel="noopener">Cisco ASA - Group-policy assignment based on OU</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前已经说过了ssl VPN的&lt;a href=&quot;cisco-asa-ssl-vpn-configure/&quot;&gt;基本配置&lt;/a&gt;，再此基础上，实现不同角色的用户使用不同的策略。&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络" scheme="nbma.info/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="asa" scheme="nbma.info/tags/asa/"/>
    
      <category term="SSLVPN" scheme="nbma.info/tags/SSLVPN/"/>
    
      <category term="cisco" scheme="nbma.info/tags/cisco/"/>
    
  </entry>
  
  <entry>
    <title>思科ASA配置SSLVPN</title>
    <link href="nbma.info/cisco-asa-ssl-vpn-configure/"/>
    <id>nbma.info/cisco-asa-ssl-vpn-configure/</id>
    <published>2018-04-02T06:05:07.000Z</published>
    <updated>2018-04-21T09:14:32.580Z</updated>
    
    <content type="html"><![CDATA[<p>在ASA配置SSL VPN过程如下，<br><a id="more"></a><br>接口和默认路由 略</p><h2 id="创建地址池SSL-POOL"><a href="#创建地址池SSL-POOL" class="headerlink" title="创建地址池SSL-POOL"></a>创建地址池<code>SSL-POOL</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip local pool SSL-POOL 172.17.44.2-172.17.47.254 mask 255.255.252.0</span><br></pre></td></tr></table></figure><h2 id="配置区域策略"><a href="#配置区域策略" class="headerlink" title="配置区域策略"></a>配置区域策略</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">same-security-traffic permit inter-interface</span><br><span class="line">same-security-traffic permit intra-interface</span><br></pre></td></tr></table></figure><h2 id="定义下发路由SSL-SPL"><a href="#定义下发路由SSL-SPL" class="headerlink" title="定义下发路由SSL-SPL"></a>定义下发路由<code>SSL-SPL</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">access-list SSL-SPL extended permit ip 172.17.0.0 255.255.0.0 any </span><br><span class="line">access-list SSL-SPL extended permit ip 10.0.0.0 255.255.0.0 any </span><br><span class="line">access-list SSL-SPL extended permit ip 10.201.0.0 255.255.0.0 any </span><br><span class="line">access-list SSL-SPL extended permit ip 192.168.96.0 255.255.224.0 any </span><br><span class="line">access-list SSL-SPL extended permit ip 10.101.0.0 255.255.0.0 any </span><br><span class="line">access-list SSL-SPL extended permit ip 10.12.0.0 255.255.0.0 any</span><br></pre></td></tr></table></figure><h2 id="定义ACL策略SSL-ACL"><a href="#定义ACL策略SSL-ACL" class="headerlink" title="定义ACL策略SSL-ACL"></a>定义ACL策略<code>SSL-ACL</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access-list SSL-ACL extended permit ip any any</span><br></pre></td></tr></table></figure><h2 id="定义认证服务器SSL"><a href="#定义认证服务器SSL" class="headerlink" title="定义认证服务器SSL"></a>定义认证服务器<code>SSL</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aaa-server SSL protocol radius</span><br><span class="line">aaa-server SSL (inside) host 172.17.40.41</span><br><span class="line"> key XXXXXXXX</span><br><span class="line"> authentication-port 1812</span><br><span class="line"> accounting-port 1813</span><br></pre></td></tr></table></figure><h2 id="允许inside管理"><a href="#允许inside管理" class="headerlink" title="允许inside管理"></a>允许inside管理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">management-access inside</span><br></pre></td></tr></table></figure><h2 id="指定anyconnect客户端"><a href="#指定anyconnect客户端" class="headerlink" title="指定anyconnect客户端"></a>指定anyconnect客户端</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">webvpn</span><br><span class="line"> enable inside</span><br><span class="line"> anyconnect image disk0:/anyconnect-win-4.4.03034-webdeploy-k9.pkg 1</span><br><span class="line"> anyconnect image disk0:/anyconnect-macos-4.4.04030-webdeploy-k9.pkg 2</span><br><span class="line"> anyconnect image disk0:/anyconnect-linux64-4.4.04030-webdeploy-k9.pkg 3</span><br><span class="line"> anyconnect enable</span><br><span class="line"> tunnel-group-list enable</span><br><span class="line"> cache</span><br><span class="line">  disable</span><br><span class="line"> error-recovery disable</span><br></pre></td></tr></table></figure><h2 id="配置group策略SSL-POLICY，关联需要下发的路由SSL-SPL、访问控制SSL-ACL、地址池SSL-POOL"><a href="#配置group策略SSL-POLICY，关联需要下发的路由SSL-SPL、访问控制SSL-ACL、地址池SSL-POOL" class="headerlink" title="配置group策略SSL-POLICY，关联需要下发的路由SSL-SPL、访问控制SSL-ACL、地址池SSL-POOL"></a>配置group策略<code>SSL-POLICY</code>，关联需要下发的路由<code>SSL-SPL</code>、访问控制<code>SSL-ACL</code>、地址池<code>SSL-POOL</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">group-policy SSL-POLICY internal</span><br><span class="line">group-policy SSL-POLICY attributes</span><br><span class="line"> dns-server value 192.168.115.11 192.168.115.12</span><br><span class="line"> vpn-simultaneous-logins 30</span><br><span class="line"> vpn-idle-timeout 120</span><br><span class="line"> vpn-filter value SSL-ACL</span><br><span class="line"> vpn-tunnel-protocol ssl-client </span><br><span class="line"> split-tunnel-policy tunnelspecified</span><br><span class="line"> split-tunnel-network-list value SSL-SPL</span><br><span class="line"> address-pools value SSL-POOL</span><br><span class="line"> webvpn</span><br><span class="line">  anyconnect ssl dtls enable</span><br><span class="line">  anyconnect mtu 1200</span><br><span class="line">  anyconnect keep-installer installed</span><br><span class="line">  anyconnect dtls compression lzs</span><br><span class="line">  anyconnect ask none default anyconnect</span><br></pre></td></tr></table></figure><h2 id="默认tunnel-group关联策略，关联认证radius服务器SSL和group策略SSL-POLICY"><a href="#默认tunnel-group关联策略，关联认证radius服务器SSL和group策略SSL-POLICY" class="headerlink" title="默认tunnel-group关联策略，关联认证radius服务器SSL和group策略SSL-POLICY"></a>默认tunnel-group关联策略，关联认证radius服务器<code>SSL</code>和group策略<code>SSL-POLICY</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tunnel-group DefaultWEBVPNGroup general-attributes</span><br><span class="line"> authentication-server-group SSL</span><br><span class="line"> accounting-server-group SSL</span><br><span class="line"> default-group-policy SSL-POLICY</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在ASA配置SSL VPN过程如下，&lt;br&gt;
    
    </summary>
    
    
      <category term="网络" scheme="nbma.info/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="asa" scheme="nbma.info/tags/asa/"/>
    
      <category term="SSLVPN" scheme="nbma.info/tags/SSLVPN/"/>
    
      <category term="cisco" scheme="nbma.info/tags/cisco/"/>
    
  </entry>
  
  <entry>
    <title>cisco路由器nat回流解决办法--NVI</title>
    <link href="nbma.info/cisco-nat-nvi-back/"/>
    <id>nbma.info/cisco-nat-nvi-back/</id>
    <published>2018-03-31T14:02:04.000Z</published>
    <updated>2018-04-21T09:14:32.583Z</updated>
    
    <content type="html"><![CDATA[<p>困扰已久的路由器映射的回流问题终于解决了。</p><a id="more"></a><p>回流，简单的说就是内网终端通过映射后的公网地址访问内网服务。<br>通常配置的inside-outside模式的nat是无法实现回流的，<br><img src="http://i9ps.qiniudn.com/18-3-31/10062644.jpg" alt=""></p><h2 id="Cisco的domainless-NAT"><a href="#Cisco的domainless-NAT" class="headerlink" title="Cisco的domainless NAT"></a>Cisco的domainless NAT</h2><p>Domainless就是说不再区分inside和outside，只是单纯地做NAT，用一个叫做NAT Virtual Interface的虚拟接口来实现，这样有什么好处呢？说实话，从界面上看不出来，但是从其实现角度，就可以通过路由的方式将带有ip nat enable配置的接口进来的包全部导入这个虚拟接口NVI0中。然后用数据包的源地址和目标地址分别查询SNAT表和DNAT表，根据结果进行NAT操作，随后进入真正的路由查询。</p><p>不管方向，不管路由，只要数据包进入了一块带有ip nat enable配置的物理网卡，就会进行NAT匹配以及匹配成功后的操作，不管是SNAT和DNAT都在这里进行。这个实现虽然很豪放，但是却解决了所有问题。</p><p>数据包在进入真正的路由查询前，NAT就已经完成了，在路由器看来，NAT操作被藏起来了，就好像数据包本来就是那个样子一样。当然Domainless的NAT也不再和任何其它操作关联，ACL，VPN感兴趣流匹配，policy routing等都和NAT无关。</p><p><img src="http://i9ps.qiniudn.com/18-3-31/83311476.jpg" alt=""></p><p>如以上拓扑，<br>将R3的80端口映射到外网，那么R2将无法使用公网地址访问R3<br>该方式的传统的端口映射为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ip nat inside source static tcp 10.1.12.2 80 61.128.1.1 8000</span><br><span class="line">ip nat inside source static tcp 10.1.12.2 80 61.128.1.3 80</span><br><span class="line">ip nat inside source list NAT interface e0/0 overload</span><br><span class="line">interface e0/0</span><br><span class="line">ip nat outside</span><br><span class="line">interface e0/1</span><br><span class="line">ip nat inside</span><br></pre></td></tr></table></figure></p><p>更改为NVI NAT：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ip nat source static tcp 10.1.12.2 80 61.128.1.1 8000</span><br><span class="line">ip nat source static tcp 10.1.12.2 80 61.128.1.3 80</span><br><span class="line">ip nat source list NAT interface e0/0 overload</span><br><span class="line">interface e0/0</span><br><span class="line">ip nat enable</span><br><span class="line">interface e0/1</span><br><span class="line">ip nat enable</span><br></pre></td></tr></table></figure></p><p>更改为NVI NAT可能内网还是无法通过公网地址访问内网服务器，此时有个重要的一点是要关闭端口的重定向功能：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface e0/0</span><br><span class="line">no ip redirects</span><br><span class="line">interface e0/1</span><br><span class="line">no ip redirects</span><br></pre></td></tr></table></figure></p><p>这样配置即可完成，检查状态命令为：<code>show ip nat nvi translations</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sh ip nat nvi translations </span><br><span class="line">Pro Source global      Source local       Destin  local      Destin  global</span><br><span class="line">tcp 61.128.1.1:28909   10.1.11.2:28909    61.128.1.3:80      10.1.12.2:80</span><br><span class="line">tcp 61.128.1.1:8000    10.1.12.2:80       ---                ---</span><br></pre></td></tr></table></figure></p><p>访问测试OK。同时也能看到，现在内部终端R2通过公网地址访问R3的时候，源地址也被nat为出口路由器的公网地址。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;困扰已久的路由器映射的回流问题终于解决了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络" scheme="nbma.info/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="cisco" scheme="nbma.info/tags/cisco/"/>
    
      <category term="nat" scheme="nbma.info/tags/nat/"/>
    
  </entry>
  
  <entry>
    <title>grafana添加zabbix源和prometheus源</title>
    <link href="nbma.info/grafana-zabbix-prometheus/"/>
    <id>nbma.info/grafana-zabbix-prometheus/</id>
    <published>2018-03-26T03:44:35.000Z</published>
    <updated>2018-03-27T15:18:46.442Z</updated>
    
    <content type="html"><![CDATA[<p>grafana是用于可视化大型测量数据的开源程序，他提供了强大和优雅的方式去创建、共享、浏览数据。dashboard中显示了你不同metric数据源中的数据。</p><a id="more"></a><h2 id="安装grafana"><a href="#安装grafana" class="headerlink" title="安装grafana"></a>安装grafana</h2><p>(官方download](<a href="https://grafana.com/grafana/download" target="_blank" rel="noopener">https://grafana.com/grafana/download</a>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana-5.0.3-1.x86_64.rpm </span><br><span class="line">sudo yum localinstall grafana-5.0.3-1.x86_64.rpm </span><br><span class="line"></span><br><span class="line">systemctl start grafana-server</span><br><span class="line">systemctl enable grafana-server</span><br></pre></td></tr></table></figure></p><p>安装完成后访问Dashboard:<br>http://本机IP:3000<br>默认用户名密码都是admin</p><h2 id="安装最新zabbix插件"><a href="#安装最新zabbix插件" class="headerlink" title="安装最新zabbix插件"></a>安装最新zabbix插件</h2><p>grafana-cli plugins install alexanderzobnin-zabbix-app</p><p>完成后在grafan Dashboard添加数据源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type: zabbix app</span><br><span class="line">http url: http://zbx_IP/zabbix/api_jsonrpc.php</span><br><span class="line">Username: Admin</span><br><span class="line">Password: ******</span><br></pre></td></tr></table></figure></p><p><code>Save &amp; Test</code>保存</p><p>在Dashboards页面导入自带的zabbix Status模板</p><h2 id="添加prometheus数据源"><a href="#添加prometheus数据源" class="headerlink" title="添加prometheus数据源"></a>添加prometheus数据源</h2><p>添加数据源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Name:Prometheus</span><br><span class="line">Type:Prometheus</span><br><span class="line">Url:http://prometheus_ip:9090/</span><br><span class="line">Access:proxy</span><br></pre></td></tr></table></figure></p><p>在Dashboards页面导入自带的Prometheus Status模板和Grafana模板</p><p>目前grafana status模板是完全没有数据的，需要先添加监控<br>在prometheus.yml中添加如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- job_name: &apos;grafana&apos;</span><br><span class="line">  static_configs:</span><br><span class="line">    - targets: [&apos;**GRAFANA_IP**:9100&apos;]</span><br><span class="line">      labels:</span><br><span class="line">        instance: grafana</span><br></pre></td></tr></table></figure></p><p>重启prometheus<br>systemctl restart prometheus</p><p>在查看应该会获取到grafana server的一些数据。</p><p>另外grafana官方也有一些模板可以参考，<br>在garfana dashboard中import Dashboard<br>输入编号405，即<a href="https://grafana.com/dashboards/405" target="_blank" rel="noopener">https://grafana.com/dashboards/405</a><br>导入即可。</p><p>有关zabbix和prometheus安装，参考：<br><a href="/Centos7-deploy-zabbix3/">zabbix安装</a><br><a href="/Prometheus-base/">Prometheus安装</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;grafana是用于可视化大型测量数据的开源程序，他提供了强大和优雅的方式去创建、共享、浏览数据。dashboard中显示了你不同metric数据源中的数据。&lt;/p&gt;
    
    </summary>
    
    
      <category term="监控" scheme="nbma.info/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus入门</title>
    <link href="nbma.info/Prometheus-base/"/>
    <id>nbma.info/Prometheus-base/</id>
    <published>2018-03-22T12:00:06.000Z</published>
    <updated>2018-03-27T15:18:46.433Z</updated>
    
    <content type="html"><![CDATA[<!--markdown-->Prometheus的基本原理是通过HTTP协议周期性抓取被监控组件的状态，任意组件只要提供对应的HTTP接口就可以接入监控。不需要任何SDK或者其他的集成过程。这样做非常适合做虚拟化环境监控系统，比如VM、Docker、Kubernetes等。<br><a id="more"></a><p>输出被监控组件信息的HTTP接口被叫做exporter 。目前互联网公司常用的组件大部分都有exporter可以直接使用，比如Varnish、Haproxy、Nginx、MySQL、Linux系统信息(包括磁盘、内存、CPU、网络等等)。</p><p>Prometheus服务过程大概是这样：</p><ul><li><p>Prometheus Daemon负责定时去目标上抓取metrics(指标)数据，每个抓取目标需要暴露一个http服务的接口给它定时抓取。Prometheus支持通过配置文件、文本文件、Zookeeper、Consul、DNS SRV Lookup等方式指定抓取目标。Prometheus采用PULL的方式进行监控，即服务器可以直接通过目标PULL数据或者间接地通过中间网关来Push数据。</p></li><li><p>Prometheus在本地存储抓取的所有数据，并通过一定规则进行清理和整理数据，并把得到的结果存储到新的时间序列中。</p></li><li><p>Prometheus通过PromQL和其他API可视化地展示收集的数据。Prometheus支持很多方式的图表可视化，例如Grafana、自带的Promdash以及自身提供的模版引擎等等。Prometheus还提供HTTP API的查询方式，自定义所需要的输出。</p></li><li><p>PushGateway支持Client主动推送metrics到PushGateway，而Prometheus只是定时去Gateway上抓取数据。</p></li><li><p>Alertmanager是独立于Prometheus的一个组件，可以支持Prometheus的查询语句，提供十分灵活的报警方式。</p></li></ul><h4 id="Prometheus适用的场景"><a href="#Prometheus适用的场景" class="headerlink" title="Prometheus适用的场景"></a>Prometheus适用的场景</h4><p>Prometheus在记录纯数字时间序列方面表现非常好。它既适用于面向服务器等硬件指标的监控，也适用于高动态的面向服务架构的监控。对于现在流行的微服务，Prometheus的多维度数据收集和数据筛选查询语言也是非常的强大。Prometheus是为服务的可靠性而设计的，当服务出现故障时，它可以使你快速定位和诊断问题。它的搭建过程对硬件和服务没有很强的依赖关系。</p><h4 id="Prometheus不适用的场景"><a href="#Prometheus不适用的场景" class="headerlink" title="Prometheus不适用的场景"></a>Prometheus不适用的场景</h4><p>Prometheus它的价值在于可靠性，甚至在很恶劣的环境下，你都可以随时访问它和查看系统服务各种指标的统计信息。 如果你对统计数据需要100%的精确，它并不适用，例如：它不适用于实时计费系统。</p><p>Prometheus官网：<a href="https://prometheus.io/" target="_blank" rel="noopener">https://prometheus.io/</a></p><h3 id="安装Prometheus"><a href="#安装Prometheus" class="headerlink" title="安装Prometheus"></a>安装Prometheus</h3><p>Prometheus官方给出了多重部署方案，比如：Docker容器、Ansible、Chef、Puppet、Saltstack等。</p><p>Prometheus用Golang实现，因此具有天然可移植性(支持Linux、Windows、macOS和Freebsd)。这里直接使用预编译的二进制文件部署，开箱即用。</p><ul><li>Prometheus安装</li></ul><p>这里以Linux系统为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://github.com/prometheus/prometheus/releases/download/v2.2.1/prometheus-2.2.1.linux-amd64.tar.gz</span><br><span class="line">$ tar xzvf prometheus-2.2.1.linux-amd64.tar.gz</span><br><span class="line">$ mv prometheus-2.2.1.linux-amd64 /usr/local/prometheus</span><br></pre></td></tr></table></figure><p>其它系统版本可在这里下载：<a href="https://prometheus.io/download/" target="_blank" rel="noopener">https://prometheus.io/download/</a></p><ul><li>验证安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/prometheus</span><br><span class="line">$ ./prometheus --version</span><br><span class="line">prometheus, version 2.2.1 (branch: HEAD, revision: bc6058c81272a8d938c05e75607371284236aadc)</span><br><span class="line">  build user:       root@149e5b3f0829</span><br><span class="line">  build date:       20180314-14:15:45</span><br><span class="line">  go version:       go1.10</span><br></pre></td></tr></table></figure><ul><li>配置Prometheus</li></ul><p>在prometheus目录下有一个名为<code>prometheus.yml</code>的主配置文件。其中包含大多数标准配置及prometheus的自检控配置，默认配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ cat /usr/local/prometheus/prometheus.yml</span><br><span class="line"></span><br><span class="line"># 全局配置</span><br><span class="line">global:</span><br><span class="line">  scrape_interval:     15s # 默认抓取间隔, 15秒向目标抓取一次数据。</span><br><span class="line">  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line">  # scrape_timeout is set to the global default (10s).</span><br><span class="line"></span><br><span class="line">  # 这个标签是在本机上每一条时间序列上都会默认产生的，主要可以用于联合查询、远程存储、Alertmanger时使用。</span><br><span class="line">  external_labels:</span><br><span class="line">      monitor: &apos;codelab-monitor&apos;</span><br><span class="line"></span><br><span class="line"># Load rules once and periodically evaluate them according to the global &apos;evaluation_interval&apos;.</span><br><span class="line">rule_files:</span><br><span class="line">  # - &quot;first.rules&quot;</span><br><span class="line">  # - &quot;second.rules&quot;</span><br><span class="line"></span><br><span class="line"># 这里就表示抓取对象的配置</span><br><span class="line"># 这里是抓去promethues自身的配置</span><br><span class="line">scrape_configs:</span><br><span class="line"># job name 这个配置是表示在这个配置内的时间序例，每一条都会自动添加上这个&#123;job_name:&quot;prometheus&quot;&#125;的标签。</span><br><span class="line">  - job_name: &apos;prometheus&apos;</span><br><span class="line"></span><br><span class="line">    # metrics_path defaults to &apos;/metrics&apos;</span><br><span class="line">    # scheme defaults to &apos;http&apos;.</span><br><span class="line"></span><br><span class="line">    # 重写了全局抓取间隔时间，由15秒重写成5秒。</span><br><span class="line">    scrape_interval: 5s</span><br><span class="line"></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&apos;localhost:9090&apos;]</span><br></pre></td></tr></table></figure><ul><li>创建用户</li></ul><p>这里单独创建一个专门用于运行prometheus的用户，不用root运行程序是一种好习惯。主目录为<code>/var/lib/prometheus</code>，用作prometheus的数据目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ groupadd prometheus</span><br><span class="line">$ useradd -g prometheus -m -d /var/lib/prometheus -s /sbin/nologin prometheus</span><br></pre></td></tr></table></figure><ul><li>创建Systemd服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/systemd/system/prometheus.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=prometheus</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=prometheus</span><br><span class="line">ExecStart=/usr/local/prometheus/prometheus --config.file=/usr/local/prometheus/prometheus.yml --storage.tsdb.path=/var/lib/prometheus</span><br><span class="line">Restart=on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>启动Prometheus</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start prometheus</span><br></pre></td></tr></table></figure><ul><li>验证Prometheus是否启动成功</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl status prometheus</span><br><span class="line">● prometheus.service - prometheus</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/prometheus.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Thu 2018-03-22 16:11:10 CST; 6s ago</span><br><span class="line"> Main PID: 60721 (prometheus)</span><br><span class="line">   CGroup: /system.slice/prometheus.service</span><br><span class="line">           └─60721 /usr/local/prometheus/prometheus --config.file=/usr/local/prometheus/prometheus.yml --storage.tsdb.path=/var/li...</span><br></pre></td></tr></table></figure><ul><li>访问自带Web</li></ul><p>Prometheus自带一个比较简单的Web，可以查看表达式搜索结果、报警配置、prometheus配置,exporter状态等。自带Web默认在<code>http://ip:9090</code>。</p><p>Prometheus本身也是自带exporter的,我们通过请求 <code>http://ip:9090/metrics</code> 可以查看从exporter中能具体抓到哪些数据。</p><p>这里以Prometheus本身数据为例，简单演示下在Web中查询指定表达式及图形化显示查询结果。</p><h3 id="使用Prometheus监控服务器"><a href="#使用Prometheus监控服务器" class="headerlink" title="使用Prometheus监控服务器"></a>使用Prometheus监控服务器</h3><p>上面用Prometheus本身的数据简单演示了监控数据的查询，这里我们用一个监控服务器状态的例子来更加直观说明。</p><p>为监控服务器CPU、内存、磁盘、I/O等信息，首先需要安装node_exporter。node_exporter的作用是用于机器系统数据收集。</p><ul><li>安装node_exporter</li></ul><p>node_exporter也是用Golang实现，直接使用预编译的二进制文件部署，开箱即用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://github.com/prometheus/node_exporter/releases/download/v0.15.2/node_exporter-0.15.2.linux-amd64.tar.gz</span><br><span class="line">$ tar -zxvf node_exporter-0.15.2.linux-amd64.tar.gz</span><br><span class="line">$ mv node_exporter-0.15.2.linux-amd64 /usr/local/prometheus/node_exporter</span><br></pre></td></tr></table></figure><ul><li>创建Systemd服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/systemd/system/node_exporter.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=node_exporter</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=prometheus</span><br><span class="line">ExecStart=/usr/local/prometheus/node_exporter/node_exporter</span><br><span class="line">Restart=on-failure</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>启动Node exporter</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start node_exporter</span><br></pre></td></tr></table></figure><ul><li>验证Node exporter是否启动成功</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl status node_exporter</span><br><span class="line">● node_exporter.service - node_exporter</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/node_exporter.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Thu 2018-03-22 16:14:04 CST; 6s ago</span><br><span class="line"> Main PID: 60904 (node_exporter)</span><br><span class="line">   CGroup: /system.slice/node_exporter.service</span><br><span class="line">           └─60904 /usr/local/prometheus/node_exporter/node_exporter</span><br></pre></td></tr></table></figure><ul><li>修改prometheus.yml，加入下面的监控目标：</li></ul><p>Node Exporter默认的抓取地址为<code>http://IP:9100/metrics</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vim  /usr/local/prometheus/prometheus.yml</span><br><span class="line"></span><br><span class="line">  - job_name: &apos;linux&apos;</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&apos;localhost:9100&apos;]</span><br><span class="line">        labels:</span><br><span class="line">          instance: node1</span><br></pre></td></tr></table></figure><p>prometheus.yml中一共定义了两个监控：一个是监控prometheus自身服务，另一个是监控Linux服务器。这里给个完整的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">scrape_configs:</span><br><span class="line"></span><br><span class="line">  - job_name: &apos;prometheus&apos;</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&apos;localhost:9090&apos;]</span><br><span class="line"></span><br><span class="line">  - job_name: &apos;linux&apos;</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&apos;localhost:9100&apos;]</span><br><span class="line">        labels:</span><br><span class="line">          instance: node1</span><br></pre></td></tr></table></figure><ul><li>重启Prometheus</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl restart prometheus</span><br></pre></td></tr></table></figure><ul><li>在Prometheus Web查看监控的目标</li></ul><p>访问Prometheus Web，在Status-&gt;Targets页面下，我们可以看到我们配置的两个Target，它们的State为UP。</p>]]></content>
    
    <summary type="html">
    
      &lt;!--markdown--&gt;Prometheus的基本原理是通过HTTP协议周期性抓取被监控组件的状态，任意组件只要提供对应的HTTP接口就可以接入监控。不需要任何SDK或者其他的集成过程。这样做非常适合做虚拟化环境监控系统，比如VM、Docker、Kubernetes等。&lt;br&gt;
    
    </summary>
    
    
      <category term="centos" scheme="nbma.info/tags/centos/"/>
    
      <category term="监控" scheme="nbma.info/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>nginx入门</title>
    <link href="nbma.info/learn-nginx/"/>
    <id>nbma.info/learn-nginx/</id>
    <published>2018-03-21T12:31:17.000Z</published>
    <updated>2018-04-21T09:14:32.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h2><p>打开nginx.org查看最近稳定版，以下链接查看最新nginx的yum repo：<br><a href="http://nginx.org/en/linux_packages.html#stable" target="_blank" rel="noopener">http://nginx.org/en/linux_packages.html#stable</a></p><a id="more"></a><p>编辑/etc/yum.repo.d/nginx.repo填入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">name=nginx repo</span><br><span class="line">baseurl=http://nginx.org/packages/OS/OSRELEASE/$basearch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure></p><blockquote><p>Replace “OS” with “rhel” or “centos”, depending on the distribution used, and “OSRELEASE” with “6” or “7”, for 6.x or 7.x versions, respectively.</p></blockquote><p>然后使用<code>yum list |grep nginx</code><br>查看输出中是否含有<code>nginx.x86_64</code><br>如果有说明nginx repo安装成功。</p><p>安装nginx<br><code>yum -y install nginx</code></p><p>##概述<br><code>nginx -v</code> 查看nginx版本</p><p><code>rpm -ql nginx</code> 查看nginx目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/etc/logrotate.d/nginx  #nginx日志轮转，用于logratate服务的日志切割</span><br><span class="line">/etc/nginx  #nginx主配置文件</span><br><span class="line">/etc/nginx/conf.d  #nginx主配置文件</span><br><span class="line">/etc/nginx/conf.d/default.conf  #nginx默认配置文件</span><br><span class="line">/etc/nginx/fastcgi_params   #cgi配置相关</span><br><span class="line">/etc/nginx/koi-utf   #编码转换文件，映射转换文件</span><br><span class="line">/etc/nginx/koi-win   #编码转换文件，映射转换文件</span><br><span class="line">/etc/nginx/mime.types   #设置http协议的Content-Type与扩展名对应关系（nginx处理无法识别的扩展名时读取该文件）</span><br><span class="line">/etc/nginx/modules    #nginx模块目录</span><br><span class="line">/etc/nginx/nginx.conf  #nginx主配置文件</span><br><span class="line">/etc/nginx/scgi_params   #cgi配置相关</span><br><span class="line">/etc/nginx/uwsgi_params   #cgi配置相关</span><br><span class="line">/etc/nginx/win-utf   #编码转换文件，映射转换文件</span><br><span class="line">/etc/sysconfig/nginx   # 配置系统守护进程管理器管理方式</span><br><span class="line">/etc/sysconfig/nginx-debug   # 配置系统守护进程管理器管理方式</span><br><span class="line">/usr/lib/systemd/system/nginx-debug.service   # 配置系统守护进程管理器管理方式</span><br><span class="line">/usr/lib/systemd/system/nginx.service   # 配置系统守护进程管理器管理方式</span><br><span class="line">/usr/lib64/nginx</span><br><span class="line">/usr/lib64/nginx/modules    #nginx模块目录</span><br><span class="line">/usr/libexec/initscripts/legacy-actions/nginx</span><br><span class="line">/usr/libexec/initscripts/legacy-actions/nginx/check-reload</span><br><span class="line">/usr/libexec/initscripts/legacy-actions/nginx/upgrade</span><br><span class="line">/usr/sbin/nginx   #nginx命令</span><br><span class="line">/usr/sbin/nginx-debug   #nginx命令</span><br><span class="line">/usr/share/doc/nginx-1.12.2   #帮助和手册</span><br><span class="line">/usr/share/doc/nginx-1.12.2/COPYRIGHT   #帮助和手册</span><br><span class="line">/usr/share/man/man8/nginx.8.gz   #帮助和手册</span><br><span class="line">/usr/share/nginx</span><br><span class="line">/usr/share/nginx/html</span><br><span class="line">/usr/share/nginx/html/50x.html</span><br><span class="line">/usr/share/nginx/html/index.html</span><br><span class="line">/var/cache/nginx    #nginx缓存目录</span><br><span class="line">/var/log/nginx    #nginx日志</span><br></pre></td></tr></table></figure></p><p><code>nginx -V</code> 查看nginx详细的编译参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">*#安装目录或路径*</span><br><span class="line">--prefix=/etc/nginx </span><br><span class="line">--sbin-path=/usr/sbin/nginx </span><br><span class="line">--modules-path=/usr/lib64/nginx/modules </span><br><span class="line">--conf-path=/etc/nginx/nginx.conf </span><br><span class="line">--error-log-path=/var/log/nginx/error.log </span><br><span class="line">--http-log-path=/var/log/nginx/access.log </span><br><span class="line">--pid-path=/var/run/nginx.pid </span><br><span class="line">--lock-path=/var/run/nginx.lock </span><br><span class="line"></span><br><span class="line">*#执行对应模块时，nginx所保留的临时文件*</span><br><span class="line">--http-client-body-temp-path=/var/cache/nginx/client_temp </span><br><span class="line">--http-proxy-temp-path=/var/cache/nginx/proxy_temp </span><br><span class="line">--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp </span><br><span class="line">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp </span><br><span class="line">--http-scgi-temp-path=/var/cache/nginx/scgi_temp </span><br><span class="line"></span><br><span class="line">*#nginx启动的用户和用户组*</span><br><span class="line">--user=nginx </span><br><span class="line">--group=nginx </span><br><span class="line"></span><br><span class="line">*#nginx模块*</span><br><span class="line">--with-compat </span><br><span class="line">--with-file-aio </span><br><span class="line">--with-threads </span><br><span class="line">--with-http_addition_module </span><br><span class="line">--with-http_auth_request_module </span><br><span class="line">--with-http_dav_module </span><br><span class="line">--with-http_flv_module </span><br><span class="line">--with-http_gunzip_module </span><br><span class="line">--with-http_gzip_static_module </span><br><span class="line">--with-http_mp4_module </span><br><span class="line">--with-http_random_index_module </span><br><span class="line">--with-http_realip_module </span><br><span class="line">--with-http_secure_link_module </span><br><span class="line">--with-http_slice_module </span><br><span class="line">--with-http_ssl_module </span><br><span class="line">--with-http_stub_status_module </span><br><span class="line">--with-http_sub_module </span><br><span class="line">--with-http_v2_module </span><br><span class="line">--with-mail </span><br><span class="line">--with-mail_ssl_module </span><br><span class="line">--with-stream </span><br><span class="line">--with-stream_realip_module </span><br><span class="line">--with-stream_ssl_module </span><br><span class="line">--with-stream_ssl_preread_module </span><br><span class="line"></span><br><span class="line">*#设置额外的参数将被添加到CFLAGS变量*</span><br><span class="line">--with-cc-opt=&apos;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC&apos; </span><br><span class="line"></span><br><span class="line">*#设置附加的参数，链接系统库*</span><br><span class="line">--with-ld-opt=&apos;-Wl,-z,relro -Wl,-z,now -pie&apos;</span><br></pre></td></tr></table></figure><h2 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h2><p>/etc/nginx/nginx.conf </p><pre><code>log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;access_log  /var/log/nginx/access.log  main;#日志路径和格式</code></pre><h3 id="nginx变量"><a href="#nginx变量" class="headerlink" title="nginx变量"></a>nginx变量</h3><h4 id="nginx请求变量"><a href="#nginx请求变量" class="headerlink" title="nginx请求变量"></a>nginx请求变量</h4><p>arg_PARAMETER、http_HRADER、sent_http_HEADER<br>比如<code>$http_user_agent</code></p><h4 id="nginx内置变量"><a href="#nginx内置变量" class="headerlink" title="nginx内置变量"></a>nginx内置变量</h4><p><a href="http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format" target="_blank" rel="noopener">http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format</a></p><h4 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h4><p>待添加</p><h2 id="nginx模块"><a href="#nginx模块" class="headerlink" title="nginx模块"></a>nginx模块</h2><p>nginx官方模块和第三方模块</p><h3 id="proxy-pass模块"><a href="#proxy-pass模块" class="headerlink" title="proxy_pass模块"></a>proxy_pass模块</h3><p>语法：<code>proxy_pass http://xxxx/yyy</code></p><blockquote><p>正向代理：代理client<br>反向代理：代理server</p></blockquote><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>通过<code>proxy_pass</code>转发到<code>upstream server</code>组<br>upstream模块必须配置在server层以外<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">upstream name&#123;</span><br><span class="line">server 1.1.1.1:8881;</span><br><span class="line">server x.nbma.info;</span><br><span class="line">server 2.2.2.2   weight=5; #权重,需要设置加权轮询</span><br><span class="line"></span><br><span class="line">server 3.3.3.3   backup; #备份节点</span><br><span class="line"></span><br><span class="line">server 4.4.4.4   down;  #不提供服务</span><br><span class="line"></span><br><span class="line">server 5.5.5.5    max_fails=3; #允许请求失败的次数</span><br><span class="line"></span><br><span class="line">server 6.6.6.6    fail_timeout=30; #重试时间</span><br><span class="line"></span><br><span class="line">server 7.7.7.7    max_conn=500; #最大连接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">location /&#123;</span><br><span class="line">    proxy_pass http://name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调度算法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">upstream name&#123;</span><br><span class="line">    ip_hash;  #基于源IP hash</span><br><span class="line">    least_conn;  #最小连接</span><br><span class="line">    hash $request_uri;  #基于变量uri进行hash</span><br><span class="line">server 1.1.1.1:8881;</span><br><span class="line">server x.nbma.info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="rewrite规则"><a href="#rewrite规则" class="headerlink" title="rewrite规则"></a>rewrite规则</h3><p>语法： rewrite regex replacement [flag];<br>位置：只能在server,location或者if内<br>例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^(.*)$ /pages/maintain.html break;</span><br></pre></td></tr></table></figure></p><p>flag类型：</p><blockquote><p>last: 停止rewrite检测，继续匹配rewrite之后的其他规则，服务器只收到一次请求<br>break:  停止rewrite检测，不在匹配rewrite之后的其他规则，直接去root目录<br>redirect: 返回302临时重定向，地址栏会显示跳转后的地址，服务器收到两次请求<br>permanent: 返回301永久重定向，地址栏会显示跳转后的地址，服务器收到两次请求，客户端会缓存这次跳转结果，之后跳转将由浏览器完成，无需经过服务器处理</p></blockquote><h3 id="常见的rewrite规则："><a href="#常见的rewrite规则：" class="headerlink" title="常见的rewrite规则："></a>常见的rewrite规则：</h3><p>SEO优化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^/course-(\d+)-(\d+)-(\d+)-\.html$ /course/$1/$2/$3.html break;</span><br><span class="line"></span><br><span class="line">http://example.com/course-11-22-33.html</span><br><span class="line">http://example.com/course/11/22/3.html</span><br></pre></td></tr></table></figure></p><p>基于agent判断<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ($http_user_agent ~* Chrome) &#123;</span><br><span class="line">rewrite ^/nginx http://example.com/xxx break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>文件路径不存在，类似404<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (!-f $request_filename) &#123;</span><br><span class="line">rewrite ^(.*)$ http://example.com/xxx redirect;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;nginx安装&quot;&gt;&lt;a href=&quot;#nginx安装&quot; class=&quot;headerlink&quot; title=&quot;nginx安装&quot;&gt;&lt;/a&gt;nginx安装&lt;/h2&gt;&lt;p&gt;打开nginx.org查看最近稳定版，以下链接查看最新nginx的yum repo：&lt;br&gt;&lt;a href=&quot;http://nginx.org/en/linux_packages.html#stable&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://nginx.org/en/linux_packages.html#stable&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="系统" scheme="nbma.info/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>ospf知识点-常见问题</title>
    <link href="nbma.info/ospf-question/"/>
    <id>nbma.info/ospf-question/</id>
    <published>2018-03-20T03:27:06.000Z</published>
    <updated>2018-04-21T09:14:32.591Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1：在一台路由器上，可以同时配置多个OSPF进程吗？</strong><br>可以，同一台设备上不用进程号的ospf lsdb是独立的。且进程号只具有本地意义，用于区分多个ospf进程。在同一链路接口两端设备的ospf进程号可以不一样。<br><a id="more"></a><br><strong>2：OSPF中stub与NSSA有什么区别？</strong><br>主要区别是是否可以接受外部路由。其中stub区域内只有本地的1，2，3类LSA，通过ABR与area0相连；NSSA区域除了具备stub特性外，还可以接收来自外部其他路由协议的路由，通过ASBR进入ospf，在NSSA内为7类LSA，再通过ABR转换为5类LSA进入其他OSPF区域。</p><p><strong>3：OSPF建立虚链路只能用virtual-link命令吗？</strong><br>virtual-link：其他区域和area0的区域间虚链路<br>sham-link: 在MPLS VPN环境下的后门链路，属于区域内虚链路<br>gre：非ospf技术</p><p><strong>4：为什么在OSPF中不能重分发静态默认路由？</strong><br>引入静态只能在进程下default-information originate (always)<br>为什么这个，前面大神说如果重分布可以的话，某些情况下可能会导致环路，还没想到案例。</p><p><strong>5：为什么OSPF在使用协议内过滤时，使用OUT和接口组合会报错？</strong><br>ospf邻居间传递的是lsdb。<br>进程下in方向是从LSDB读取之后，本地生成的路由条目加入路由表之前生效的。<br>而out通告出去的也是LSDB，不是像bgp那样的路由条目，所以无法通过out+接口过滤。</p><p><strong>6：OSPF是否可以实现非等价的负载均衡？</strong><br>由于cost机制，只能实现等价负载均衡。</p><p><strong>7：OSPF是否支持区域内汇总？为什么？</strong><br>同一区域的LSDB是一直的，要修改只能在ABR和ASBR，也就是区域间。</p><p><strong>8：对于常用的查看命令，你是否习惯设置命令快捷方式？讨论交流一下设置的方法。</strong><br>快捷方式用得少，我在路由器上习惯这么敲：<br>sh ip os in br（查看接口宣告及角色）<br>sh ip os nei（查看邻居情况及角色）<br>sh run | s r o（查看ospf配置）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1：在一台路由器上，可以同时配置多个OSPF进程吗？&lt;/strong&gt;&lt;br&gt;可以，同一台设备上不用进程号的ospf lsdb是独立的。且进程号只具有本地意义，用于区分多个ospf进程。在同一链路接口两端设备的ospf进程号可以不一样。&lt;br&gt;
    
    </summary>
    
    
      <category term="网络" scheme="nbma.info/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="ospf" scheme="nbma.info/tags/ospf/"/>
    
  </entry>
  
  <entry>
    <title>无线基础</title>
    <link href="nbma.info/wireless-base/"/>
    <id>nbma.info/wireless-base/</id>
    <published>2018-03-09T13:51:08.000Z</published>
    <updated>2018-03-10T11:39:23.725Z</updated>
    
    <content type="html"><![CDATA[<p>最近梳理了一般无线CCNA的支持还有Aruba的无线基本配置</p><a id="more"></a><h2 id="思科AireOS"><a href="#思科AireOS" class="headerlink" title="思科AireOS"></a>思科AireOS</h2><p>Service-port interface :带外网管<br>Manager Interface: PC https网管，WLC发起连接radius时使用<br>AP Manager Interface: 用于AP寻找WLC ，与AP建立CAPWAP隧道；8.0以后版本默认和manager interface共用一个port<br>Virtual Interface: 用于对无线用户隐藏真实的dhcp服务器地址（仅在中心转发时）<br>Dynamic Interface: 关联有线网络的VLAN</p><p>创建WLAN的时候需要配置SSID，而且使用中心转发的时候需要关联对应的dynamic interface</p><p>Option 43选项：在dhcp下配置<code>option 43 hex f104.0a01.0164</code><br> f1固定，04表示一个控制器地址，08表示两个控制器地址<br>0a010164即10.1.1.100</p><h2 id="Aruba基本配置"><a href="#Aruba基本配置" class="headerlink" title="Aruba基本配置"></a>Aruba基本配置</h2><p>配置vlan, SVI<br>配置上联trunk<br>配置网关<br>*配置环回口（默认使用VLan1作为控制器地址）</p><p>配置DHCP，指定AC地址<br> dns：解析Aruba-master到AC<br> dhcp option 43：<br> ADP：Aruba Discovry Protocol，二层广播或三层组播239.0.82.11</p><p>创建AP Group<br>将AP加入group<br>在group中创建virtual AP<br>virtual AP关联vlan</p><p>创建SSID profile<br> SSID名称和加密方式<br>创建AAA profile</p><p>待续</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近梳理了一般无线CCNA的支持还有Aruba的无线基本配置&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络" scheme="nbma.info/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>tcp回流经过ASA防火墙问题</title>
    <link href="nbma.info/asa-tcp-traffic-back/"/>
    <id>nbma.info/asa-tcp-traffic-back/</id>
    <published>2018-03-08T13:52:19.000Z</published>
    <updated>2018-03-27T15:18:46.435Z</updated>
    
    <content type="html"><![CDATA[<p>环境R2，R3网关在ASA，R3背后有10.0.0.0网络，ASA路由10.0.0.0/24下一跳是R3<br>问题，R2访问10.0.0.0/24网段时，流量到达ASA，icmp和udp可以通过，tcp会被丢弃</p><a id="more"></a><p><img src="http://i9ps.qiniudn.com/typecho/9170a9ec5f8d58ef9b110f044ab7f288.png" alt="拓扑"></p><p>1，R2的10.1.1.44发起TCP流量访问10.0.0.0网段web server<br>2，ASA收到改流量，发现出站接口是相同的security-level，需要敲下这条命令：<br>    ASA(config)#same-security permit intra-interface<br>3，然后这个SYN包会通过R3路由到达R4，<br>4，Web server返回SYN-ACK，这个包在到达R3之后，将会被直接通过mac地址转发到R2<br>5，R2收到该数据包会直接丢弃，这是因为ASA的“tcp序列号随机化”的默认特性，<br>    当ASA从任意接口收到一个的SYN包时，会将seq随机成另一个数字，记录在状态表中，然后再发出，这是他的一个安全策略。<br>    而在上例中，假定R2初始的SYN包的seq是12345，经过ASA被随机成为56789，R4回报只会确认收到56789，这个包在到达R2之后会被丢弃，因为R2希望确认12345<br>6，为了避免这种内部的异步路由导致的丢包，需要在ASA赦免特定tcp流量的状态化检测，配置如下：<br>    object-group network LOCAL<br>     network-object 10.1.1.0 255.255.255.0<br>    object-group network VPN<br>     network-object 10.0.0.0 255.255.255.0<br>    access-list TCP-BYPASS extended permit ip object-group LOCAL object-group VPN<br>    //抓取需要bypass的明细流量<br>    ASA(config)#class-map TCP-BYPASS<br>    ASA(config-cmap)#match access-list TCP-BYPASS<br>    //创建class-map匹配感兴趣流量<br>    ASA(config-cmap)#policy-map TCP-BYPASS-POLICY<br>    ASA(config-pmap)#class TCP-BYPASS<br>    //创建policy-map,指定class-map<br>    ASA(config-pmap-c)#set connection advanced-options tcp-state-bypass<br>    //开启tcp bypass特性<br>    ASA(config-pmap-c)#service-policy TCP-BYPASS-POLICY interface inside<br>    //针对inside调用</p><p>其他：<br>    如果ping也被ASA检测，那么也需要禁用，否则从10.0.0.0发起的ping是不通的，<br>    其他被ASA检测的协议也是类似</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;环境R2，R3网关在ASA，R3背后有10.0.0.0网络，ASA路由10.0.0.0/24下一跳是R3&lt;br&gt;问题，R2访问10.0.0.0/24网段时，流量到达ASA，icmp和udp可以通过，tcp会被丢弃&lt;/p&gt;
    
    </summary>
    
    
      <category term="网络" scheme="nbma.info/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="asa" scheme="nbma.info/tags/asa/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7部署zabbix3.4</title>
    <link href="nbma.info/Centos7-deploy-zabbix3/"/>
    <id>nbma.info/Centos7-deploy-zabbix3/</id>
    <published>2018-03-05T07:35:06.000Z</published>
    <updated>2018-04-21T09:14:32.579Z</updated>
    
    <content type="html"><![CDATA[<!--markdown-->早该总结一次了，之前都是自己编译，现在用yum直接装，还快。<br><br><br><a id="more"></a><p>Zabbix 3.4 支持Centos 7。貌似不支持6.9.</p><p>更多详细内容请参考官方说明文档，详细的安装要求不贴出来了。</p><p><a href="https://www.zabbix.com/documentation/3.4/zh/manual/installation/requirements" target="_blank" rel="noopener">https://www.zabbix.com/documentation/3.4/zh/manual/installation/requirements</a></p><p>虚拟机配置 双核 8G内存</p><h2 id="01、最小化安装操作系统"><a href="#01、最小化安装操作系统" class="headerlink" title="01、最小化安装操作系统"></a>01、最小化安装操作系统</h2><h2 id="02、升级系统组件到最新版本"><a href="#02、升级系统组件到最新版本" class="headerlink" title="02、升级系统组件到最新版本"></a>02、升级系统组件到最新版本</h2><p><code>sudo yum -y update</code></p><h2 id="03、关闭-SELinux"><a href="#03、关闭-SELinux" class="headerlink" title="03、关闭 SELinux"></a>03、关闭 SELinux</h2><p><code>sudo sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config</code></p><h2 id="04、关闭防火墙"><a href="#04、关闭防火墙" class="headerlink" title="04、关闭防火墙"></a>04、关闭防火墙</h2><p><code>sudo systemctl stop firewalld.service &amp;&amp; systemctl disable firewalld.service</code><br>完成3、4两步，重启一下。</p><h2 id="05、获取SQL源"><a href="#05、获取SQL源" class="headerlink" title="05、获取SQL源"></a>05、获取SQL源</h2><p><code>sudo rpm -Uvh https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</code></p><p>可以从<a href="https://dev.mysql.com/downloads/file/?id=470281" target="_blank" rel="noopener">https://dev.mysql.com/downloads/file/?id=470281</a> 下载</p><p><img src="http://i9ps.qiniudn.com/18-2-24/92166698.jpg" alt=""></p><h2 id="06、安装-Zabbix-所需软件支持包"><a href="#06、安装-Zabbix-所需软件支持包" class="headerlink" title="06、安装 Zabbix 所需软件支持包"></a>06、安装 Zabbix 所需软件支持包</h2><h3 id="先装mysql"><a href="#先装mysql" class="headerlink" title="先装mysql"></a>先装mysql</h3><p><code>sudo yum install mysql-* --skip-broken</code> 有冲突的软件跳过</p><h3 id="安装Apache"><a href="#安装Apache" class="headerlink" title="安装Apache"></a>安装Apache</h3><p><code>sudo yum -y install httpd</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">systemctl start httpd.service #启动</span><br><span class="line"></span><br><span class="line">systemctl stop httpd.service #停止</span><br><span class="line"></span><br><span class="line">systemctl restart httpd.service #重启</span><br><span class="line"></span><br><span class="line">systemctl enable httpd.service #开机启动</span><br><span class="line"></span><br><span class="line">systemctl disable httpd.service #开机不启动</span><br></pre></td></tr></table></figure></p><h3 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h3><p><code>sudo yum install php</code></p><h3 id="安装php扩展"><a href="#安装php扩展" class="headerlink" title="安装php扩展"></a>安装php扩展</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install php-mysqlnd php-gd libjpeg* php-snmp php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-bcmath php-mhash php-common php-ctype php-xml php-xmlreader php-xmlwriter php-session php-mbstring php-gettext php-ldap php-mysqli --skip-broken</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install wget telnet net-tools python-paramiko gcc gcc-c++ dejavu-sans-fonts python-setuptools python-devel sendmail mailx net-snmp net-snmp-devel net-snmp-utils freetype-devel libpng-devel perl unbound libtasn1-devel p11-kit-devel OpenIPMI unixODBC</span><br></pre></td></tr></table></figure><h2 id="07、设置-MySQL-参数（8GB-内存为例）"><a href="#07、设置-MySQL-参数（8GB-内存为例）" class="headerlink" title="07、设置 MySQL 参数（8GB 内存为例）"></a>07、设置 MySQL 参数（8GB 内存为例）</h2><p><span style="color: #ff0000;"><strong>如果你不清楚这些参数的含义，请不要修改，保持默认即可。直接跳过这一节</strong></span><br><del><code>sudo vim /etc/my.cnf</code>  不然没权限保存</del><br><del>在文件最后添加以下内容：</del><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">innodb_file_per_table = 1</span><br><span class="line">innodb_status_file = 1</span><br><span class="line">innodb_buffer_pool_size = 6G</span><br><span class="line">innodb_flush_log_at_trx_commit = 2</span><br><span class="line">innodb_log_buffer_size = 16M</span><br><span class="line">innodb_log_file_size = 64M</span><br><span class="line">innodb_support_xa = 0</span><br><span class="line">default-storage-engine = innodb</span><br><span class="line">bulk_insert_buffer_size = 8M</span><br><span class="line">join_buffer_size = 16M</span><br><span class="line">max_heap_table_size = 32M</span><br><span class="line">tmp_table_size = 32M</span><br><span class="line">max_tmp_tables = 48</span><br><span class="line">read_buffer_size = 32M</span><br><span class="line">read_rnd_buffer_size = 16M</span><br><span class="line">key_buffer_size = 32M</span><br><span class="line">thread_cache_size = 32</span><br><span class="line">innodb_thread_concurrency = 8</span><br><span class="line">innodb_flush_method = O_DIRECT</span><br><span class="line">innodb_rollback_on_timeout = 1</span><br><span class="line">query_cache_size = 16M</span><br><span class="line">query_cache_limit = 16M</span><br><span class="line">collation_server = utf8_bin</span><br><span class="line">character_set_server = utf8</span><br></pre></td></tr></table></figure></p><p><del>注：原则上 innodb_buffer_pool_size 需要设置为主机内存的 80%，如果主机内存不是 8GB，以上参数可依据相应比例进行调整，例如主机内存为 16GB，则 innodb_buffer_pool_size 建议设置为 12GB，innodb_log_buffer_size 建议设置为 32M，innodb_log_file_size 建议设置为 128M，以此类推。请注意innodb_buffer_pool_size的值必须是整数，例如主机内存是4G，那么innodb_buffer_pool_size可以设置为3G，而不能设置为3.2G</del></p><h2 id="08、启动-MySQL"><a href="#08、启动-MySQL" class="headerlink" title="08、启动 MySQL"></a>08、启动 MySQL</h2><p><code>sudo systemctl enable mysqld &amp;&amp; systemctl start mysqld</code></p><h2 id="09、获取-MySQL-的-root-初始密码"><a href="#09、获取-MySQL-的-root-初始密码" class="headerlink" title="09、获取 MySQL 的 root 初始密码"></a>09、获取 MySQL 的 root 初始密码</h2><p><code>grep &#39;temporary password&#39; /var/log/mysqld.log</code></p><p><img src="http://i9ps.qiniudn.com/18-2-24/88945695.jpg" alt=""><br><strong>JtZizq!Rl6E+</strong></p><h2 id="10、进行-MySQL-安全配置"><a href="#10、进行-MySQL-安全配置" class="headerlink" title="10、进行 MySQL 安全配置"></a>10、进行 MySQL 安全配置</h2><p>配置开始时会用到第 09获取的初始密码，建议修改为自定义密码，其它选项选择 y 即可</p><p><code>mysql_secure_installation</code></p><p><img src="http://i9ps.qiniudn.com/18-2-24/71964789.jpg" alt=""><br>密码改为：<strong>Aa123456,.</strong></p><h2 id="11、重启-MySQL"><a href="#11、重启-MySQL" class="headerlink" title="11、重启 MySQL"></a>11、重启 MySQL</h2><p><code>sudo systemctl restart mysqld</code></p><h2 id="12、配置-MySQL-中-zabbix要的库和账号权限"><a href="#12、配置-MySQL-中-zabbix要的库和账号权限" class="headerlink" title="12、配置 MySQL 中 zabbix要的库和账号权限"></a>12、配置 MySQL 中 zabbix要的库和账号权限</h2><p><code>mysql -u root -p</code>（需要输入第 10步中设置的自定义密码）</p><p>mysql&gt;<code>create database zabbix character set utf8;</code> #创建数据库</p><p>mysql&gt;<code>create user zabbix@&#39;%&#39; identified by &#39;Qingdao@2017&#39;;</code> #创建用户和密码</p><p>mysql&gt;<code>grant all privileges on zabbix.* to zabbix@&#39;%&#39;;</code> #赋权</p><p>mysql&gt;<code>flush privileges;</code></p><p>mysql&gt;<code>exit;</code></p><h2 id="13、安装-Zabbix源"><a href="#13、安装-Zabbix源" class="headerlink" title="13、安装 Zabbix源"></a>13、安装 Zabbix源</h2><p><code>sudo rpm -ivh http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpm</code><br>3.4最新版看这里：<br><a href="http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/" target="_blank" rel="noopener">http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/</a></p><h2 id="14、安装zabbix"><a href="#14、安装zabbix" class="headerlink" title="14、安装zabbix"></a>14、安装zabbix</h2><p><code>sudo yum -y install zabbix-server-mysql zabbix-web-mysql zabbix-java-gateway zabbix-web</code></p><h2 id="15、导入-zabbix-所需信息"><a href="#15、导入-zabbix-所需信息" class="headerlink" title="15、导入 zabbix 所需信息"></a>15、导入 zabbix 所需信息</h2><p><code>cd /usr/share/doc/zabbix-server-mysql-3.4.7</code>(<strong>注意版本号</strong>)<br><code>zcat create.sql.gz | mysql -uroot zabbix -p</code>（需要输入第 10 步中设置的自定义密码）</p><h2 id="16、配置-zabbix-参数"><a href="#16、配置-zabbix-参数" class="headerlink" title="16、配置 zabbix 参数"></a>16、配置 zabbix 参数</h2><p><code>sudo vim /etc/zabbix/zabbix_server.conf</code> 这个配置要一遍过<br>主要是以下几个选项参数需要设置（8GB 内存为例）：</p><blockquote><p>DBPassword 配置为第 12 步第 3 行中设置的自定义密码</p></blockquote><p><img src="http://i9ps.qiniudn.com/18-2-24/2085951.jpg" alt=""></p><blockquote><p>CacheSize=512M<br>（CacheSize在371行）</p></blockquote><blockquote><p>HistoryCacheSize=128M<br>（HistoryCacheSize在397行）</p></blockquote><blockquote><p>HistoryIndexCacheSize=128M<br>（HistoryIndexCacheSize在405行）</p></blockquote><blockquote><p>TrendCacheSize=128M<br>（TrendCacheSize在414行）</p></blockquote><blockquote><p>ValueCacheSize=256M<br>（ValueCacheSize在425行）</p></blockquote><blockquote><p>Timeout=30<br>（Timeout在432)<br>其它参数保持默认值即可</p></blockquote><h2 id="17、配置-Apache-中的-PHP-参数（8GB-内存为例）"><a href="#17、配置-Apache-中的-PHP-参数（8GB-内存为例）" class="headerlink" title="17、配置 Apache 中的 PHP 参数（8GB 内存为例）"></a>17、配置 Apache 中的 PHP 参数（8GB 内存为例）</h2><p><code>sudo vim /etc/httpd/conf.d/zabbix.conf</code></p><blockquote><p>php_value max_execution_time 600<br>php_value memory_limit 256M<br>php_value post_max_size 32M<br>php_value upload_max_filesize 32M<br>php_value max_input_time 600<br>php_value always_populate_raw_post_data -1<br>date.timezone 去掉注释符号#，并将值修改为 <code>Asia/Shanghai</code></p></blockquote><h2 id="18、重启系统"><a href="#18、重启系统" class="headerlink" title="18、重启系统"></a>18、重启系统</h2><p><code>systemctl stop mysqld &amp;&amp; reboot</code></p><h2 id="19、启动zabbix"><a href="#19、启动zabbix" class="headerlink" title="19、启动zabbix"></a>19、启动zabbix</h2><p><code>sudo systemctl start httpd &amp;&amp; systemctl start zabbix-server</code></p><h2 id="20、初始化"><a href="#20、初始化" class="headerlink" title="20、初始化"></a>20、初始化</h2><p>在浏览器中输入 <a href="http://zbx监控服务器的IP地址/zabbix，进行" target="_blank" rel="noopener">http://zbx监控服务器的IP地址/zabbix，进行</a> zabbix 的页面初始化配置</p><p>这里如果密码输错，是跳转不到下一步的。密码是前面设置的 Qingdao@2017</p><p><img src="http://i9ps.qiniudn.com/18-2-24/27293764.jpg" alt=""></p><p>默认用户名 admin，默认密码 zabbix，确认可正常登录系统。</p><h2 id="21、设置中文界面"><a href="#21、设置中文界面" class="headerlink" title="21、设置中文界面"></a>21、设置中文界面</h2><p>登录进入系统后，确认 Zabbix server is running 的值是 Yes。<br>然后选择 Administrator –&gt; Users –&gt; Admin</p><p><img src="http://i9ps.qiniudn.com/18-2-24/13138199.jpg" alt=""></p><p>回到”监测中” –&gt; “仪表板”，就可以看到监控系统已设置为中文界面了。</p><h2 id="22、修复图片中文乱码"><a href="#22、修复图片中文乱码" class="headerlink" title="22、修复图片中文乱码"></a>22、修复图片中文乱码</h2><p><img src="http://i9ps.qiniudn.com/18-3-21/66715300.jpg" alt=""></p><p>首先copy本机的中文字体，仿宋、楷体、雅黑均可</p><p><img src="http://i9ps.qiniudn.com/18-2-24/12140303.jpg" alt=""></p><p>将字体名称修改为<code>graphfont.ttf</code><br>备份zabbix原字体，在<em>/usr/share/zabbix/fonts/</em>目录</p><p><img src="http://i9ps.qiniudn.com/18-3-21/93227444.jpg" alt=""></p><p>并将自己修改好的字体上传到该目录，修复权限<br><code>chmod 777 graphfont.ttf</code></p><p><img src="http://i9ps.qiniudn.com/18-3-21/46333241.jpg" alt=""></p><h2 id="23、zabbix-agent安装及配置"><a href="#23、zabbix-agent安装及配置" class="headerlink" title="23、zabbix-agent安装及配置"></a>23、zabbix-agent安装及配置</h2><h3 id="1、安装zabbix-agent"><a href="#1、安装zabbix-agent" class="headerlink" title="1、安装zabbix-agent"></a>1、安装zabbix-agent</h3><p><code>yum install zabbix-agent -y</code></p><h3 id="2、配置zabbix-agent"><a href="#2、配置zabbix-agent" class="headerlink" title="2、配置zabbix-agent"></a>2、配置zabbix-agent</h3><p><code>grep -n &#39;^&#39;[a-Z] /etc/zabbix/zabbix_agentd.conf</code><br>13:PidFile=/var/run/zabbix/zabbix_agentd.pid<br>32:LogFile=/var/log/zabbix/zabbix_agentd.log<br>43:LogFileSize=0<br>97:Server=172.16.8.254<br>138:ServerActive=172.16.8.254<br>149:Hostname=Zabbix server<br>267:Include=/etc/zabbix/zabbix_agentd.d/*.conf</p><h3 id="3、启动zabbix-agent并设置开机启动"><a href="#3、启动zabbix-agent并设置开机启动" class="headerlink" title="3、启动zabbix-agent并设置开机启动"></a>3、启动zabbix-agent并设置开机启动</h3><p><code>systemctl enable zabbix-agent.service</code><br><code>systemctl restart zabbix-agent.service</code></p>]]></content>
    
    <summary type="html">
    
      &lt;!--markdown--&gt;早该总结一次了，之前都是自己编译，现在用yum直接装，还快。&lt;br&gt;&lt;br&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="centos" scheme="nbma.info/tags/centos/"/>
    
      <category term="监控" scheme="nbma.info/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>vim中文入门指南</title>
    <link href="nbma.info/vim-tutor/"/>
    <id>nbma.info/vim-tutor/</id>
    <published>2018-02-26T10:36:06.000Z</published>
    <updated>2018-04-21T09:14:32.593Z</updated>
    
    <content type="html"><![CDATA[<!--markdown-->vimtutor这个很6 啊，mac下还是中文<br><br><br><a id="more"></a><h2 id="第一讲：基础"><a href="#第一讲：基础" class="headerlink" title="第一讲：基础"></a>第一讲：基础</h2><ol><li><p>光标在屏幕文本中的移动既可以用箭头键，也可以使用 hjkl 字母键。</p><pre><code>h (左移)       j (下行)       k (上行)     l (右移)</code></pre></li><li><p>欲进入 Vim 编辑器(从命令行提示符)，请输入：vim 文件名 &lt;回车&gt;</p></li><li><p>欲退出 Vim 编辑器，请输入 <esc>   :q!   &lt;回车&gt; 放弃所有改动。<br>或者输入 <esc>   :wq   &lt;回车&gt; 保存改动。</esc></esc></p></li><li><p>在正常模式下删除光标所在位置的字符，请按： x</p></li><li><p>欲插入或添加文本，请输入：</p><pre><code>i   输入欲插入文本   &lt;ESC&gt;             在光标前插入文本A   输入欲添加文本   &lt;ESC&gt;             在一行后添加文本</code></pre></li></ol><p>特别提示：按下 <esc> 键会带您回到正常模式或者撤消一个不想输入或部分完整<br>的命令。</esc></p><h2 id="第二讲：删除"><a href="#第二讲：删除" class="headerlink" title="第二讲：删除"></a>第二讲：删除</h2><ol><li>欲从当前光标删除至下一个单词，请输入：dw</li><li>欲从当前光标删除至当前行末尾，请输入：d$</li><li><p>欲删除整行，请输入：dd</p></li><li><p>欲重复一个动作，请在它前面加上一个数字：2w</p></li><li><p>在正常模式下修改命令的格式是：<br>operator   [number]   motion<br>其中：</p><p>  operator - 操作符，代表要做的事情，比如 d 代表删除<br>  [number] - 可以附加的数字，代表动作重复的次数<br>  motion   - 动作，代表在所操作的文本上的移动，例如 w 代表单词(word)，$ 代表行末等等。</p></li><li><p>欲移动光标到行首，请按数字0键：0</p></li><li><p>欲撤消以前的操作，请输入：u (小写的u)<br>欲撤消在一行中所做的改动，请输入：U (大写的U)<br>欲撤消以前的撤消命令，恢复以前的操作结果，请输入：CTRL-R</p></li></ol><h2 id="第三讲：置入"><a href="#第三讲：置入" class="headerlink" title="第三讲：置入"></a>第三讲：置入</h2><ol><li><p>要重新置入已经删除的文本内容，请按小写字母 p 键。该操作可以将已删除的文本内容置于光标之后。如果最后一次删除的是一个整行，那么该行将置于当前光标所在行的下一行。</p></li><li><p>要替换光标所在位置的字符，请输入小写的 r 和要替换掉原位置字符的新字符即可。</p></li><li><p>更改类命令允许您改变从当前光标所在位置直到动作指示的位置中间的文本。<br>比如输入 ce 可以替换当前光标到单词的末尾的内容；输入 c$ 可以替换当前光标到行末的内容。</p></li><li><p>更改类命令的格式是：</p><pre><code>c   [number]   motion</code></pre></li></ol><h2 id="第四讲：查找替换"><a href="#第四讲：查找替换" class="headerlink" title="第四讲：查找替换"></a>第四讲：查找替换</h2><ol><li><p>CTRL-G 用于显示当前光标所在位置和文件状态信息。<br>G 用于将光标跳转至文件最后一行。<br>先敲入一个行号然后输入大写 G 则是将光标移动至该行号代表的行。<br>gg 用于将光标跳转至文件第一行。</p></li><li><p>输入 / 然后紧随一个字符串是在当前所编辑的文档中正向查找该字符串。<br>输入 ? 然后紧随一个字符串则是在当前所编辑的文档中反向查找该字符串。<br>完成一次查找之后按 n 键是重复上一次的命令，可在同一方向上查<br>找下一个匹配字符串所在；或者按大写 N 向相反方向查找下一匹配字符串所在。<br>CTRL-O 带您跳转回较旧的位置，CTRL-I 则带您到较新的位置。</p></li><li><p>如果光标当前位置是括号(、)、[、]、{、}，按 % 会将光标移动到配对的括号上。</p></li><li><p>在一行内替换头一个字符串 old 为新的字符串 new，请输入  :s/old/new<br>在一行内替换所有的字符串 old 为新的字符串 new，请输入  :s/old/new/g<br>在两行内替换所有的字符串 old 为新的字符串 new，请输入  :#,#s/old/new/g<br>在文件内替换所有的字符串 old 为新的字符串 new，请输入  :%s/old/new/g<br>进行全文替换时询问用户确认每个替换需添加 c 标志        :%s/old/new/gc</p></li></ol><h2 id="第五讲小结"><a href="#第五讲小结" class="headerlink" title="第五讲小结"></a>第五讲小结</h2><ol><li><p>:!command 用于执行一个外部命令 command。</p><p>请看一些实际例子：</p><pre><code>(MS-DOS)         (Unix) :!dir            :!ls            -  用于显示当前目录的内容。 :!del FILENAME   :!rm FILENAME   -  用于删除名为 FILENAME 的文件。</code></pre></li><li><p>:w FILENAME  可将当前 VIM 中正在编辑的文件保存到名为 FILENAME 的文<br>件中。</p></li><li><p>v motion :w FILENAME 可将当前编辑文件中可视模式下选中的内容保存到文件<br>FILENAME 中。</p></li><li><p>:r FILENAME 可提取磁盘文件 FILENAME 并将其插入到当前文件的光标位置<br>后面。</p></li><li><p>:r !dir 可以读取 dir 命令的输出并将其放置到当前文件的光标位置后面。</p></li></ol><h2 id="第六讲小结"><a href="#第六讲小结" class="headerlink" title="第六讲小结"></a>第六讲小结</h2><ol><li><p>输入小写的 o 可以在光标下方打开新的一行并进入插入模式。<br>输入大写的 O 可以在光标上方打开新的一行。</p></li><li><p>输入小写的 a 可以在光标所在位置之后插入文本。<br>输入大写的 A 可以在光标所在行的行末之后插入文本。</p></li><li><p>e 命令可以使光标移动到单词末尾。</p></li><li><p>操作符 y 复制文本，p 粘贴先前复制的文本。</p></li><li><p>输入大写的 R 将进入替换模式，直至按 <esc> 键回到正常模式。</esc></p></li><li><p>输入 :set xxx 可以设置 xxx 选项。一些有用的选项如下：<br>   ‘ic’ ‘ignorecase’       查找时忽略字母大小写<br>   ‘is’ ‘incsearch’        查找短语时显示部分匹配<br>   ‘hls’ ‘hlsearch’        高亮显示所有的匹配短语<br>   选项名可以用完整版本，也可以用缩略版本。</p></li><li><p>在选项前加上 no 可以关闭选项：  :set noic</p></li></ol><h2 id="第七讲小结"><a href="#第七讲小结" class="headerlink" title="第七讲小结"></a>第七讲小结</h2><ol><li><p>输入 :help 或者按 <f1> 键或 <help> 键可以打开帮助窗口。</help></f1></p></li><li><p>输入 :help cmd 可以找到关于 cmd 命令的帮助。</p></li><li><p>输入 CTRL-W CTRL-W  可以使您在窗口之间跳转。</p></li><li><p>输入 :q 以关闭帮助窗口</p></li><li><p>您可以创建一个 vimrc 启动脚本文件用来保存您偏好的设置。</p></li><li><p>当输入 : 命令时，按 CTRL-D 可以查看可能的补全结果。<br>按 <tab> 可以使用一个补全。</tab></p></li></ol><h2 id="from-V2ex"><a href="#from-V2ex" class="headerlink" title="from V2ex"></a>from V2ex</h2><p>设置显示行号(为了要了方便到某一行) <code>:set number</code><br>移动到行首(第0列) 数字键 <code>0</code><br>移动到行首(第一个非空字符)<code>Shift+6</code><br>移动到行位 <code>$</code> or <code>Shift+4</code><br>向上\下滚动半屏 <code>ctrl+u\d</code><br>向上\下滚动一屏(这个比较实用，记住) <code>ctrl+b\f</code><br>移动到第 x 行 <code>xG</code> or <code>:x</code><br>移动到当前行字符 x 上(向后搜索，继续移动到下一个 x 的命令按,键，上一个 x 的命令是按;键) <code>fx</code><br>移动到当前行字符 x 上(向前搜索，继续移动到下一个 x 的命令按,键，上一个 x 的命令是按;键) <code>Fx</code> </p>]]></content>
    
    <summary type="html">
    
      &lt;!--markdown--&gt;vimtutor这个很6 啊，mac下还是中文&lt;br&gt;&lt;br&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="centos" scheme="nbma.info/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>HTTPS的工作原理</title>
    <link href="nbma.info/https-theory/"/>
    <id>nbma.info/https-theory/</id>
    <published>2018-02-04T07:35:06.000Z</published>
    <updated>2018-04-21T09:14:32.585Z</updated>
    
    <content type="html"><![CDATA[<!--markdown-->HTTPS在传输数据之前需要客户端（浏览器）与服务端（网站）之间进行一次握手，在握手过程中将确立双方加密传输数据的密码信息。<br><br><br><a id="more"></a><p>TLS/SSL协议不仅仅是一套加密传输的协议，更是一件经过艺术家精心设计的艺术品，TLS/SSL中使用了非对称加密，对称加密以及HASH算法。握手过程的具体描述如下：</p><p><img src="https://ws1.sinaimg.cn/mw690/68e0aeafly1fqb56ijgjpj21k00k0aif.jpg" alt=""></p><p><strong>下面对这个4个阶段11个包进行详细分析</strong></p><h2 id="1-Client-Hello报文"><a href="#1-Client-Hello报文" class="headerlink" title="1.Client Hello报文"></a>1.Client Hello报文</h2><p>客户端将产个一个随机数A、并和浏览器能支持的TLS版本号（<code>Extension</code>字段）、以及浏览器能支持的加密方法发送给服务器。 </p><p><img src="https://ws1.sinaimg.cn/mw690/68e0aeafly1fqb6b6dc5pj21j010yb29.jpg" alt=""></p><p>2.Server Hello, Certificate, Server Key Exchange, Server Hello Done</p><blockquote><p>我这边抓包是在服务器上使用tcpdump进行的，server hello的整个过程都在一个数据包中体现。我在查找https相关信息的时候，看到其他网站抓包显示sever hello的四个阶段分对应时四个独立的数据包，原因怀疑是nginx或者apache的特性，有待确认</p></blockquote><p><img src="https://ws1.sinaimg.cn/mw690/68e0aeafly1fqb6u5eujzj20yk0q610f.jpg" alt=""></p><h2 id="2-1-Server-Hello报文"><a href="#2-1-Server-Hello报文" class="headerlink" title="2.1 Server Hello报文"></a>2.1 Server Hello报文</h2><p><code>Server Hello</code>中包含了服务器从<code>client hello</code>中选出一组加密算法与HASH算法，TLS版本，一个服务器新生成的随机数B<br>这里可以看到server hello使用和选定的版本都是<code>TLS1.2</code>，选定的算法是<code>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</code></p><p><img src="https://ws1.sinaimg.cn/mw690/68e0aeafly1fqb7562cgaj21160iy0xw.jpg" alt=""></p><h2 id="2-2-Certificate报文"><a href="#2-2-Certificate报文" class="headerlink" title="2.2 Certificate报文"></a>2.2 Certificate报文</h2><p><code>Certificate</code>部分含有两个数字证书，分别是网站的证书和一个中间证书（又称链证书）</p><blockquote><p>中间证书主要解决安卓在某种情况下无法验证网站证书问题，详情查看文末参考文档<br>网站的数字证书中包含服务器的公钥（公钥的指纹在<code>serialNumber</code>字段）和证书的颁发机构的数字签名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//网站证书：</span><br><span class="line">Certificate: 308204f9308203e1a003020102021203ca27d7faa2474679... (id-at-commonName=nbma.info)</span><br><span class="line">//中间证书：</span><br><span class="line">Certificate: 308204923082037aa00302010202100a0141420000015385... (id-at-commonName=Let&apos;s Encrypt Authority X3,id-at-organizationName=Let&apos;s Encrypt,id-at-countryName=US)</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/mw690/68e0aeafly1fqb9droiesj21bi0tmth5.jpg" alt=""></p><h2 id="2-3-Server-Key-Exchange报文"><a href="#2-3-Server-Key-Exchange报文" class="headerlink" title="2.3 Server Key Exchange报文"></a>2.3 Server Key Exchange报文</h2><p>这部分还没弄明白作用，前面<code>client hello</code>的<code>Extension</code>字段中也有<code>ECDH</code>的参数</p><p><img src="https://ws1.sinaimg.cn/mw690/68e0aeafly1fqb9orcyxaj20x40len39.jpg" alt=""></p><h2 id="2-4-Server-Hello-Done报文"><a href="#2-4-Server-Hello-Done报文" class="headerlink" title="2.4 Server Hello Done报文"></a>2.4 Server Hello Done报文</h2><p>3.Client Key Exchange, Change Cipher Spec, Encrypted Handshake Message</p><p>浏览器获得网站证书之后浏览器要做以下工作：<br>验证证书的合法性（颁发证书的机构是否合法，证书中包含的网站地址是否与正在访问的地址一致等），如果证书受信任，则浏览器栏里面会显示绿色的锁，否则会给出证书不受信的提示。 </p><p><img src="https://ws1.sinaimg.cn/mw690/68e0aeafly1fqbaqv0vxoj20y40lkn2d.jpg" alt=""></p><h2 id="3-1-Client-Key-Exchange报文"><a href="#3-1-Client-Key-Exchange报文" class="headerlink" title="3.1 Client Key Exchange报文"></a>3.1 Client Key Exchange报文</h2><p>如果证书受信任，或者是用户接受了不受信的证书，浏览器会发送一个<code>Client Key Exchange</code>的报文。该报文中包含一个客户端生成的新的随机数C，这个随机数被称为<code>Pre-master key</code>，并用网站证书中提供的公钥对该报文进行加密。</p><h2 id="3-2-Change-Cipher-Spec"><a href="#3-2-Change-Cipher-Spec" class="headerlink" title="3.2 Change Cipher Spec"></a>3.2 Change Cipher Spec</h2><p>该报文提示服务器此后的报文将使用<code>Pre-master key</code>进行加密</p><h2 id="3-3-Encrypted-Handshake-Message"><a href="#3-3-Encrypted-Handshake-Message" class="headerlink" title="3.3 Encrypted Handshake Message"></a>3.3 Encrypted Handshake Message</h2><p>该报文包含连接至今所有报文的校验值，并使用<code>Pre-master key</code>对消息进行加密。 </p><p>4.New Seesion Ticket, Change Cipher Spec, Encrypted Handshake Message<br>网站接收浏览器发来的数据之后要做以下的操作：<br>a) 使用自己的私钥将信息解密取出<code>Pre-master key</code>，使用<code>Pre-master key</code>解密浏览器发来的握手消息，并验证HASH是否与浏览器发来的一致。<br>b) 使用密码加密一段消息，发送给浏览器。 </p><p><img src="https://ws1.sinaimg.cn/mw690/68e0aeafly1fqbarju99sj20zu0mm79s.jpg" alt=""></p><h2 id="4-1-New-Seesion-Ticket"><a href="#4-1-New-Seesion-Ticket" class="headerlink" title="4.1 New Seesion Ticket"></a>4.1 New Seesion Ticket</h2><p>服务器跟据客户端发送的信息，生成一个seesion ticket。如果对话中断，下次重连的时候，只要客户端给出这个编号，且服务器有这个编号的记录，双方就可以重新使用已有的”对话密钥”，而不必重新生成一把。同事也能看到，此ticket有效期为600s</p><blockquote><p>这个session ticket是加密的，只有服务器才能解密，其中包括本次对话的主要信息，比如对话密钥和加密方法。当服务器收到session ticket以后，解密后就不必重新生成对话密钥了。</p></blockquote><h2 id="4-2-Change-Cipher-Spec"><a href="#4-2-Change-Cipher-Spec" class="headerlink" title="4.2 Change Cipher Spec"></a>4.2 Change Cipher Spec</h2><p>同样，提示客户端此后的报文将使用<code>Pre-master key</code>进行加密</p><h2 id="4-3-Encrypted-Handshake-Message"><a href="#4-3-Encrypted-Handshake-Message" class="headerlink" title="4.3 Encrypted Handshake Message"></a>4.3 Encrypted Handshake Message</h2><p>被加密的finish信息</p><h2 id="5-Encrypted-Application-Data"><a href="#5-Encrypted-Application-Data" class="headerlink" title="5.Encrypted Application Data"></a>5.Encrypted Application Data</h2><p>客户端解密并计算握手消息的HASH，如果与服务端发来的HASH一致，此时握手过程结束。<br>  这里浏览器与网站互相发送加密的握手消息并验证，目的是为了保证双方都获得了一致的随机数C。然后双方使用前面的三个随机数A/B/C，生成”对话密钥”（<code>session key</code>又称<code>master key</code>），之后对信息的加密使用<code>master key</code>进行对称加密。</p><p><del>另外，HTTPS一般使用的加密与HASH算法如下：</del></p><pre><code>非对称加密算法：RSA，DSA/DSS 对称加密算法：AES，RC4，3DES HASH算法：MD5，SHA1，SHA256</code></pre><p><strong>参考文档：</strong><br><a href="https://blog.csdn.net/phunxm/article/details/72853376" target="_blank" rel="noopener">HTTPs握手流程抓包解析</a><br><a href="http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html" target="_blank" rel="noopener">图解SSL/TLS协议</a><br><a href="https://www.myssl.cn/home/article-0406-42.html" target="_blank" rel="noopener">中间证书的使用</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!--markdown--&gt;HTTPS在传输数据之前需要客户端（浏览器）与服务端（网站）之间进行一次握手，在握手过程中将确立双方加密传输数据的密码信息。&lt;br&gt;&lt;br&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="网络" scheme="nbma.info/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="https" scheme="nbma.info/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>交换机的堆叠、VSS、IRF、VPC区别</title>
    <link href="nbma.info/switch-redundancy/"/>
    <id>nbma.info/switch-redundancy/</id>
    <published>2018-02-01T07:35:06.000Z</published>
    <updated>2018-03-27T15:18:46.453Z</updated>
    
    <content type="html"><![CDATA[<!--markdown-->偶然想到这个问题，正好总结一下。<br><br><br><a id="more"></a><p>思科的堆叠技术：常见于低端设备，提供简化的本地管理，将一组交换机作为一个对象来管理，堆叠组内设备各自独立。MAC地址表项、ARP表项等不相同。<br>VSS虚拟交换系统：可以将多台交换机组合为单一虚拟交换机，交换组内设备表项相同，统一设备管理。最终简化网络拓扑</p><p>其实将这四种技术称为“二层”“冗余”技术并不准确，因为其使用场景和作用即不相同也不冲突，并且工作范围也不是全都局限于二层，直接分类或者横向对比不是十分准确，这里只是将这几种容易混淆的概念列出，如果疏漏或错误，还请指正。</p><p>传统Port Channel</p><p>交换机端使用LACP或者PAgP协议，服务器端使用NIC teaming技术讲多条链路绑定在一起，STP运行在所有物理链路组成的逻辑链路上。优点是绝大部分交换机都支持这种技术，缺点是所有port channel的组成端口都必须位于同一台交换机上，可能造成单点故障</p><p>StackWise</p><p>Catalyst低端交换上使用的堆叠技术，可以将两台交换机“合并”为一台进行使用和管理，同一prot channel当中的端口可以位于不同物理交换机上。不需要特殊配置，只需要连线即可。只有一个控制层面(control plane)和管理层面（management plane），主要用于接入层端口扩充，同一逻辑单元最多能够接入9台物理交换机</p><p>VSS</p><p>Catalyst 4500和6500上使用的技术，但是对于硬件型号和引擎要求较多，并且只能将两台设备“合并”在一起。此外，VSS不只是二层技术，而是将二层和三层全部“合并”。只有一个控制层面（control plane）和管理层面（management plane）</p><p>vPC</p><p>适用于Nexus交换机，单纯的二层跨机箱冗余技术，不支持VPN或QoS等三层特性。和StackWise和VSS不同的是，配置了vPC的Nexus依然保持各自的控制层面(control plane)和管理层面（management palne），可以用于构建大二层网络。此外还有vitual Port Channel Plus和Enhanced virtual Port Channel，有兴趣可以进一步查阅文档</p><p>总结</p><p>这四种技术的使用场景和支持设备各不相同，应该根据具体需求进行选择</p>]]></content>
    
    <summary type="html">
    
      &lt;!--markdown--&gt;偶然想到这个问题，正好总结一下。&lt;br&gt;&lt;br&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="网络" scheme="nbma.info/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>月全食</title>
    <link href="nbma.info/dog-eat-moon/"/>
    <id>nbma.info/dog-eat-moon/</id>
    <published>2018-01-31T07:35:06.000Z</published>
    <updated>2018-03-27T15:18:46.441Z</updated>
    
    <content type="html"><![CDATA[<!--markdown-->有记忆一来总共看过两次月全食，第一次还是小时候，大约是2000年前后吧<br><br><br><a id="more"></a><p>小时后，家里还是瓦房，有大大的院子和几棵洋槐树，知道要发生月食还是听大人说从新闻报纸上知道的。好像还是一个夏天，搬了小板凳在院子东边没有树荫的月光下仰着头看，早就听大人讲过天狗吃月亮，又好奇，又期待。<br>不过好像最后也没看完整个过程，小时候还是觉得时间过得好慢，后来实在困得不行，大人也要睡了，就去休息了。</p><p>今天应该是第二看到月全食了，在北京，还没下班的时候就突然有点期待，去阳台看了眼，大大的月亮还没开始，努力给它拍了张照片<br><img src="https://wx1.sinaimg.cn/orj360/68e0aeafly1fo01gnls5wj22o03k0q9t.jpg" alt="月全食"></p><p>等到快八点从公司下班出来，月食刚刚开始，一个小时的地铁旅程，几次往车窗外都没看到，将近9点下车之后月亮被吃掉三分之二了，一路匆匆走回住处，路人也都是边走不时抬头看一眼，然后继续匆匆。到家之后又从阳台瞄了一眼，仅剩的月牙开始慢慢变红，直到消失。。。等不了它还原了，也就没看了。</p><p>小时候到底是小时候，大把的时间和对一切的好奇。现在除了匆匆还是匆匆，到家看了一眼之后，又学了一个小时无线视频，然后收拾洗漱，睡不着，还是写点东西吧，毕竟博客又重建了。也该填充点内容了。</p><p>邀明月，让回忆皎洁，爱在月光下完美<br>明天有个人要早起去邵东。</p><p>晚安</p>]]></content>
    
    <summary type="html">
    
      &lt;!--markdown--&gt;有记忆一来总共看过两次月全食，第一次还是小时候，大约是2000年前后吧&lt;br&gt;&lt;br&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>博客又一次重建！！！！(2017总结)</title>
    <link href="nbma.info/hello-world/"/>
    <id>nbma.info/hello-world/</id>
    <published>2018-01-25T07:35:06.000Z</published>
    <updated>2018-03-27T15:18:46.444Z</updated>
    
    <content type="html"><![CDATA[<!--markdown-->上次的博客终结于2106年底，现在是2018 年初，这个博客又复活了。<br><br><a id="more"></a><p>正好，看看一年前的我会什么，一年后，我又学会了什么。</p><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>一年前的我，这个时候应该是刚学完CCIE理论课，正在备考RS lab，偶然间发现乾颐堂服务器上，自动获取所有设备配置的脚本是一段python，也就几十行。每次敲完lab至少节省下来半个多小时，而且不用做重复的工作。<br>直到3月份，第一次考完lab，正好也有时间，就从这段代码开始，敲开了学习python的大门。<br>这就是这半年，才知道了devops的威力，希望自己入局的还不算晚。</p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>17年初的时候，我给自己定了8个小目标：</p><blockquote><p>我的2017<br>1.3月之前完成CCIE考试。<br>2.备考CCIE的同时学习python，跟宝贝一起在GitHub打卡。<br>3.尝试学会围棋。<br>4.找一份稳定的工作，攒下超过8万块钱。<br>5.熟练使用英语口语，最好能找到固定交流的人一起学<br>6.看看北京的博物馆<br>7.跟宝贝学会乒乓球<br>8.跟宝贝一起一次旅行，看海</p></blockquote><h3 id="1，考IE"><a href="#1，考IE" class="headerlink" title="1，考IE"></a>1，考IE</h3><p>虽然CCIE证书现在的含金量确实不高了，但是反而似乎慢慢变成了行业的基本要求。<br>从2016年6月份考试培训到2017年4月10号第一次lab失败，休息了几个月，再到8月17号终于拿号；</p><h3 id="2，Coding"><a href="#2，Coding" class="headerlink" title="2，Coding"></a>2，Coding</h3><p>大学的时候,第一门是C语言，后来C++、Java、C#、VB、易语言、JSP、ASP.NET、html、xml全都学了一遍，全都无爱。<br>反而像python、json、php这些大学没学过都成了我现在的自学并且能坚持下来的兴趣点。不知道是大学老师的讲解真的让人提不起兴趣还是我自己悟性不行。</p><h3 id="3，围棋"><a href="#3，围棋" class="headerlink" title="3，围棋"></a>3，围棋</h3><p>最早的兴趣起源于一部网剧《毛骗》，邵半仙装逼的时候它是围棋，冬冬玩的时候就是五子棋:)<br>之所以在去年定下这个目标，还是因为AlphaGo那段时间的热点，人工智能是大势所趋，围棋应该是这些AI的第一站，<br>学围棋没什么特别伟大的想法，就是想在别人讨论的时候插上话。<br>但是不知道为什么，我定下这个目标后。。。。。。就忘了！</p><h3 id="4，工作"><a href="#4，工作" class="headerlink" title="4，工作"></a>4，工作</h3><p>这一年，从待了两年的公司离职，从一家小互联网公司跳到另一家相对大一些公司公司，从研发运维部的netdevops变成了IT部的网络监控运维工程师；网络规模上来了，工作内容却退回了传统网络，一个5人的网络团队，就我一个人懂点自动化的东西，有点挑战……</p><h3 id="5，英语"><a href="#5，英语" class="headerlink" title="5，英语"></a>5，英语</h3><p>这两年英语的提升更多的还是读写吧，中文的网络知识已经满足不要日常自学和查资料的需求，考CCIE的过程也是。<br>至于听说，至今也没找到固定交流学习的伙伴……</p><h3 id="6，博物馆"><a href="#6，博物馆" class="headerlink" title="6，博物馆"></a>6，博物馆</h3><p>之前在微博上看到了北京有40十多个大大小小的博物馆，我还立了flag，要多长时间去看一座。<br>目前进度，17年1月1日跟爸妈哥嫂子一起去了国博，17年11月跟宝贝一起去又去了国博，完……</p><h3 id="7，乒乓球"><a href="#7，乒乓球" class="headerlink" title="7，乒乓球"></a>7，乒乓球</h3><p>在北京站附近学过一次，被某人骂惨了。从此坐板凳……</p><h3 id="8，旅行"><a href="#8，旅行" class="headerlink" title="8，旅行"></a>8，旅行</h3><p>五一去过一次天津，更难忘的是回程的那个电话。诶……<br>期待今年能看海</p><p>2017就这么过完了，写这篇文章的时候，就连2018也过完了7%<br>从考IE开始，到后来学python，再到后来面试找工作，这一年最大的感受就是，学不够，time is not enough，要学的太多；第二个感叹就是，大学四年大把的时间我都干了什么。。。</p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>写完2017，说说2018 吧：<br>因为年底的面试，也暴露自己什么问题，所以，新年的第一个计划就是提升自己：<br>总结了美团、联想、陌陌、便利蜂公司的招聘需求，基本上也覆盖所有的网络知识点，试试今年能总结出来多少：</p><h3 id="二层"><a href="#二层" class="headerlink" title="二层:"></a>二层:</h3><p>STP/RSTP/MSTP<br>802.1X<br>链路聚合</p><h3 id="三层"><a href="#三层" class="headerlink" title="三层:"></a>三层:</h3><p>静态路由<br>PBR<br>ECMP<br>OSPF<br>ISIS<br>BGP</p><h3 id="VPN"><a href="#VPN" class="headerlink" title="VPN:"></a>VPN:</h3><p>PPTP<br>L2TP<br>GRE<br>SSL VPN<br>IPSec VPN</p><h3 id="ip-Service"><a href="#ip-Service" class="headerlink" title="ip Service:"></a>ip Service:</h3><p>QoS<br>HSRP/VRRP<br>NQA<br>BFD<br>dhcp、snooping、arp检测</p><h3 id="网络监控"><a href="#网络监控" class="headerlink" title="网络监控:"></a>网络监控:</h3><p>snmp<br>netflow<br>Zabbix</p><h3 id="无线："><a href="#无线：" class="headerlink" title="无线："></a>无线：</h3><p>802.11a/b/g/n/ac wava2协议<br>802.11原理和调优<br>EAP/PEAP/TSL认证原理<br>EAP+TSL企业级wifi证书部署原理<br>mac认证/portal认证/802.1X认证<br>radius</p><h3 id="传输："><a href="#传输：" class="headerlink" title="传输："></a>传输：</h3><p>SDH<br>MSTP<br>PTN<br>OTN<br>WDM</p><h3 id="售前："><a href="#售前：" class="headerlink" title="售前："></a>售前：</h3><p>企业级多协议多出口多业务设计规划部署<br>负载均衡<br>出口自动切换<br>流量调度</p><h3 id="光："><a href="#光：" class="headerlink" title="光："></a>光：</h3><p>单模多模<br>波分传输，线路开通</p><h3 id="DC："><a href="#DC：" class="headerlink" title="DC："></a>DC：</h3><p>leaf-spine架构<br>Vxlan<br>SDN<br>NFV</p><h3 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h3><p>RouterOS<br>F5/A10等LB<br>Ansible<br>DNS服务器<br>IPv6<br>了解厂商特点，对标产品</p><p>待续</p>]]></content>
    
    <summary type="html">
    
      &lt;!--markdown--&gt;上次的博客终结于2106年底，现在是2018 年初，这个博客又复活了。&lt;br&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ping交换机的SVI地址出现延迟并且很不稳定</title>
    <link href="nbma.info/ping-switch-svi-delay/"/>
    <id>nbma.info/ping-switch-svi-delay/</id>
    <published>2016-12-19T07:51:07.000Z</published>
    <updated>2018-03-27T15:18:46.451Z</updated>
    
    <content type="html"><![CDATA[<p>在交换机的vlan 1起一个地址，PC接到交换机，给PC设置一个vlan 1段的地址，然后在PC上ping vlan 1的地址会出现延迟，原本没考虑过这个问题，一直觉得应该小于1ms，但是真机上就是会这样。</p><a id="more"></a><p>首先一个问题，我们为什么要“-t”的ping 3750？因为本质上来说：<br>1、交换机是转发设备而不是终端设备，业务数据不会进到3750的CPU。<br>2、ping 包（icmp）的destination如果是3750本地的话，icmp包需要进到3750的CPU处理并产生icmp reply以回应icmp source。</p><p>所以，如果没有特殊需求，可以忽略这种延时。因为，ping 3750无非只是连通性测试而非转发性能测试。（转发性能测试需要其他方式测试）<br>而且，从结果来看，平均延时只有2ms，其实延时也不是很高。</p><p>总之，<br>1、 icmp包的destination如果是交换机，那么一定会由CPU处理并相应，所以，延时一定和cpu利用率有关。如果是丢包的话，还会和CoPP相关。<br>2、 这种测试本身没有任何实质意义。</p><p>&nbsp;</p><p>icmp的echo是低优先级的数据包，系统需要在处理高优先级的进程和流量之后进行对ping的应答，另外正如楼上专家所说，穿越数据转发和ping 交换机本身是有区别的，结果没有意义。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在交换机的vlan 1起一个地址，PC接到交换机，给PC设置一个vlan 1段的地址，然后在PC上ping vlan 1的地址会出现延迟，原本没考虑过这个问题，一直觉得应该小于1ms，但是真机上就是会这样。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>QoS中在MQC下bandwidth和police的区别</title>
    <link href="nbma.info/qos-mqc-bandwidth-police/"/>
    <id>nbma.info/qos-mqc-bandwidth-police/</id>
    <published>2016-12-19T06:24:14.000Z</published>
    <updated>2018-03-27T15:18:46.452Z</updated>
    
    <content type="html"><![CDATA[<p>policy和shape是限速的；bandwindth和priority是queueing调度的。bandwindth不是限速用的。</p><a id="more"></a><p>对于bandwindth的解释请参考下面链接：</p><p><a href="http://www.cisco.com/c/en/us/td/docs/ios/12_2/qos/configuration/guide/fqos_c/qcfconmg.html" target="_blank" rel="noopener">http://www.cisco.com/c/en/us/td/docs/ios/12_2/qos/configuration/guide/fqos_c/qcfconmg.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;policy和shape是限速的；bandwindth和priority是queueing调度的。bandwindth不是限速用的。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
