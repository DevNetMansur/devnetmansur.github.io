{"meta":{"title":"NBMA","subtitle":"学习 记录 分享","description":"重建了很多次的blog","author":"Mansur","url":"nbma.info"},"pages":[{"title":"2018-target","date":"un66fin66","updated":"un66fin66","comments":true,"path":"2018-target/index.html","permalink":"nbma.info/2018-target/index.html","excerpt":"","text":"二层:STP/RSTP/MSTP802.1X链路聚合 三层:静态路由PBRECMPOSPFISISBGP VPN:PPTPL2TPGRESSL VPNIPSec VPN ip Service:QoSHSRP/VRRPNQABFDdhcp、snooping、arp检测 网络监控:snmpnetflowZabbix+Grafana 无线：802.11a/b/g/n/ac wava2协议802.11原理和调优EAP/PEAP/TSL认证原理EAP+TSL企业级wifi证书部署原理mac认证/portal认证/802.1X认证radius 传输：SDHMSTPPTNOTNWDM 售前：企业级多协议多出口多业务设计规划部署负载均衡出口自动切换流量调度 光：单模多模波分传输，线路开通 DC：leaf-spine架构VxlanSDNNFV 其他：RouterOSF5/A10等LBAnsibleDNS服务器IPv6了解厂商特点，对标产品 协议：httpstcp"},{"title":"tags","date":"un66fin66","updated":"un66fin66","comments":true,"path":"tags/index.html","permalink":"nbma.info/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"ipsec协商过程分析","slug":"ipsec-theory","date":"un66fin66","updated":"un00fin00","comments":true,"path":"ipsec-theory/","link":"","permalink":"nbma.info/ipsec-theory/","excerpt":"ipsec vpn，刚学完的时候以为自己掌握的还挺好的，各种排错无压力。去年到电信面试，连基本过程都说不清楚了，就记得是非对称加密协商对称加密的算法和密钥。说了一句跟HTTPS原理差不多……欸。趁着周末闲了赶紧再补补。","text":"ipsec vpn，刚学完的时候以为自己掌握的还挺好的，各种排错无压力。去年到电信面试，连基本过程都说不清楚了，就记得是非对称加密协商对称加密的算法和密钥。说了一句跟HTTPS原理差不多……欸。趁着周末闲了赶紧再补补。 ipsec协商总共9个包，在没有nat穿越的情况下，这9个包的源目端口都是UDP 500，使用isakmp封装。9个包之后加密ESP封装。 协商过程 第一阶段第1-2包A发送自己的sa(ipsec组成部分以及协商对预共享密钥的加密策略），B发送自己的sa 第一阶段第3-4包交互DH。这个阶段用于生成非对称加密算法（由1-2阶段协商）的三对密钥 第一阶段第5-6包使用3-4形成的第一把密钥，加密内容是预共享密钥，用于验证双方身份 第二阶段第1-2包使用第二把密钥，协商对数据（感兴趣流）的加密策略 第二阶段第3个包确认，形成SPI代表控制层结束最终，对感兴趣流使用第三把密钥对数据进行加密，使用第二阶段1-2协商的加密策略 数据包结构esp的加密位置1、传输模式：通讯点和加密点一致 这种模式下ESP报头在ip 头部之内，对四层以内的报头和数据进行加密 2、隧道模式：通讯点和加密点不一致 ESP直接将原来三层以内的报文全部加密，重新生成新的ip头部 这两种模式相比，transform模式数据比原数据包只多了一个esp头部，包长度有优势，传输效率高；tunnel模式在处理数据的时候不要拆开IP头部，直接加密，更快。 这部分由于ESP之后的部分全是加密的，所以只能通过数据包大小来对比，需要真机实现，等有机会了再做，模拟器只能为transport，设置tunnel无效 GRE头部的位置我是按照这个拓扑做的测试对比，主要看包接口和后续ESP数据包的大小从思科设备发起的ping默认大小是14+28+72=114Bytes.GRE头部大小是24Bytes 基于感兴趣流的IPSEC 思科的SVTI技术tunnel模式设置为tunnel mode ipsec ipv4，其他配置和GRE over IPSec完全一样 GRE over IPSec 思科的IPSec over GRE至于为什么会有这个，我看能百度搜到的华为设备全是按照这种方式配置的，蛋疼。 华为的IPSec over GRE待验证 思科的SVTI技术确实厉害~","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"nbma.info/tags/网络/"},{"name":"cisco","slug":"cisco","permalink":"nbma.info/tags/cisco/"},{"name":"ipsec","slug":"ipsec","permalink":"nbma.info/tags/ipsec/"}]},{"title":"在nginx部署https","slug":"nginx-deploy-https","date":"un11fin11","updated":"un66fin66","comments":true,"path":"nginx-deploy-https/","link":"","permalink":"nbma.info/nginx-deploy-https/","excerpt":"上周看nginx视频，中间看到https的部署，发现了很多自己一直以来都能接触到，但是完全不了解的专业名词。于是暂停视频，花了三天的时间，吧https相关的协议原理和证书类型都了解一下。","text":"上周看nginx视频，中间看到https的部署，发现了很多自己一直以来都能接触到，但是完全不了解的专业名词。于是暂停视频，花了三天的时间，吧https相关的协议原理和证书类型都了解一下。周末重写了https的工作原理，今天快下班没事，吧https部署写一下。之后就要开始撸ansible了。 证书类型目前主流的SSL证书主要分为DV SSL 、 OV SSL 、EV SSL。 数字证书 DV SSL OV SSL EV SSL 用户建议 个人 组织、企业 大型企业、金融机构 公信等级 一般 高 强 认证强度 网站真实性 组织及企业真实性 严格认证 安全性 一般 中 高 可信度 常规 中 高（地址栏绿色） 要购买或者签发SSL证书，需要先在本地生成CSR，其中包含域名、所有人、位置等，然后根据CSR签发对应的证书。 自签证书CentOS系统已经安装了openssl，可以用来生成自签证书，但是这种证书由于其CA不在主机的受信任列表，只能用来做加密，无法提供任何验证，而且需要在浏览器中手动确认。 123456#生成私钥 openssl genrsa -idea -out mansur.key 1024#生成证书申请请求CSR openssl req -new -key mansur.key -out mansur.csr#使用私钥签发证书 openssl x509 -req -days 3650 -in mansur.csr -signkey mansur.key -out mansur.crt 12#直接生成符合苹果ATS规范的证书和对应私钥 openssl req -days 3650 -x509 -sha256 -nodes -newkey rsa:2048 -keyout mansur.key -out mansur_apple.crt 示例：12345678910111213141516171819202122232425[root@CentOS7-copy tmp]# openssl req -days 3650 -x509 -sha256 -nodes -newkey rsa:2048 -keyout mansur.key -out mansur_apple.crtGenerating a 2048 bit RSA private key....+++.........................................................................................................................+++writing new private key to &apos;mansur.key&apos;-----You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter &apos;.&apos;, the field will be left blank.-----Country Name (2 letter code) [XX]:CNState or Province Name (full name) []:BeijingLocality Name (eg, city) [Default City]:ChaoyangOrganization Name (eg, company) [Default Company Ltd]:NBMABLOGOrganizational Unit Name (eg, section) []:NetCommon Name (eg, your name or your server&apos;s hostname) []:nbma.infoEmail Address []:i@nbma.info[root@CentOS7-copy tmp]# ll总用量 12-rw-r--r-- 1 root root 1391 4月 17 10:14 mansur_apple.crt-rw-r--r-- 1 root root 1704 4月 17 10:14 mansur.key Let’s encrypt免费证书Let&#39;s encrypt可以签发免费的DV证书，常用于个人网站，但是其证书有效期只有三个月，需要手动续租。具体怎么签发，还有待研究，github上有很多脚本可以实现。签发完成后会得到四个文件 cert.pem #网站证书chain.pem #链证书fullchain.pem #网站证书+链证书privkey.pem #私钥 nginx配置不想写注释了，就这么看吧。123456789101112131415161718192021222324252627282930server&#123; listen 80; listen 443 ssl http2; server_name nbma.info; index index.php index.html index.htm default.php default.htm default.html; root /www/wwwroot/nbma.info; #SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则 #error_page 404/404.html; #HTTP_TO_HTTPS_START if ($server_port !~ 443)&#123; rewrite ^(/.*)$ https://$host$1 permanent; &#125; #HTTP_TO_HTTPS_END ssl_certificate fullchain.pem; ssl_certificate_key privkey.pem; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on; ssl_session_cache shared:SSL:10m; ssl_session_timeout 10m; error_page 497 https://$host$request_uri; #SSL-END #.....&#125; 证书另外，做完上面这些发现有个问题，这些证书有的是.key格式，还有crt、pem等，专门查了一下，其实在unix中证书的这几个扩展名无所谓。他不过是一串字符串。但是，对于证书而言，他有两种不同的编码格式需要注意；首先所有的证书都是满足X.509标准的，这个标准定义了证书中应该包含哪些内容，具体需要查看RFC5280在这个标准之下，不同的操作系统或者中间件常用的编码方式也不一样： PEM - Privacy Enhanced Mail,打开看文本格式,以”—–BEGIN…”开头, “—–END…”结尾,内容是BASE64编码.查看PEM格式证书的信息:openssl x509 -in certificate.pem -text -nooutApache和Linux服务器偏向于使用这种编码格式。 DER - Distinguished Encoding Rules,打开看是二进制格式,不可读.查看DER格式证书的信息:openssl x509 -in certificate.der -text -noout -inform derJava和Windows服务器偏向于使用这种编码格式. 更多有关证书的说明，请查阅参考文档：那些证书相关的玩意儿(SSL,X.509,PEM,DER,CRT,CER,KEY,CSR,P12等)","categories":[],"tags":[{"name":"centos","slug":"centos","permalink":"nbma.info/tags/centos/"},{"name":"https","slug":"https","permalink":"nbma.info/tags/https/"}]},{"title":"802.1X认证过程(翻译)","slug":"8021X-auth-progression","date":"un22fin22","updated":"un66fin66","comments":true,"path":"8021X-auth-progression/","link":"","permalink":"nbma.info/8021X-auth-progression/","excerpt":"1、初始化当交换机检测到有新的请求者时，端口被启用，切状态是未授权。这种状态下，只允许802.1X的流量，其他流量（如TCP/UDP）将被丢弃。","text":"1、初始化当交换机检测到有新的请求者时，端口被启用，切状态是未授权。这种状态下，只允许802.1X的流量，其他流量（如TCP/UDP）将被丢弃。 2、启动为了启动认证，交换机将周期性的发送EAP-Request Identity帧到本地LAN中的特殊mac地址01:80:C2:00:00:03。请求者将侦听这个地址，并且在收到EAP-Request Identity时，使用包含请求者标识符（如用户ID）的EAP-Response Identity帧进行响应。交换机左右认证者，将此身份响应封装到Radius Access-Request数据包中，并转发到认证服务器。另外，请求者也可以通过向认证者发送EAPOL-Start帧来启动或重新启动认证，认证者使用EAP-Request Identity进行回复。 3、EAP协商身份认证服务器给交换机发送一个RADIUS Access-Challenge的回复报文，报文中包含了一个EAP Request，指定了EAP方法（认证服务器希望请求者使用的基于EAP的认证类型）。认证者将这个EAP Request封装到EAPOL帧中，转发给请求者。此时，请求者可以开始使用这个请求的EAP方法，或者执行NAK否认消息并响应一个自己希望执行的EAP方法。 4、认证如果请求和认证服务器同意之前的EAP方法，那么他们将会发送EAP Request和Responses给对方，通过认证者转发，直到认证服务器响应一个封装在RADIUS Access-Accept报文中的EAP-Success，或者封装在RADIUS Access-Reject报文中的EAP-Failure。如果认证成功，那么交换机端口将变为”授权”状态，允许所有正常流量。如果认证失败，交换机端口保持”未授权”状态。当申请者注销的时候，它会发送一个EAPOL-logoff信息给认证者，认证者改变端口状态到”未授权”，并阻止非EAP流量通过 原文：https://en.wikipedia.org/wiki/IEEE_802.1X","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"nbma.info/tags/网络/"}]},{"title":"SSLVPN基于安全组（角色）下发不同路由","slug":"cisco-asa-ssl-vpn-policy-base-security-group","date":"un11fin11","updated":"un66fin66","comments":true,"path":"cisco-asa-ssl-vpn-policy-base-security-group/","link":"","permalink":"nbma.info/cisco-asa-ssl-vpn-policy-base-security-group/","excerpt":"之前已经说过了ssl VPN的基本配置，再此基础上，实现不同角色的用户使用不同的策略。","text":"之前已经说过了ssl VPN的基本配置，再此基础上，实现不同角色的用户使用不同的策略。 针对radius段角色为SSLVPN-DBA的用户 关闭客户端的tunnel group list显示不关闭的话，所有策略将以下拉菜单列表的方式展现在在anyconnect端，且用户可自由选择12ciscoasa(config)# webvpn ciscoasa(config-webvpn)# no tunnel-group-list enable 针对SSLVPN-DBA角色配置策略下发路由列表TECH-SPL1access-list TECH-SPL extended permit ip 172.17.0.0 255.255.0.0 any 配置group-policy，关联需要下发的路由TECH-SPL、访问控制SSL-ACL、地址池SSL-POOL12345678910111213141516group-policy SSLVPN-DBA internalgroup-policy SSLVPN-DBA attributes dns-server value 192.168.115.11 192.168.115.12 vpn-simultaneous-logins 30 vpn-idle-timeout 120 vpn-filter value SSL-ACL vpn-tunnel-protocol ssl-client split-tunnel-policy tunnelspecified split-tunnel-network-list value TECH-SPL address-pools value SSL-POOL webvpn anyconnect ssl dtls enable anyconnect mtu 1200 anyconnect keep-installer installed anyconnect dtls compression lzs anyconnect ask none default anyconnect 配置tunnel-group，关联认证radius服务器SSL和group策略SSLVPN-DBA1234567tunnel-group SSLVPN-DBA type remote-accesstunnel-group SSLVPN-DBA general-attributes default-group-policy SSLVPN-DBA authentication-server-group SSL accounting-server-group SSLtunnel-group SSLVPN-DBA webvpn-attributes group-alias SSLVPN-DBA enable 此时输入该角色的用户在拨入时将获得与default不通的权限。 参考文档:Cisco ASA - Group-policy assignment based on OU","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"nbma.info/tags/网络/"},{"name":"asa","slug":"asa","permalink":"nbma.info/tags/asa/"},{"name":"SSLVPN","slug":"SSLVPN","permalink":"nbma.info/tags/SSLVPN/"},{"name":"cisco","slug":"cisco","permalink":"nbma.info/tags/cisco/"}]},{"title":"思科ASA配置SSLVPN","slug":"cisco-asa-ssl-vpn-configure","date":"un11fin11","updated":"un66fin66","comments":true,"path":"cisco-asa-ssl-vpn-configure/","link":"","permalink":"nbma.info/cisco-asa-ssl-vpn-configure/","excerpt":"在ASA配置SSL VPN过程如下，","text":"在ASA配置SSL VPN过程如下，接口和默认路由 略 创建地址池SSL-POOL1ip local pool SSL-POOL 172.17.44.2-172.17.47.254 mask 255.255.252.0 配置区域策略12same-security-traffic permit inter-interfacesame-security-traffic permit intra-interface 定义下发路由SSL-SPL123456access-list SSL-SPL extended permit ip 172.17.0.0 255.255.0.0 any access-list SSL-SPL extended permit ip 10.0.0.0 255.255.0.0 any access-list SSL-SPL extended permit ip 10.201.0.0 255.255.0.0 any access-list SSL-SPL extended permit ip 192.168.96.0 255.255.224.0 any access-list SSL-SPL extended permit ip 10.101.0.0 255.255.0.0 any access-list SSL-SPL extended permit ip 10.12.0.0 255.255.0.0 any 定义ACL策略SSL-ACL1access-list SSL-ACL extended permit ip any any 定义认证服务器SSL12345aaa-server SSL protocol radiusaaa-server SSL (inside) host 172.17.40.41 key XXXXXXXX authentication-port 1812 accounting-port 1813 允许inside管理1management-access inside 指定anyconnect客户端12345678910webvpn enable inside anyconnect image disk0:/anyconnect-win-4.4.03034-webdeploy-k9.pkg 1 anyconnect image disk0:/anyconnect-macos-4.4.04030-webdeploy-k9.pkg 2 anyconnect image disk0:/anyconnect-linux64-4.4.04030-webdeploy-k9.pkg 3 anyconnect enable tunnel-group-list enable cache disable error-recovery disable 配置group策略SSL-POLICY，关联需要下发的路由SSL-SPL、访问控制SSL-ACL、地址池SSL-POOL12345678910111213141516group-policy SSL-POLICY internalgroup-policy SSL-POLICY attributes dns-server value 192.168.115.11 192.168.115.12 vpn-simultaneous-logins 30 vpn-idle-timeout 120 vpn-filter value SSL-ACL vpn-tunnel-protocol ssl-client split-tunnel-policy tunnelspecified split-tunnel-network-list value SSL-SPL address-pools value SSL-POOL webvpn anyconnect ssl dtls enable anyconnect mtu 1200 anyconnect keep-installer installed anyconnect dtls compression lzs anyconnect ask none default anyconnect 默认tunnel-group关联策略，关联认证radius服务器SSL和group策略SSL-POLICY1234tunnel-group DefaultWEBVPNGroup general-attributes authentication-server-group SSL accounting-server-group SSL default-group-policy SSL-POLICY","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"nbma.info/tags/网络/"},{"name":"asa","slug":"asa","permalink":"nbma.info/tags/asa/"},{"name":"SSLVPN","slug":"SSLVPN","permalink":"nbma.info/tags/SSLVPN/"},{"name":"cisco","slug":"cisco","permalink":"nbma.info/tags/cisco/"}]},{"title":"cisco路由器nat回流解决办法--NVI","slug":"cisco-nat-nvi-back","date":"un66fin66","updated":"un66fin66","comments":true,"path":"cisco-nat-nvi-back/","link":"","permalink":"nbma.info/cisco-nat-nvi-back/","excerpt":"困扰已久的路由器映射的回流问题终于解决了。","text":"困扰已久的路由器映射的回流问题终于解决了。 回流，简单的说就是内网终端通过映射后的公网地址访问内网服务。通常配置的inside-outside模式的nat是无法实现回流的， Cisco的domainless NATDomainless就是说不再区分inside和outside，只是单纯地做NAT，用一个叫做NAT Virtual Interface的虚拟接口来实现，这样有什么好处呢？说实话，从界面上看不出来，但是从其实现角度，就可以通过路由的方式将带有ip nat enable配置的接口进来的包全部导入这个虚拟接口NVI0中。然后用数据包的源地址和目标地址分别查询SNAT表和DNAT表，根据结果进行NAT操作，随后进入真正的路由查询。 不管方向，不管路由，只要数据包进入了一块带有ip nat enable配置的物理网卡，就会进行NAT匹配以及匹配成功后的操作，不管是SNAT和DNAT都在这里进行。这个实现虽然很豪放，但是却解决了所有问题。 数据包在进入真正的路由查询前，NAT就已经完成了，在路由器看来，NAT操作被藏起来了，就好像数据包本来就是那个样子一样。当然Domainless的NAT也不再和任何其它操作关联，ACL，VPN感兴趣流匹配，policy routing等都和NAT无关。 如以上拓扑，将R3的80端口映射到外网，那么R2将无法使用公网地址访问R3该方式的传统的端口映射为：1234567ip nat inside source static tcp 10.1.12.2 80 61.128.1.1 8000ip nat inside source static tcp 10.1.12.2 80 61.128.1.3 80ip nat inside source list NAT interface e0/0 overloadinterface e0/0ip nat outsideinterface e0/1ip nat inside 更改为NVI NAT：1234567ip nat source static tcp 10.1.12.2 80 61.128.1.1 8000ip nat source static tcp 10.1.12.2 80 61.128.1.3 80ip nat source list NAT interface e0/0 overloadinterface e0/0ip nat enableinterface e0/1ip nat enable 更改为NVI NAT可能内网还是无法通过公网地址访问内网服务器，此时有个重要的一点是要关闭端口的重定向功能：1234interface e0/0no ip redirectsinterface e0/1no ip redirects 这样配置即可完成，检查状态命令为：show ip nat nvi translations1234sh ip nat nvi translations Pro Source global Source local Destin local Destin globaltcp 61.128.1.1:28909 10.1.11.2:28909 61.128.1.3:80 10.1.12.2:80tcp 61.128.1.1:8000 10.1.12.2:80 --- --- 访问测试OK。同时也能看到，现在内部终端R2通过公网地址访问R3的时候，源地址也被nat为出口路由器的公网地址。","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"nbma.info/tags/网络/"},{"name":"cisco","slug":"cisco","permalink":"nbma.info/tags/cisco/"},{"name":"nat","slug":"nat","permalink":"nbma.info/tags/nat/"}]},{"title":"grafana添加zabbix源和prometheus源","slug":"grafana-zabbix-prometheus","date":"un11fin11","updated":"un22fin22","comments":true,"path":"grafana-zabbix-prometheus/","link":"","permalink":"nbma.info/grafana-zabbix-prometheus/","excerpt":"grafana是用于可视化大型测量数据的开源程序，他提供了强大和优雅的方式去创建、共享、浏览数据。dashboard中显示了你不同metric数据源中的数据。","text":"grafana是用于可视化大型测量数据的开源程序，他提供了强大和优雅的方式去创建、共享、浏览数据。dashboard中显示了你不同metric数据源中的数据。 安装grafana(官方download](https://grafana.com/grafana/download)12345wget https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana-5.0.3-1.x86_64.rpm sudo yum localinstall grafana-5.0.3-1.x86_64.rpm systemctl start grafana-serversystemctl enable grafana-server 安装完成后访问Dashboard:http://本机IP:3000默认用户名密码都是admin 安装最新zabbix插件grafana-cli plugins install alexanderzobnin-zabbix-app 完成后在grafan Dashboard添加数据源：1234type: zabbix apphttp url: http://zbx_IP/zabbix/api_jsonrpc.phpUsername: AdminPassword: ****** Save &amp; Test保存 在Dashboards页面导入自带的zabbix Status模板 添加prometheus数据源添加数据源：1234Name:PrometheusType:PrometheusUrl:http://prometheus_ip:9090/Access:proxy 在Dashboards页面导入自带的Prometheus Status模板和Grafana模板 目前grafana status模板是完全没有数据的，需要先添加监控在prometheus.yml中添加如下内容12345- job_name: &apos;grafana&apos; static_configs: - targets: [&apos;**GRAFANA_IP**:9100&apos;] labels: instance: grafana 重启prometheussystemctl restart prometheus 在查看应该会获取到grafana server的一些数据。 另外grafana官方也有一些模板可以参考，在garfana dashboard中import Dashboard输入编号405，即https://grafana.com/dashboards/405导入即可。 有关zabbix和prometheus安装，参考：zabbix安装Prometheus安装","categories":[],"tags":[{"name":"监控","slug":"监控","permalink":"nbma.info/tags/监控/"}]},{"title":"Prometheus入门","slug":"Prometheus-base","date":"un44fin44","updated":"un22fin22","comments":true,"path":"Prometheus-base/","link":"","permalink":"nbma.info/Prometheus-base/","excerpt":"Prometheus的基本原理是通过HTTP协议周期性抓取被监控组件的状态，任意组件只要提供对应的HTTP接口就可以接入监控。不需要任何SDK或者其他的集成过程。这样做非常适合做虚拟化环境监控系统，比如VM、Docker、Kubernetes等。","text":"Prometheus的基本原理是通过HTTP协议周期性抓取被监控组件的状态，任意组件只要提供对应的HTTP接口就可以接入监控。不需要任何SDK或者其他的集成过程。这样做非常适合做虚拟化环境监控系统，比如VM、Docker、Kubernetes等。 输出被监控组件信息的HTTP接口被叫做exporter 。目前互联网公司常用的组件大部分都有exporter可以直接使用，比如Varnish、Haproxy、Nginx、MySQL、Linux系统信息(包括磁盘、内存、CPU、网络等等)。 Prometheus服务过程大概是这样： Prometheus Daemon负责定时去目标上抓取metrics(指标)数据，每个抓取目标需要暴露一个http服务的接口给它定时抓取。Prometheus支持通过配置文件、文本文件、Zookeeper、Consul、DNS SRV Lookup等方式指定抓取目标。Prometheus采用PULL的方式进行监控，即服务器可以直接通过目标PULL数据或者间接地通过中间网关来Push数据。 Prometheus在本地存储抓取的所有数据，并通过一定规则进行清理和整理数据，并把得到的结果存储到新的时间序列中。 Prometheus通过PromQL和其他API可视化地展示收集的数据。Prometheus支持很多方式的图表可视化，例如Grafana、自带的Promdash以及自身提供的模版引擎等等。Prometheus还提供HTTP API的查询方式，自定义所需要的输出。 PushGateway支持Client主动推送metrics到PushGateway，而Prometheus只是定时去Gateway上抓取数据。 Alertmanager是独立于Prometheus的一个组件，可以支持Prometheus的查询语句，提供十分灵活的报警方式。 Prometheus适用的场景Prometheus在记录纯数字时间序列方面表现非常好。它既适用于面向服务器等硬件指标的监控，也适用于高动态的面向服务架构的监控。对于现在流行的微服务，Prometheus的多维度数据收集和数据筛选查询语言也是非常的强大。Prometheus是为服务的可靠性而设计的，当服务出现故障时，它可以使你快速定位和诊断问题。它的搭建过程对硬件和服务没有很强的依赖关系。 Prometheus不适用的场景Prometheus它的价值在于可靠性，甚至在很恶劣的环境下，你都可以随时访问它和查看系统服务各种指标的统计信息。 如果你对统计数据需要100%的精确，它并不适用，例如：它不适用于实时计费系统。 Prometheus官网：https://prometheus.io/ 安装PrometheusPrometheus官方给出了多重部署方案，比如：Docker容器、Ansible、Chef、Puppet、Saltstack等。 Prometheus用Golang实现，因此具有天然可移植性(支持Linux、Windows、macOS和Freebsd)。这里直接使用预编译的二进制文件部署，开箱即用。 Prometheus安装 这里以Linux系统为例： 123$ wget https://github.com/prometheus/prometheus/releases/download/v2.2.1/prometheus-2.2.1.linux-amd64.tar.gz$ tar xzvf prometheus-2.2.1.linux-amd64.tar.gz$ mv prometheus-2.2.1.linux-amd64 /usr/local/prometheus 其它系统版本可在这里下载：https://prometheus.io/download/ 验证安装 123456$ cd /usr/local/prometheus$ ./prometheus --versionprometheus, version 2.2.1 (branch: HEAD, revision: bc6058c81272a8d938c05e75607371284236aadc) build user: root@149e5b3f0829 build date: 20180314-14:15:45 go version: go1.10 配置Prometheus 在prometheus目录下有一个名为prometheus.yml的主配置文件。其中包含大多数标准配置及prometheus的自检控配置，默认配置文件如下： 12345678910111213141516171819202122232425262728293031$ cat /usr/local/prometheus/prometheus.yml# 全局配置global: scrape_interval: 15s # 默认抓取间隔, 15秒向目标抓取一次数据。 evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute. # scrape_timeout is set to the global default (10s). # 这个标签是在本机上每一条时间序列上都会默认产生的，主要可以用于联合查询、远程存储、Alertmanger时使用。 external_labels: monitor: &apos;codelab-monitor&apos;# Load rules once and periodically evaluate them according to the global &apos;evaluation_interval&apos;.rule_files: # - &quot;first.rules&quot; # - &quot;second.rules&quot;# 这里就表示抓取对象的配置# 这里是抓去promethues自身的配置scrape_configs:# job name 这个配置是表示在这个配置内的时间序例，每一条都会自动添加上这个&#123;job_name:&quot;prometheus&quot;&#125;的标签。 - job_name: &apos;prometheus&apos; # metrics_path defaults to &apos;/metrics&apos; # scheme defaults to &apos;http&apos;. # \b重写了全局抓取间隔时间，由15秒重写成5秒。 scrape_interval: 5s static_configs: - targets: [&apos;localhost:9090&apos;] 创建用户 这里单独创建一个专门用于运行prometheus的用户，不用root运行程序是一种好习惯。主目录为/var/lib/prometheus，用作prometheus的数据目录。 12$ groupadd prometheus$ useradd -g prometheus -m -d /var/lib/prometheus -s /sbin/nologin prometheus 创建Systemd服务 123456789101112$ vim /etc/systemd/system/prometheus.service[Unit]Description=prometheusAfter=network.target[Service]Type=simpleUser=prometheusExecStart=/usr/local/prometheus/prometheus --config.file=/usr/local/prometheus/prometheus.yml --storage.tsdb.path=/var/lib/prometheusRestart=on-failure[Install]WantedBy=multi-user.target 启动Prometheus 1$ systemctl start prometheus 验证Prometheus是否启动成功 1234567$ systemctl status prometheus● prometheus.service - prometheus Loaded: loaded (/etc/systemd/system/prometheus.service; disabled; vendor preset: disabled) Active: active (running) since Thu 2018-03-22 16:11:10 CST; 6s ago Main PID: 60721 (prometheus) CGroup: /system.slice/prometheus.service └─60721 /usr/local/prometheus/prometheus --config.file=/usr/local/prometheus/prometheus.yml --storage.tsdb.path=/var/li... 访问自带Web Prometheus自带一个比较简单的Web，可以查看表达式搜索结果、报警配置、prometheus配置,exporter状态等。自带Web默认在http://ip:9090。 Prometheus本身也是自带exporter的,我们通过请求 http://ip:9090/metrics 可以查看从exporter中能具体抓到哪些数据。 这里以Prometheus本身数据为例，简单演示下在Web中查询指定表达式及图形化显示查询结果。 使用Prometheus监控服务器上面用Prometheus本身的数据简单演示了监控数据的查询，这里我们用一个监控服务器状态的例子来更加直观说明。 为监控服务器CPU、内存、磁盘、I/O等信息，首先需要安装node_exporter。node_exporter的作用是用于机器系统数据收集。 安装node_exporter node_exporter也是用Golang实现，直接使用预编译的二进制文件部署，开箱即用。 123$ wget https://github.com/prometheus/node_exporter/releases/download/v0.15.2/node_exporter-0.15.2.linux-amd64.tar.gz$ tar -zxvf node_exporter-0.15.2.linux-amd64.tar.gz$ mv node_exporter-0.15.2.linux-amd64 /usr/local/prometheus/node_exporter 创建Systemd服务 123456789101112$ vim /etc/systemd/system/node_exporter.service[Unit]Description=node_exporterAfter=network.target[Service]Type=simpleUser=prometheusExecStart=/usr/local/prometheus/node_exporter/node_exporterRestart=on-failure[Install]WantedBy=multi-user.target 启动Node exporter 1$ systemctl start node_exporter 验证Node exporter是否启动成功 1234567$ systemctl status node_exporter● node_exporter.service - node_exporter Loaded: loaded (/etc/systemd/system/node_exporter.service; disabled; vendor preset: disabled) Active: active (running) since Thu 2018-03-22 16:14:04 CST; 6s ago Main PID: 60904 (node_exporter) CGroup: /system.slice/node_exporter.service └─60904 /usr/local/prometheus/node_exporter/node_exporter 修改prometheus.yml，加入下面的监控目标： Node Exporter默认的抓取地址为http://IP:9100/metrics 1234567$ vim /usr/local/prometheus/prometheus.yml - job_name: &apos;linux&apos; static_configs: - targets: [&apos;localhost:9100&apos;] labels: instance: node1 prometheus.yml中一共定义了两个监控：一个是监控prometheus自身服务，另一个是监控Linux服务器。这里给个完整的示例： 1234567891011scrape_configs: - job_name: &apos;prometheus&apos; static_configs: - targets: [&apos;localhost:9090&apos;] - job_name: &apos;linux&apos; static_configs: - targets: [&apos;localhost:9100&apos;] labels: instance: node1 重启Prometheus 1$ systemctl restart prometheus 在Prometheus Web查看监控的目标 访问Prometheus Web，在Status-&gt;Targets页面下，我们可以看到我们配置的两个Target，它们的State为UP。","categories":[],"tags":[{"name":"centos","slug":"centos","permalink":"nbma.info/tags/centos/"},{"name":"监控","slug":"监控","permalink":"nbma.info/tags/监控/"}]},{"title":"nginx入门","slug":"learn-nginx","date":"un33fin33","updated":"un66fin66","comments":true,"path":"learn-nginx/","link":"","permalink":"nbma.info/learn-nginx/","excerpt":"nginx安装打开nginx.org查看最近稳定版，以下链接查看最新nginx的yum repo：http://nginx.org/en/linux_packages.html#stable","text":"nginx安装打开nginx.org查看最近稳定版，以下链接查看最新nginx的yum repo：http://nginx.org/en/linux_packages.html#stable 编辑/etc/yum.repo.d/nginx.repo填入以下内容：12345[nginx]name=nginx repobaseurl=http://nginx.org/packages/OS/OSRELEASE/$basearch/gpgcheck=0enabled=1 Replace “OS” with “rhel” or “centos”, depending on the distribution used, and “OSRELEASE” with “6” or “7”, for 6.x or 7.x versions, respectively. 然后使用yum list |grep nginx查看输出中是否含有nginx.x86_64如果有说明nginx repo安装成功。 安装nginxyum -y install nginx ##概述nginx -v 查看nginx版本 rpm -ql nginx 查看nginx目录123456789101112131415161718192021222324252627282930313233/etc/logrotate.d/nginx #nginx日志轮转，用于logratate服务的日志切割/etc/nginx #nginx主配置文件/etc/nginx/conf.d #nginx主配置文件/etc/nginx/conf.d/default.conf #nginx默认配置文件/etc/nginx/fastcgi_params #cgi配置相关/etc/nginx/koi-utf #编码转换文件，映射转换文件/etc/nginx/koi-win #编码转换文件，映射转换文件/etc/nginx/mime.types #设置http协议的Content-Type与扩展名对应关系（nginx处理无法识别的扩展名时读取该文件）/etc/nginx/modules #nginx模块目录/etc/nginx/nginx.conf #nginx主配置文件/etc/nginx/scgi_params #cgi配置相关/etc/nginx/uwsgi_params #cgi配置相关/etc/nginx/win-utf #编码转换文件，映射转换文件/etc/sysconfig/nginx # 配置系统守护进程管理器管理方式/etc/sysconfig/nginx-debug # 配置系统守护进程管理器管理方式/usr/lib/systemd/system/nginx-debug.service # 配置系统守护进程管理器管理方式/usr/lib/systemd/system/nginx.service # 配置系统守护进程管理器管理方式/usr/lib64/nginx/usr/lib64/nginx/modules #nginx模块目录/usr/libexec/initscripts/legacy-actions/nginx/usr/libexec/initscripts/legacy-actions/nginx/check-reload/usr/libexec/initscripts/legacy-actions/nginx/upgrade/usr/sbin/nginx #nginx命令/usr/sbin/nginx-debug #nginx命令/usr/share/doc/nginx-1.12.2 #帮助和手册/usr/share/doc/nginx-1.12.2/COPYRIGHT #帮助和手册/usr/share/man/man8/nginx.8.gz #帮助和手册/usr/share/nginx/usr/share/nginx/html/usr/share/nginx/html/50x.html/usr/share/nginx/html/index.html/var/cache/nginx #nginx缓存目录/var/log/nginx #nginx日志 nginx -V 查看nginx详细的编译参数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152*#安装目录或路径*--prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock *#执行对应模块时，nginx所保留的临时文件*--http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp *#nginx启动的用户和用户组*--user=nginx --group=nginx *#nginx模块*--with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module *#设置额外的参数将被添加到CFLAGS变量*--with-cc-opt=&apos;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC&apos; *#设置附加的参数，链接系统库*--with-ld-opt=&apos;-Wl,-z,relro -Wl,-z,now -pie&apos; nginx.conf/etc/nginx/nginx.conf log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; access_log /var/log/nginx/access.log main;#日志路径和格式 nginx变量nginx请求变量arg_PARAMETER、http_HRADER、sent_http_HEADER比如$http_user_agent nginx内置变量http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format 自定义变量待添加 nginx模块nginx官方模块和第三方模块 proxy_pass模块语法：proxy_pass http://xxxx/yyy 正向代理：代理client反向代理：代理server 负载均衡通过proxy_pass转发到upstream server组upstream模块必须配置在server层以外123456789101112131415161718192021upstream name&#123; server 1.1.1.1:8881; server x.nbma.info; server 2.2.2.2 weight=5; #权重,需要设置加权轮询 server 3.3.3.3 backup; #备份节点 server 4.4.4.4 down; #不提供服务 server 5.5.5.5 max_fails=3; #允许请求失败的次数 server 6.6.6.6 fail_timeout=30; #重试时间 server 7.7.7.7 max_conn=500; #最大连接数&#125;server &#123; location /&#123; proxy_pass http://name; &#125;&#125; 调度算法1234567upstream name&#123; ip_hash; #基于源IP hash least_conn; #最小连接 hash $request_uri; #基于变量uri进行hash server 1.1.1.1:8881; server x.nbma.info;&#125; rewrite规则语法： rewrite regex replacement [flag];位置：只能在server,location或者if内例如1rewrite ^(.*)$ /pages/maintain.html break; flag类型： last: 停止rewrite检测，继续匹配rewrite之后的其他规则，服务器只收到一次请求break: 停止rewrite检测，不在匹配rewrite之后的其他规则，直接去root目录redirect: 返回302临时重定向，地址栏会显示跳转后的地址，服务器收到两次请求permanent: 返回301永久重定向，地址栏会显示跳转后的地址，服务器收到两次请求，客户端会缓存这次跳转结果，之后跳转将由浏览器完成，无需经过服务器处理 常见的rewrite规则：SEO优化1234rewrite ^/course-(\\d+)-(\\d+)-(\\d+)-\\.html$ /course/$1/$2/$3.html break;http://example.com/course-11-22-33.htmlhttp://example.com/course/11/22/3.html 基于agent判断123if ($http_user_agent ~* Chrome) &#123; rewrite ^/nginx http://example.com/xxx break;&#125; 文件路径不存在，类似404123if (!-f $request_filename) &#123; rewrite ^(.*)$ http://example.com/xxx redirect;&#125;","categories":[],"tags":[{"name":"系统","slug":"系统","permalink":"nbma.info/tags/系统/"}]},{"title":"ospf知识点-常见问题","slug":"ospf-question","date":"un22fin22","updated":"un66fin66","comments":true,"path":"ospf-question/","link":"","permalink":"nbma.info/ospf-question/","excerpt":"1：在一台路由器上，可以同时配置多个OSPF进程吗？可以，同一台设备上不用进程号的ospf lsdb是独立的。且进程号只具有本地意义，用于区分多个ospf进程。在同一链路接口两端设备的ospf进程号可以不一样。","text":"1：在一台路由器上，可以同时配置多个OSPF进程吗？可以，同一台设备上不用进程号的ospf lsdb是独立的。且进程号只具有本地意义，用于区分多个ospf进程。在同一链路接口两端设备的ospf进程号可以不一样。2：OSPF中stub与NSSA有什么区别？主要区别是是否可以接受外部路由。其中stub区域内只有本地的1，2，3类LSA，通过ABR与area0相连；NSSA区域除了具备stub特性外，还可以接收来自外部其他路由协议的路由，通过ASBR进入ospf，在NSSA内为7类LSA，再通过ABR转换为5类LSA进入其他OSPF区域。 3：OSPF建立虚链路只能用virtual-link命令吗？virtual-link：其他区域和area0的区域间虚链路sham-link: 在MPLS VPN环境下的后门链路，属于区域内虚链路gre：非ospf技术 4：为什么在OSPF中不能重分发静态默认路由？引入静态只能在进程下default-information originate (always)为什么这个，前面大神说如果重分布可以的话，某些情况下可能会导致环路，还没想到案例。 5：为什么OSPF在使用协议内过滤时，使用OUT和接口组合会报错？ospf邻居间传递的是lsdb。进程下in方向是从LSDB读取之后，本地生成的路由条目加入路由表之前生效的。而out通告出去的也是LSDB，不是像bgp那样的路由条目，所以无法通过out+接口过滤。 6：OSPF是否可以实现非等价的负载均衡？由于cost机制，只能实现等价负载均衡。 7：OSPF是否支持区域内汇总？为什么？同一区域的LSDB是一直的，要修改只能在ABR和ASBR，也就是区域间。 8：对于常用的查看命令，你是否习惯设置命令快捷方式？讨论交流一下设置的方法。快捷方式用得少，我在路由器上习惯这么敲：sh ip os in br（查看接口宣告及角色）sh ip os nei（查看邻居情况及角色）sh run | s r o（查看ospf配置）","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"nbma.info/tags/网络/"},{"name":"ospf","slug":"ospf","permalink":"nbma.info/tags/ospf/"}]},{"title":"无线基础","slug":"wireless-base","date":"un55fin55","updated":"un66fin66","comments":true,"path":"wireless-base/","link":"","permalink":"nbma.info/wireless-base/","excerpt":"最近梳理了一般无线CCNA的支持还有Aruba的无线基本配置","text":"最近梳理了一般无线CCNA的支持还有Aruba的无线基本配置 思科AireOSService-port interface :带外网管Manager Interface: PC https网管，WLC发起连接radius时使用AP Manager Interface: 用于AP寻找WLC ，与AP建立CAPWAP隧道；8.0以后版本默认和manager interface共用一个portVirtual Interface: 用于对无线用户隐藏真实的dhcp服务器地址（仅在中心转发时）Dynamic Interface: 关联有线网络的VLAN 创建WLAN的时候需要配置SSID，而且使用中心转发的时候需要关联对应的dynamic interface Option 43选项：在dhcp下配置option 43 hex f104.0a01.0164 f1固定，04表示一个控制器地址，08表示两个控制器地址0a010164即10.1.1.100 Aruba基本配置配置vlan, SVI配置上联trunk配置网关*配置环回口（默认使用VLan1作为控制器地址） 配置DHCP，指定AC地址 dns：解析Aruba-master到AC dhcp option 43： ADP：Aruba Discovry Protocol，二层广播或三层组播239.0.82.11 创建AP Group将AP加入group在group中创建virtual APvirtual AP关联vlan 创建SSID profile SSID名称和加密方式创建AAA profile 待续","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"nbma.info/tags/网络/"}]},{"title":"tcp回流经过ASA防火墙问题","slug":"asa-tcp-traffic-back","date":"un44fin44","updated":"un22fin22","comments":true,"path":"asa-tcp-traffic-back/","link":"","permalink":"nbma.info/asa-tcp-traffic-back/","excerpt":"环境R2，R3网关在ASA，R3背后有10.0.0.0网络，ASA路由10.0.0.0/24下一跳是R3问题，R2访问10.0.0.0/24网段时，流量到达ASA，icmp和udp可以通过，tcp会被丢弃","text":"环境R2，R3网关在ASA，R3背后有10.0.0.0网络，ASA路由10.0.0.0/24下一跳是R3问题，R2访问10.0.0.0/24网段时，流量到达ASA，icmp和udp可以通过，tcp会被丢弃 1，R2的10.1.1.44发起TCP流量访问10.0.0.0网段web server2，ASA收到改流量，发现出站接口是相同的security-level，需要敲下这条命令： ASA(config)#same-security permit intra-interface3，然后这个SYN包会通过R3路由到达R4，4，Web server返回SYN-ACK，这个包在到达R3之后，将会被直接通过mac地址转发到R25，R2收到该数据包会直接丢弃，这是因为ASA的“tcp序列号随机化”的默认特性， 当ASA从任意接口收到一个的SYN包时，会将seq随机成另一个数字，记录在状态表中，然后再发出，这是他的一个安全策略。 而在上例中，假定R2初始的SYN包的seq是12345，经过ASA被随机成为56789，R4回报只会确认收到56789，这个包在到达R2之后会被丢弃，因为R2希望确认123456，为了避免这种内部的异步路由导致的丢包，需要在ASA赦免特定tcp流量的状态化检测，配置如下： object-group network LOCAL network-object 10.1.1.0 255.255.255.0 object-group network VPN network-object 10.0.0.0 255.255.255.0 access-list TCP-BYPASS extended permit ip object-group LOCAL object-group VPN //抓取需要bypass的明细流量 ASA(config)#class-map TCP-BYPASS ASA(config-cmap)#match access-list TCP-BYPASS //创建class-map匹配感兴趣流量 ASA(config-cmap)#policy-map TCP-BYPASS-POLICY ASA(config-pmap)#class TCP-BYPASS //创建policy-map,指定class-map ASA(config-pmap-c)#set connection advanced-options tcp-state-bypass //开启tcp bypass特性 ASA(config-pmap-c)#service-policy TCP-BYPASS-POLICY interface inside //针对inside调用 其他： 如果ping也被ASA检测，那么也需要禁用，否则从10.0.0.0发起的ping是不通的， 其他被ASA检测的协议也是类似","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"nbma.info/tags/网络/"},{"name":"asa","slug":"asa","permalink":"nbma.info/tags/asa/"}]},{"title":"CentOS7部署zabbix3.4","slug":"Centos7-deploy-zabbix3","date":"un11fin11","updated":"un66fin66","comments":true,"path":"Centos7-deploy-zabbix3/","link":"","permalink":"nbma.info/Centos7-deploy-zabbix3/","excerpt":"早该总结一次了，之前都是自己编译，现在用yum直接装，还快。","text":"早该总结一次了，之前都是自己编译，现在用yum直接装，还快。 Zabbix 3.4 支持Centos 7。貌似不支持6.9. 更多详细内容请参考官方说明文档，详细的安装要求不贴出来了。 https://www.zabbix.com/documentation/3.4/zh/manual/installation/requirements 虚拟机配置 双核 8G内存 01、最小化安装操作系统02、升级系统组件到最新版本sudo yum -y update 03、关闭 SELinuxsudo sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config 04、关闭防火墙sudo systemctl stop firewalld.service &amp;&amp; systemctl disable firewalld.service完成3、4两步，重启一下。 05、获取SQL源sudo rpm -Uvh https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm 可以从https://dev.mysql.com/downloads/file/?id=470281 下载 06、安装 Zabbix 所需软件支持包先装mysqlsudo yum install mysql-* --skip-broken 有冲突的软件跳过 安装Apachesudo yum -y install httpd123456789systemctl start httpd.service #启动systemctl stop httpd.service #停止systemctl restart httpd.service #重启systemctl enable httpd.service #开机启动systemctl disable httpd.service #开机不启动 安装phpsudo yum install php 安装php扩展1sudo yum install php-mysqlnd php-gd libjpeg* php-snmp php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-bcmath php-mhash php-common php-ctype php-xml php-xmlreader php-xmlwriter php-session php-mbstring php-gettext php-ldap php-mysqli --skip-broken 1sudo yum install wget telnet net-tools python-paramiko gcc gcc-c++ dejavu-sans-fonts python-setuptools python-devel sendmail mailx net-snmp net-snmp-devel net-snmp-utils freetype-devel libpng-devel perl unbound libtasn1-devel p11-kit-devel OpenIPMI unixODBC 07、设置 MySQL 参数（8GB 内存为例）如果你不清楚这些参数的含义，请不要修改，保持默认即可。直接跳过这一节sudo vim /etc/my.cnf 不然没权限保存在文件最后添加以下内容：123456789101112131415161718192021222324innodb_file_per_table = 1innodb_status_file = 1innodb_buffer_pool_size = 6Ginnodb_flush_log_at_trx_commit = 2innodb_log_buffer_size = 16Minnodb_log_file_size = 64Minnodb_support_xa = 0default-storage-engine = innodbbulk_insert_buffer_size = 8Mjoin_buffer_size = 16Mmax_heap_table_size = 32Mtmp_table_size = 32Mmax_tmp_tables = 48read_buffer_size = 32Mread_rnd_buffer_size = 16Mkey_buffer_size = 32Mthread_cache_size = 32innodb_thread_concurrency = 8innodb_flush_method = O_DIRECTinnodb_rollback_on_timeout = 1query_cache_size = 16Mquery_cache_limit = 16Mcollation_server = utf8_bincharacter_set_server = utf8 注：原则上 innodb_buffer_pool_size 需要设置为主机内存的 80%，如果主机内存不是 8GB，以上参数可依据相应比例进行调整，例如主机内存为 16GB，则 innodb_buffer_pool_size 建议设置为 12GB，innodb_log_buffer_size 建议设置为 32M，innodb_log_file_size 建议设置为 128M，以此类推。请注意innodb_buffer_pool_size的值必须是整数，例如主机内存是4G，那么innodb_buffer_pool_size可以设置为3G，而不能设置为3.2G 08、启动 MySQLsudo systemctl enable mysqld &amp;&amp; systemctl start mysqld 09、获取 MySQL 的 root 初始密码grep &#39;temporary password&#39; /var/log/mysqld.log JtZizq!Rl6E+ 10、进行 MySQL 安全配置配置开始时会用到第 09获取的初始密码，建议修改为自定义密码，其它选项选择 y 即可 mysql_secure_installation 密码改为：Aa123456,. 11、重启 MySQLsudo systemctl restart mysqld 12、配置 MySQL 中 zabbix要的库和账号权限mysql -u root -p（需要输入第 10步中设置的自定义密码） mysql&gt;create database zabbix character set utf8; #创建数据库 mysql&gt;create user zabbix@&#39;%&#39; identified by &#39;Qingdao@2017&#39;; #创建用户和密码 mysql&gt;grant all privileges on zabbix.* to zabbix@&#39;%&#39;; #赋权 mysql&gt;flush privileges; mysql&gt;exit; 13、安装 Zabbix源sudo rpm -ivh http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpm3.4最新版看这里：http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/ 14、安装zabbixsudo yum -y install zabbix-server-mysql zabbix-web-mysql zabbix-java-gateway zabbix-web 15、导入 zabbix 所需信息cd /usr/share/doc/zabbix-server-mysql-3.4.7(注意版本号)zcat create.sql.gz | mysql -uroot zabbix -p（需要输入第 10 步中设置的自定义密码） 16、配置 zabbix 参数sudo vim /etc/zabbix/zabbix_server.conf 这个配置要一遍过主要是以下几个选项参数需要设置（8GB 内存为例）： DBPassword 配置为第 12 步第 3 行中设置的自定义密码 CacheSize=512M（CacheSize在371行） HistoryCacheSize=128M（HistoryCacheSize在397行） HistoryIndexCacheSize=128M（HistoryIndexCacheSize在405行） TrendCacheSize=128M（TrendCacheSize在414行） ValueCacheSize=256M（ValueCacheSize在425行） Timeout=30（Timeout在432)其它参数保持默认值即可 17、配置 Apache 中的 PHP 参数（8GB 内存为例）sudo vim /etc/httpd/conf.d/zabbix.conf php_value max_execution_time 600php_value memory_limit 256Mphp_value post_max_size 32Mphp_value upload_max_filesize 32Mphp_value max_input_time 600php_value always_populate_raw_post_data -1date.timezone 去掉注释符号#，并将值修改为 Asia/Shanghai 18、重启系统systemctl stop mysqld &amp;&amp; reboot 19、启动zabbixsudo systemctl start httpd &amp;&amp; systemctl start zabbix-server 20、初始化在浏览器中输入 http://zbx监控服务器的IP地址/zabbix，进行 zabbix 的页面初始化配置 这里如果密码输错，是跳转不到下一步的。密码是前面设置的 Qingdao@2017 默认用户名 admin，默认密码 zabbix，确认可正常登录系统。 21、设置中文界面登录进入系统后，确认 Zabbix server is running 的值是 Yes。然后选择 Administrator –&gt; Users –&gt; Admin 回到”监测中” –&gt; “仪表板”，就可以看到监控系统已设置为中文界面了。 22、修复图片中文乱码 首先copy本机的中文字体，仿宋、楷体、雅黑均可 将字体名称修改为graphfont.ttf备份zabbix原字体，在/usr/share/zabbix/fonts/目录 并将自己修改好的字体上传到该目录，修复权限chmod 777 graphfont.ttf 23、zabbix-agent安装及配置1、安装zabbix-agentyum install zabbix-agent -y 2、配置zabbix-agentgrep -n &#39;^&#39;[a-Z] /etc/zabbix/zabbix_agentd.conf13:PidFile=/var/run/zabbix/zabbix_agentd.pid32:LogFile=/var/log/zabbix/zabbix_agentd.log43:LogFileSize=097:Server=172.16.8.254138:ServerActive=172.16.8.254149:Hostname=Zabbix server267:Include=/etc/zabbix/zabbix_agentd.d/*.conf 3、启动zabbix-agent并设置开机启动systemctl enable zabbix-agent.servicesystemctl restart zabbix-agent.service","categories":[],"tags":[{"name":"centos","slug":"centos","permalink":"nbma.info/tags/centos/"},{"name":"监控","slug":"监控","permalink":"nbma.info/tags/监控/"}]},{"title":"vim中文入门指南","slug":"vim-tutor","date":"un11fin11","updated":"un66fin66","comments":true,"path":"vim-tutor/","link":"","permalink":"nbma.info/vim-tutor/","excerpt":"vimtutor这个很6 啊，mac下还是中文","text":"vimtutor这个很6 啊，mac下还是中文 第一讲：基础 光标在屏幕文本中的移动既可以用箭头键，也可以使用 hjkl 字母键。 h (左移) j (下行) k (上行) l (右移) 欲进入 Vim 编辑器(从命令行提示符)，请输入：vim 文件名 &lt;回车&gt; 欲退出 Vim 编辑器，请输入 :q! &lt;回车&gt; 放弃所有改动。或者输入 :wq &lt;回车&gt; 保存改动。 在正常模式下删除光标所在位置的字符，请按： x 欲插入或添加文本，请输入： i 输入欲插入文本 &lt;ESC&gt; 在光标前插入文本 A 输入欲添加文本 &lt;ESC&gt; 在一行后添加文本 特别提示：按下 键会带您回到正常模式或者撤消一个不想输入或部分完整的命令。 第二讲：删除 欲从当前光标删除至下一个单词，请输入：dw 欲从当前光标删除至当前行末尾，请输入：d$ 欲删除整行，请输入：dd 欲重复一个动作，请在它前面加上一个数字：2w 在正常模式下修改命令的格式是：operator [number] motion其中： operator - 操作符，代表要做的事情，比如 d 代表删除 [number] - 可以附加的数字，代表动作重复的次数 motion - 动作，代表在所操作的文本上的移动，例如 w 代表单词(word)，$ 代表行末等等。 欲移动光标到行首，请按数字0键：0 欲撤消以前的操作，请输入：u (小写的u)欲撤消在一行中所做的改动，请输入：U (大写的U)欲撤消以前的撤消命令，恢复以前的操作结果，请输入：CTRL-R 第三讲：置入 要重新置入已经删除的文本内容，请按小写字母 p 键。该操作可以将已删除的文本内容置于光标之后。如果最后一次删除的是一个整行，那么该行将置于当前光标所在行的下一行。 要替换光标所在位置的字符，请输入小写的 r 和要替换掉原位置字符的新字符即可。 更改类命令允许您改变从当前光标所在位置直到动作指示的位置中间的文本。比如输入 ce 可以替换当前光标到单词的末尾的内容；输入 c$ 可以替换当前光标到行末的内容。 更改类命令的格式是： c [number] motion 第四讲：查找替换 CTRL-G 用于显示当前光标所在位置和文件状态信息。G 用于将光标跳转至文件最后一行。先敲入一个行号然后输入大写 G 则是将光标移动至该行号代表的行。gg 用于将光标跳转至文件第一行。 输入 / 然后紧随一个字符串是在当前所编辑的文档中正向查找该字符串。输入 ? 然后紧随一个字符串则是在当前所编辑的文档中反向查找该字符串。完成一次查找之后按 n 键是重复上一次的命令，可在同一方向上查找下一个匹配字符串所在；或者按大写 N 向相反方向查找下一匹配字符串所在。CTRL-O 带您跳转回较旧的位置，CTRL-I 则带您到较新的位置。 如果光标当前位置是括号(、)、[、]、{、}，按 % 会将光标移动到配对的括号上。 在一行内替换头一个字符串 old 为新的字符串 new，请输入 :s/old/new在一行内替换所有的字符串 old 为新的字符串 new，请输入 :s/old/new/g在两行内替换所有的字符串 old 为新的字符串 new，请输入 :#,#s/old/new/g在文件内替换所有的字符串 old 为新的字符串 new，请输入 :%s/old/new/g进行全文替换时询问用户确认每个替换需添加 c 标志 :%s/old/new/gc 第五讲小结 :!command 用于执行一个外部命令 command。 请看一些实际例子： (MS-DOS) (Unix) :!dir :!ls - 用于显示当前目录的内容。 :!del FILENAME :!rm FILENAME - 用于删除名为 FILENAME 的文件。 :w FILENAME 可将当前 VIM 中正在编辑的文件保存到名为 FILENAME 的文件中。 v motion :w FILENAME 可将当前编辑文件中可视模式下选中的内容保存到文件FILENAME 中。 :r FILENAME 可提取磁盘文件 FILENAME 并将其插入到当前文件的光标位置后面。 :r !dir 可以读取 dir 命令的输出并将其放置到当前文件的光标位置后面。 第六讲小结 输入小写的 o 可以在光标下方打开新的一行并进入插入模式。输入大写的 O 可以在光标上方打开新的一行。 输入小写的 a 可以在光标所在位置之后插入文本。输入大写的 A 可以在光标所在行的行末之后插入文本。 e 命令可以使光标移动到单词末尾。 操作符 y 复制文本，p 粘贴先前复制的文本。 输入大写的 R 将进入替换模式，直至按 键回到正常模式。 输入 :set xxx 可以设置 xxx 选项。一些有用的选项如下： ‘ic’ ‘ignorecase’ 查找时忽略字母大小写 ‘is’ ‘incsearch’ 查找短语时显示部分匹配 ‘hls’ ‘hlsearch’ 高亮显示所有的匹配短语 选项名可以用完整版本，也可以用缩略版本。 在选项前加上 no 可以关闭选项： :set noic 第七讲小结 输入 :help 或者按 键或 键可以打开帮助窗口。 输入 :help cmd 可以找到关于 cmd 命令的帮助。 输入 CTRL-W CTRL-W 可以使您在窗口之间跳转。 输入 :q 以关闭帮助窗口 您可以创建一个 vimrc 启动脚本文件用来保存您偏好的设置。 当输入 : 命令时，按 CTRL-D 可以查看可能的补全结果。按 可以使用一个补全。 from V2ex设置显示行号(为了要了方便到某一行) :set number移动到行首(第0列) 数字键 0移动到行首(第一个非空字符)Shift+6移动到行位 $ or Shift+4向上\\下滚动半屏 ctrl+u\\d向上\\下滚动一屏(这个比较实用，记住) ctrl+b\\f移动到第 x 行 xG or :x移动到当前行字符 x 上(向后搜索，继续移动到下一个 x 的命令按,键，上一个 x 的命令是按;键) fx移动到当前行字符 x 上(向前搜索，继续移动到下一个 x 的命令按,键，上一个 x 的命令是按;键) Fx","categories":[],"tags":[{"name":"centos","slug":"centos","permalink":"nbma.info/tags/centos/"}]},{"title":"HTTPS的工作原理","slug":"https-theory","date":"un00fin00","updated":"un66fin66","comments":true,"path":"https-theory/","link":"","permalink":"nbma.info/https-theory/","excerpt":"HTTPS在传输数据之前需要客户端（浏览器）与服务端（网站）之间进行一次握手，在握手过程中将确立双方加密传输数据的密码信息。","text":"HTTPS在传输数据之前需要客户端（浏览器）与服务端（网站）之间进行一次握手，在握手过程中将确立双方加密传输数据的密码信息。 TLS/SSL协议不仅仅是一套加密传输的协议，更是一件经过艺术家精心设计的艺术品，TLS/SSL中使用了非对称加密，对称加密以及HASH算法。握手过程的具体描述如下： 下面对这个4个阶段11个包进行详细分析 1.Client Hello报文客户端将产个一个随机数A、并和浏览器能支持的TLS版本号（Extension字段）、以及浏览器能支持的加密方法发送给服务器。 2.Server Hello, Certificate, Server Key Exchange, Server Hello Done 我这边抓包是在服务器上使用tcpdump进行的，server hello的整个过程都在一个数据包中体现。我在查找https相关信息的时候，看到其他网站抓包显示sever hello的四个阶段分对应时四个独立的数据包，原因怀疑是nginx或者apache的特性，有待确认 2.1 Server Hello报文Server Hello中包含了服务器从client hello中选出一组加密算法与HASH算法，TLS版本，一个服务器新生成的随机数B这里可以看到server hello使用和选定的版本都是TLS1.2，选定的算法是TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 2.2 Certificate报文Certificate部分含有两个数字证书，分别是网站的证书和一个中间证书（又称链证书） 中间证书主要解决安卓在某种情况下无法验证网站证书问题，详情查看文末参考文档网站的数字证书中包含服务器的公钥（公钥的指纹在serialNumber字段）和证书的颁发机构的数字签名 1234//网站证书：Certificate: 308204f9308203e1a003020102021203ca27d7faa2474679... (id-at-commonName=nbma.info)//中间证书：Certificate: 308204923082037aa00302010202100a0141420000015385... (id-at-commonName=Let&apos;s Encrypt Authority X3,id-at-organizationName=Let&apos;s Encrypt,id-at-countryName=US) 2.3 Server Key Exchange报文这部分还没弄明白作用，前面client hello的Extension字段中也有ECDH的参数 2.4 Server Hello Done报文3.Client Key Exchange, Change Cipher Spec, Encrypted Handshake Message 浏览器获得网站证书之后浏览器要做以下工作：验证证书的合法性（颁发证书的机构是否合法，证书中包含的网站地址是否与正在访问的地址一致等），如果证书受信任，则浏览器栏里面会显示绿色的锁，否则会给出证书不受信的提示。 3.1 Client Key Exchange报文如果证书受信任，或者是用户接受了不受信的证书，浏览器会发送一个Client Key Exchange的报文。该报文中包含一个客户端生成的新的随机数C，这个随机数被称为Pre-master key，并用网站证书中提供的公钥对该报文进行加密。 3.2 Change Cipher Spec该报文提示服务器此后的报文将使用Pre-master key进行加密 3.3 Encrypted Handshake Message该报文包含连接至今所有报文的校验值，并使用Pre-master key对消息进行加密。 4.New Seesion Ticket, Change Cipher Spec, Encrypted Handshake Message网站接收浏览器发来的数据之后要做以下的操作：a) 使用自己的私钥将信息解密取出Pre-master key，使用Pre-master key解密浏览器发来的握手消息，并验证HASH是否与浏览器发来的一致。b) 使用密码加密一段消息，发送给浏览器。 4.1 New Seesion Ticket服务器跟据客户端发送的信息，生成一个seesion ticket。如果对话中断，下次重连的时候，只要客户端给出这个编号，且服务器有这个编号的记录，双方就可以重新使用已有的”对话密钥”，而不必重新生成一把。同事也能看到，此ticket有效期为600s 这个session ticket是加密的，只有服务器才能解密，其中包括本次对话的主要信息，比如对话密钥和加密方法。当服务器收到session ticket以后，解密后就不必重新生成对话密钥了。 4.2 Change Cipher Spec同样，提示客户端此后的报文将使用Pre-master key进行加密 4.3 Encrypted Handshake Message被加密的finish信息 5.Encrypted Application Data客户端解密并计算握手消息的HASH，如果与服务端发来的HASH一致，此时握手过程结束。 这里浏览器与网站互相发送加密的握手消息并验证，目的是为了保证双方都获得了一致的随机数C。然后双方使用前面的三个随机数A/B/C，生成”对话密钥”（session key又称master key），之后对信息的加密使用master key进行对称加密。 另外，HTTPS一般使用的加密与HASH算法如下： 非对称加密算法：RSA，DSA/DSS 对称加密算法：AES，RC4，3DES HASH算法：MD5，SHA1，SHA256 参考文档：HTTPs握手流程抓包解析图解SSL/TLS协议中间证书的使用","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"nbma.info/tags/网络/"},{"name":"https","slug":"https","permalink":"nbma.info/tags/https/"}]},{"title":"交换机的堆叠、VSS、IRF、VPC区别","slug":"switch-redundancy","date":"un44fin44","updated":"un22fin22","comments":true,"path":"switch-redundancy/","link":"","permalink":"nbma.info/switch-redundancy/","excerpt":"偶然想到这个问题，正好总结一下。","text":"偶然想到这个问题，正好总结一下。 思科的堆叠技术：常见于低端设备，提供简化的本地管理，将一组交换机作为一个对象来管理，堆叠组内设备各自独立。MAC地址表项、ARP表项等不相同。VSS虚拟交换系统：可以将多台交换机组合为单一虚拟交换机，交换组内设备表项相同，统一设备管理。最终简化网络拓扑 其实将这四种技术称为“二层”“冗余”技术并不准确，因为其使用场景和作用即不相同也不冲突，并且工作范围也不是全都局限于二层，直接分类或者横向对比不是十分准确，这里只是将这几种容易混淆的概念列出，如果疏漏或错误，还请指正。 传统Port Channel 交换机端使用LACP或者PAgP协议，服务器端使用NIC teaming技术讲多条链路绑定在一起，STP运行在所有物理链路组成的逻辑链路上。优点是绝大部分交换机都支持这种技术，缺点是所有port channel的组成端口都必须位于同一台交换机上，可能造成单点故障 StackWise Catalyst低端交换上使用的堆叠技术，可以将两台交换机“合并”为一台进行使用和管理，同一prot channel当中的端口可以位于不同物理交换机上。不需要特殊配置，只需要连线即可。只有一个控制层面(control plane)和管理层面（management plane），主要用于接入层端口扩充，同一逻辑单元最多能够接入9台物理交换机 VSS Catalyst 4500和6500上使用的技术，但是对于硬件型号和引擎要求较多，并且只能将两台设备“合并”在一起。此外，VSS不只是二层技术，而是将二层和三层全部“合并”。只有一个控制层面（control plane）和管理层面（management plane） vPC 适用于Nexus交换机，单纯的二层跨机箱冗余技术，不支持VPN或QoS等三层特性。和StackWise和VSS不同的是，配置了vPC的Nexus依然保持各自的控制层面(control plane)和管理层面（management palne），可以用于构建大二层网络。此外还有vitual Port Channel Plus和Enhanced virtual Port Channel，有兴趣可以进一步查阅文档 总结 这四种技术的使用场景和支持设备各不相同，应该根据具体需求进行选择","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"nbma.info/tags/网络/"}]},{"title":"月全食","slug":"dog-eat-moon","date":"un33fin33","updated":"un22fin22","comments":true,"path":"dog-eat-moon/","link":"","permalink":"nbma.info/dog-eat-moon/","excerpt":"有记忆一来总共看过两次月全食，第一次还是小时候，大约是2000年前后吧","text":"有记忆一来总共看过两次月全食，第一次还是小时候，大约是2000年前后吧 小时后，家里还是瓦房，有大大的院子和几棵洋槐树，知道要发生月食还是听大人说从新闻报纸上知道的。好像还是一个夏天，搬了小板凳在院子东边没有树荫的月光下仰着头看，早就听大人讲过天狗吃月亮，又好奇，又期待。不过好像最后也没看完整个过程，小时候还是觉得时间过得好慢，后来实在困得不行，大人也要睡了，就去休息了。 今天应该是第二看到月全食了，在北京，还没下班的时候就突然有点期待，去阳台看了眼，大大的月亮还没开始，努力给它拍了张照片 等到快八点从公司下班出来，月食刚刚开始，一个小时的地铁旅程，几次往车窗外都没看到，将近9点下车之后月亮被吃掉三分之二了，一路匆匆走回住处，路人也都是边走不时抬头看一眼，然后继续匆匆。到家之后又从阳台瞄了一眼，仅剩的月牙开始慢慢变红，直到消失。。。等不了它还原了，也就没看了。 小时候到底是小时候，大把的时间和对一切的好奇。现在除了匆匆还是匆匆，到家看了一眼之后，又学了一个小时无线视频，然后收拾洗漱，睡不着，还是写点东西吧，毕竟博客又重建了。也该填充点内容了。 邀明月，让回忆皎洁，爱在月光下完美明天有个人要早起去邵东。 晚安","categories":[],"tags":[]},{"title":"博客又一次重建！！！！(2017总结)","slug":"hello-world","date":"un44fin44","updated":"un22fin22","comments":true,"path":"hello-world/","link":"","permalink":"nbma.info/hello-world/","excerpt":"上次的博客终结于2106年底，现在是2018 年初，这个博客又复活了。","text":"上次的博客终结于2106年底，现在是2018 年初，这个博客又复活了。 正好，看看一年前的我会什么，一年后，我又学会了什么。 一一年前的我，这个时候应该是刚学完CCIE理论课，正在备考RS lab，偶然间发现乾颐堂服务器上，自动获取所有设备配置的脚本是一段python，也就几十行。每次敲完lab至少节省下来半个多小时，而且不用做重复的工作。直到3月份，第一次考完lab，正好也有时间，就从这段代码开始，敲开了学习python的大门。这就是这半年，才知道了devops的威力，希望自己入局的还不算晚。 二17年初的时候，我给自己定了8个小目标： 我的20171.3月之前完成CCIE考试。2.备考CCIE的同时学习python，跟宝贝一起在GitHub打卡。3.尝试学会围棋。4.找一份稳定的工作，攒下超过8万块钱。5.熟练使用英语口语，最好能找到固定交流的人一起学6.看看北京的博物馆7.跟宝贝学会乒乓球8.跟宝贝一起一次旅行，看海 1，考IE虽然CCIE证书现在的含金量确实不高了，但是反而似乎慢慢变成了行业的基本要求。从2016年6月份考试培训到2017年4月10号第一次lab失败，休息了几个月，再到8月17号终于拿号； 2，Coding大学的时候,第一门是C语言，后来C++、Java、C#、VB、易语言、JSP、ASP.NET、html、xml全都学了一遍，全都无爱。反而像python、json、php这些大学没学过都成了我现在的自学并且能坚持下来的兴趣点。不知道是大学老师的讲解真的让人提不起兴趣还是我自己悟性不行。 3，围棋最早的兴趣起源于一部网剧《毛骗》，邵半仙装逼的时候它是围棋，冬冬玩的时候就是五子棋:)之所以在去年定下这个目标，还是因为AlphaGo那段时间的热点，人工智能是大势所趋，围棋应该是这些AI的第一站，学围棋没什么特别伟大的想法，就是想在别人讨论的时候插上话。但是不知道为什么，我定下这个目标后。。。。。。就忘了！ 4，工作这一年，从待了两年的公司离职，从一家小互联网公司跳到另一家相对大一些公司公司，从研发运维部的netdevops变成了IT部的网络监控运维工程师；网络规模上来了，工作内容却退回了传统网络，一个5人的网络团队，就我一个人懂点自动化的东西，有点挑战…… 5，英语这两年英语的提升更多的还是读写吧，中文的网络知识已经满足不要日常自学和查资料的需求，考CCIE的过程也是。至于听说，至今也没找到固定交流学习的伙伴…… 6，博物馆之前在微博上看到了北京有40十多个大大小小的博物馆，我还立了flag，要多长时间去看一座。目前进度，17年1月1日跟爸妈哥嫂子一起去了国博，17年11月跟宝贝一起去又去了国博，完…… 7，乒乓球在北京站附近学过一次，被某人骂惨了。从此坐板凳…… 8，旅行五一去过一次天津，更难忘的是回程的那个电话。诶……期待今年能看海 2017就这么过完了，写这篇文章的时候，就连2018也过完了7%从考IE开始，到后来学python，再到后来面试找工作，这一年最大的感受就是，学不够，time is not enough，要学的太多；第二个感叹就是，大学四年大把的时间我都干了什么。。。 三写完2017，说说2018 吧：因为年底的面试，也暴露自己什么问题，所以，新年的第一个计划就是提升自己：总结了美团、联想、陌陌、便利蜂公司的招聘需求，基本上也覆盖所有的网络知识点，试试今年能总结出来多少： 二层:STP/RSTP/MSTP802.1X链路聚合 三层:静态路由PBRECMPOSPFISISBGP VPN:PPTPL2TPGRESSL VPNIPSec VPN ip Service:QoSHSRP/VRRPNQABFDdhcp、snooping、arp检测 网络监控:snmpnetflowZabbix 无线：802.11a/b/g/n/ac wava2协议802.11原理和调优EAP/PEAP/TSL认证原理EAP+TSL企业级wifi证书部署原理mac认证/portal认证/802.1X认证radius 传输：SDHMSTPPTNOTNWDM 售前：企业级多协议多出口多业务设计规划部署负载均衡出口自动切换流量调度 光：单模多模波分传输，线路开通 DC：leaf-spine架构VxlanSDNNFV 其他：RouterOSF5/A10等LBAnsibleDNS服务器IPv6了解厂商特点，对标产品 待续","categories":[],"tags":[]},{"title":"ping交换机的SVI地址出现延迟并且很不稳定","slug":"ping-switch-svi-delay","date":"un11fin11","updated":"un22fin22","comments":true,"path":"ping-switch-svi-delay/","link":"","permalink":"nbma.info/ping-switch-svi-delay/","excerpt":"在交换机的vlan 1起一个地址，PC接到交换机，给PC设置一个vlan 1段的地址，然后在PC上ping vlan 1的地址会出现延迟，原本没考虑过这个问题，一直觉得应该小于1ms，但是真机上就是会这样。","text":"在交换机的vlan 1起一个地址，PC接到交换机，给PC设置一个vlan 1段的地址，然后在PC上ping vlan 1的地址会出现延迟，原本没考虑过这个问题，一直觉得应该小于1ms，但是真机上就是会这样。 首先一个问题，我们为什么要“-t”的ping 3750？因为本质上来说：1、交换机是转发设备而不是终端设备，业务数据不会进到3750的CPU。2、ping 包（icmp）的destination如果是3750本地的话，icmp包需要进到3750的CPU处理并产生icmp reply以回应icmp source。 所以，如果没有特殊需求，可以忽略这种延时。因为，ping 3750无非只是连通性测试而非转发性能测试。（转发性能测试需要其他方式测试）而且，从结果来看，平均延时只有2ms，其实延时也不是很高。 总之，1、 icmp包的destination如果是交换机，那么一定会由CPU处理并相应，所以，延时一定和cpu利用率有关。如果是丢包的话，还会和CoPP相关。2、 这种测试本身没有任何实质意义。 &nbsp; icmp的echo是低优先级的数据包，系统需要在处理高优先级的进程和流量之后进行对ping的应答，另外正如楼上专家所说，穿越数据转发和ping 交换机本身是有区别的，结果没有意义。","categories":[],"tags":[]},{"title":"QoS中在MQC下bandwidth和police的区别","slug":"qos-mqc-bandwidth-police","date":"un11fin11","updated":"un22fin22","comments":true,"path":"qos-mqc-bandwidth-police/","link":"","permalink":"nbma.info/qos-mqc-bandwidth-police/","excerpt":"policy和shape是限速的；bandwindth和priority是queueing调度的。bandwindth不是限速用的。","text":"policy和shape是限速的；bandwindth和priority是queueing调度的。bandwindth不是限速用的。 对于bandwindth的解释请参考下面链接： http://www.cisco.com/c/en/us/td/docs/ios/12_2/qos/configuration/guide/fqos_c/qcfconmg.html","categories":[],"tags":[]},{"title":"BGP选路原则验证及分析","slug":"bgp-best-path-selection-algorithm","date":"un11fin11","updated":"un22fin22","comments":true,"path":"bgp-best-path-selection-algorithm/","link":"","permalink":"nbma.info/bgp-best-path-selection-algorithm/","excerpt":"最近重新验证一下bgp协议在思科设备上选路原则问题，并且分析了每一条的属性在配置过程中的注意事项，顺便整理一下文章：","text":"最近重新验证一下bgp协议在思科设备上选路原则问题，并且分析了每一条的属性在配置过程中的注意事项，顺便整理一下文章： 思科官方的定义： http://www.cisco.com/c/en/us/support/docs/ip/border-gateway-protocol-bgp/13753-25.html 使用的网络拓扑如下：基本配置：每个路由器上配置一个环回口loopback0:xx.1.1.1/32；R4是RR。1. weight 只在本地有效。 a针对邻居修改：原来的bgp路由情况 直接针对邻居修改权重：R3(config-router)#nei 23.1.1.2 weight 1从该邻居得到的条目权重被修改： b.针对特定路由条目通过route-map修改access-list 1 permit 5.5.5.5 //匹配需要修改的BGP路由route-map WE permit 10 //使用route-map修改权重值match ip address 1set weight 2route-map WE permit 20router bgp 200neighbor 13.1.1.1 route-map WE in //在bgp邻居下调用修改后的结果： 2. 本地优先级local preference 通常用于离开本AS的选路 默认为100，ibgp邻居之间会更新本地优先级属性，不会更新给real EBGP 邻居(联邦会更新本地优先级属性) 针对EBGP设置 in方向（常用，选择ASBR） IBGP 设置in 或者out都可以a.全局配置 —-把EBGP 邻居学习到的路由都修改bgp default local-preference 102b. 匹配某条路由，针对邻居设置本地优先级。 修改前： 使用route-map修改本地优先级来影响R1选路：R1(config)#access-list 1 permit 33.1.1.1 /32R1(config)#route-map LO permit 10R1(config-route-map)#match ip address 1R1(config-route-map)#set local-preference 200R1(config)#route-map LO permit 20R1(config)#router bgp 100R1(config-router)#nei 22.1.1.1 route-map LO in 3. origin 本地起源一般看到 next-hop 为0.0.0.0 都是本地注入的本地注入路由 三种方法： network 重分布 aggregate 在R2上新开启一个环回口122.1.1.1/32，宣告进BGP，设置weight为0；同时在R1上配置该环回口的静态路由，重分布进BGP。此时R2优选本地产生的路由。R2(config)#access-list 1 per 122.1.1.1 /32R2(config)#route-map OR permit 10R2(config-route-map)#match ip address 1R2(config-route-map)#set weight 0R2(config)#router bgp 100R2(config-router)#network 122.1.1.1 mask 255.255.255.255 route-map ORR1(config)#ip route 122.1.1.1 255.255.255.255 10.1.1.2R1(config)#router bgp 100R1(config-router)#redistribute static 4. as-path 越短越优先 bgp bestpath as-path ignore//隐含命令，忽略as-path作为选路原则 宣告R3的环回口，R1分别从R2R3学习到该路由，由于ebgp优于ibgp，R1会优选从EBGP（R3）学到的路由 在R1上通过route-map增加从R3得到的路由的as-path，使其优选R2：R1(config)#access-list 1 permit 33.1.1.1 /32R1(config)#route-map AS per 10R1(config-route-map)#matc ip add 1R1(config-route-map)#set as-path prepend 200 200 200 200R1(config)#router bgp 100R1(config-router)#neighbor 13.1.1.3 route-map AS inR1(config-router)#exit 5.起源代码origin codei代表的是network、aggregate引入？代表是重分布引入的路由e代表ebgp引入（已经不用了）IGP&gt;egp&gt;? 删掉上一个route-map，改回之前的状态 在R1通过route-map强制修改从R3得到的路由的起源代码R1(config)#access-list 1 permit 33.1.1.1 /32R1(config)#route-map OR permit 10R1(config-route-map)#match ip address 1R1(config-route-map)#set origin incompleteR1(config-route-map)#router bgp 100R1(config-router)#neighbor 13.1.1.3 route-map OR in 6. MED多出口分离器，越小越优先被称为BGP的Metric，如果BGP通告的从IGP得到的路由，则MED值将继承自IGP的metric通常用于告知ebgp邻居如何进入到本AS 在R3上分别针对R1R2设置一个metric值，当路由更新到R1时，通过前5条无法选出最优路由，此时R1会比较两条bgp路由的MED值，得到最优 R3(config)#route-map R1R3(config-route-map)#set metric 13R3(config-route-map)#exitR3(config)#route-map R2R3(config-route-map)#set metric 12R3(config)#router bgp 200R3(config-router)#neighbor 13.1.1.1 route-map R1 outR3(config-router)#neighbor 23.1.1.2 route-map R2 Out 7.EBGP优于ibgp与管理距离无关。 默认情况下R1和R2从R3和对方同时得到33.1.1.1/32的路由，但都是优选从R3的得到的 8. metric，到达bgp下一跳的IGP的metric默认情况，宣告R3环回口，在R4上看到，他应该是根据route-id选择R1作为最优吓一跳，因为此时在IGP路由表中，R4到达11.1.1.1和22.1.1.1的metric相同，通过前面的选路原则没有选出最优 此时，可以通过更改去往11.1.1.1的metric来干预选路，在R1的lo 0修改cost:R1(config-if)# int lo 0R1(config-if)#ip ospf cost 1000此时R4的igp路由表： R4的bgp选录已经被影响： 9. load balance负载均衡开启ibgp多路径maximum-paths ibgp 4对于ebgp，直接在bgp中开启maximum-paths 4或者maximun-paths eibgp 4对于ibgp负载均衡：还原上一步的操作，还是在r4上 ，bgp路由33.1.1.1下一跳11.1.1.1和22.1.1.1的metric相同，直接在bgp进程下开启：R4(config)#router bgp 100R4(config-router)#maximum-paths ibgp 2结果如下： 对于ebgp负载均衡默认情况下，R3上5.5.5.5的bgp路由优选ebgp邻居建立时间最久的下一跳， 在bgp开启负载均衡：R3(config)#router bgp 200R3(config-router)#maximum-paths 2 10.O older 建立邻居更久的 使用bgp bestpath compare-routerid，可以跳过这条 对于R3,，分别与R1R2建立邻居关系：通过重新建立邻居来重置ebgp邻居R3(config)#router bgp 200R3(config-router)#nei 23.1.1.2 shutR3(config-router)#nei 23.1.1.2 shutOct 29 19:40:10.994: %BGP-5-NBR_RESET: Neighbor 23.1.1.2 reset (Admin. shutdown) Oct 29 19:40:10.999: %BGP-5-ADJCHANGE: neighbor 23.1.1.2 Down Admin. shutdown*Oct 29 19:40:10.999: %BGP_SESSION-5-ADJCHANGE: neighbor 23.1.1.2 IPv4 Unicast topology base removed from session Admin. shutdownR3(config-router)#no nei 23.1.1.2 shut 11.R route-id如果是从RR得到的路由，那么这条路由的router-id会被Originator-id替换，也就说会拿Originator-id和其他路由的router-id作比较。前面说过，在默认情况下， R4上33.1.1.1的最优根据R1，R2的之中较小的route-id选择了11.1.1.1。通过修改R1的bgp router-id来影响选路：修改前： 修改后： 12.C cluster list 簇list长度将R4设置为RR，R1、R5、R6为客户端；R6设置为RR，R5为客户端。这样R5分别从R4和R6学习到33.1.1.1的路由，并且前十条选录原则无法选出最优路由，第十一条router-id由于RR原因被originator id覆盖。此时会根据cluster list长度进行选路： 可以看到，从44.1.1.1得到的路由cluster长度为1，从66.1.1.1得到的路由cluster长度为2，优选44.1.1.113.最小的neighbor 地址","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"nbma.info/tags/网络/"},{"name":"bgp","slug":"bgp","permalink":"nbma.info/tags/bgp/"}]},{"title":"snmp的最大值导致报警问题","slug":"snmp-max-value-notify","date":"un00fin00","updated":"un22fin22","comments":true,"path":"snmp-max-value-notify/","link":"","permalink":"nbma.info/snmp-max-value-notify/","excerpt":"某天下午突然收到一条微信报警：ASA被重启！！","text":"某天下午突然收到一条微信报警：ASA被重启！！ 异常 - 10.1.1.1异常时间 2016.12.11 - 14:10:21 10.1.1.1 reloaded10.1.1.1(10.1.1.1) sysUpTime : 00:04:14 上面的报警信息来自内网的zabbix，调用脚本通过微信公众号推送报警信息；针对所有的网络设备都配置了snmp，来监控一些参数。 检查思路，作为出口设备，如果一旦真的重启，引发的报警信息就不只是一条了，初步判断是误报，登陆ASA也能看到，ASA up 1 year 132 days zabbix上设置的报警的triger是 {10.1.1.1:sysUpTime.last(0)}&lt;600 在思科提供的mib中检查，针对sysuptime的描述如下： the timetick value for system uptime (OID 1.3.6.1.2.1.1.3.0) is a 32-bit value so once the system has been up for 1 year, 132 days, 2 hours, 27 minutes and 52.96 seconds the value will roll to 0 again 也就是说这个值最多记497天，之后会清零重计。 解决方案就是吧sysuptime换成snmpenginetime (.1.3.6.1.6.3.10.2.1.3) ，这个值的最大值可以达到135 years DISMAN-EVENT-MIB::sysUpTimeInstance = Timeticks: (61089443) 7 days, 1:41:34.43 SNMP-FRAMEWORK-MIB::snmpEngineTime.0 = INTEGER: 610894 seconds DISMAN-EVENT-MIB::sysUpTimeInstance = Timeticks: (30173291) 3 days, 11:48:52.91 SNMP-FRAMEWORK-MIB::snmpEngineTime.0 = INTEGER: 43251371 seconds&nbsp;","categories":[],"tags":[{"name":"监控","slug":"监控","permalink":"nbma.info/tags/监控/"}]},{"title":"前缀列表(prefix-list)讲解","slug":"ip-prefix-list","date":"un55fin55","updated":"un22fin22","comments":true,"path":"ip-prefix-list/","link":"","permalink":"nbma.info/ip-prefix-list/","excerpt":"不同于用于匹配流量的IP访问列表，IP前缀列表主要是用来指定具体的网络可达的。前缀列表用来匹配前缀（网段）和前缀长度（子网掩码）。前缀列表有两个参数很难理解。","text":"不同于用于匹配流量的IP访问列表，IP前缀列表主要是用来指定具体的网络可达的。前缀列表用来匹配前缀（网段）和前缀长度（子网掩码）。前缀列表有两个参数很难理解。 下面是普通的前缀列表的参数： ip prefix-list [name] [permit | deny] [prefix]/[len]name为任意的名字或者数字，prefix是指定的路由前缀（网段），len是指定的前缀长度（子网掩码）。例子如下： ip prefix-list LIST permit 1.2.3.0/24 上面的例子中指定匹配网段1.2.3.0，并且指定子网掩码为255.255.255.0，这个列表不匹配1.2.0.0/24，也不匹配1.2.3.4/32 ip prefix-list LIST permit 0.0.0.0/0 上面的例子指定匹配网段0.0.0.0和子网掩码0.0.0.0。这个列表用来匹配默认路由。 通常情况下，在使用前缀列表的时候加上“GE”（大于或等于）和“LE”（小于或等于）时比较容易发生混淆。这是因为当使用“GE”和“LE”时，列表的长度(len)发生了改变。 另外一种前缀列表的参数： ip prefix-list [name] [permit | deny] [prefix]/[len] ge [min_length] le [max_length] name为任意的名字或者数字，prefix是将要进行比较的路由前缀（网段），len是指从最左边开始的比特位，min_length为最小的子网掩码的值，max_length为最大的子网掩码的值 使用GE和LE，必须满足下面的条件： len &lt; GE &lt;= LE 上面的参数很容易混淆，简单的说就是一个匹配前缀或子网的地址的范围。 看下面的例子： ip prefix-list LIST permit 1.2.3.0/24 le 32 上面的例子表示前缀1.2.3.0前面的24位必须匹配。此外，子网掩码必须小于或等于32位 ip prefix-list LIST permit 0.0.0.0/0 le 32 上面的例子意味着0位需要匹配，此外子网掩码必须小于或等于32位。一位所有的网段的掩码都小于或等于32位，并且一位都不用匹配，所以这句话等于permit any ip prefix-list LIST permit 10.0.0.0/8 ge 21 le 29 上面的例子说明网段10.0.0.0的前8位必须匹配，此外子网掩码必须在21位和29位之间。 注意： 使用前缀列表不能像访问列表那样匹配具体的应用流。前缀列表也不能用来具体匹配奇数或偶数的前缀，或什么可以被15整除的前缀在前缀列表中，比特位必须是连续的，并且从左边开始ip prefix-list fuck permit 0.0.0.0/0 ge 1 表示除了默认路由外的所有路由ip prefix-list test16 seq 5 permit 0.0.0.0/1 ge 8 le 8 配置A类地址ip prefix-list test16 seq 10 permit 128.0.0.0/2 ge 16 le 16 配置B类地址ip prefix-list test16 seq 15 permit 192.0.0.0/3 ge 24 le 24 配置C类地址 Exercises: 1. Construct a prefix list that permits only the 192.168.1.0/24 network. ip prefix-list test1 seq 5 permit 192.168.1.0/24 2. Construct a prefix list that denies network 119.0.0.0, and permits allother prefixes (including all subnets of 119.0.0.0). ip prefix-list test2 seq 5 deny 119.0.0.0/8ip prefix-list test2 seq 10 permit 0.0.0.0/0 le 32 3. Construct a prefix list that permits only the default route. ip prefix-list test3 seq 5 permit 0.0.0.0/0 4. Construct a prefix list the permits everything except the default route. ip prefix-list test4 seq 5 deny 0.0.0.0/0ip prefix-list test4 seq 10 permit 0.0.0.0/0 le 32 5. Construct a prefix list that permits network 172.16.0.0 and any of itssubnets, and denies all other prefixes. ip prefix-list test5 seq 5 permit 172.16.0.0/16 le 32 6. Construct a prefix list that permits only the following prefixes:10.2.8.32/2710.2.8.32/2810.2.8.32/2910.2.8.32/30 ip prefix-list test6 seq 5 permit 10.2.8.32/27 le 30 7. Construct a prefix list that: Permits 197.25.94.128/25Denies 197.25.94.192/26Permits 197.25.94.224/27Denies 197.25.94.240/28Permits 197.25.94.248/29Denies 197.25.94.252/30Permits all other prefixes, except for 198.82.0.0/16 ip prefix-list test7 seq 5 deny 197.25.94.192/26ip prefix-list test7 seq 10 deny 197.25.94.240/28ip prefix-list test7 seq 15 deny 197.25.94.252/30ip prefix-list test7 seq 20 deny 198.82.0.0/16ip prefix-list test7 seq 25 permit 0.0.0.0/0 le 32 8. Construct a prefix list that permits any prefix matching the first 20bits of 175.29.64.0 which has a mask of at least /26 but not exceeding /29,and denies all other prefixes. ip prefix-list test8 seq 5 permit 175.29.64.0/20 ge 26 le 29 9. Construct a prefix list that denies any prefix matching the first 19bits of 15.26.96.0 with any mask up to and including /32, and permits anyother prefix. ip prefix-list test9 seq 5 deny 15.26.96.0/19 le 32ip prefix-list test9 seq 10 permit 0.0.0.0/0 le 32 10. Construct a prefix list that denies the RFC 1918 private networks andany of their subnets, and permits everything else. ip prefix-list test10 seq 5 deny 10.0.0.0/8 le 32ip prefix-list test10 seq 10 deny 172.16.0.0/12 le 32ip prefix-list test10 seq 15 deny 192.168.0.0/16 le 32ip prefix-list test10 seq 20 permit 0.0.0.0/0 le 32 11. Construct a prefix list that permits any subnet of network 15.0.0.0(but not the network), and denies everything else. Your router lies withinAS 65011. Place the prefix list in service in the inbound direction withBGP neighbor 1.2.3.4. ip prefix-list test11 seq 5 permit 15.0.0.0/8 ge 9 To place it in service:router bgp 65011neighbor 1.2.3.4 prefix-list test11 in 12. Construct a prefix list that denies 162.56.0.0/16 and all of itssubnets (with the exception of 162.56.209.208/29, which is permitted), andpermits all other prefixes. Your router lies within AS 65012. Place theprefix list in service in the outbound direction with its BGP neighborhaving address 5.6.7.8. ip prefix-list test12 seq 5 permit 162.56.209.208/29ip prefix-list test12 seq 10 deny 162.56.0.0/16 le 32ip prefix-list test12 seq 15 permit 0.0.0.0/0 le 32 To place it in service:","categories":[],"tags":[]},{"title":"Cisco交换机恢复出厂设置方法","slug":"cisco-switch-reconvery-factory","date":"un55fin55","updated":"un22fin22","comments":true,"path":"cisco-switch-reconvery-factory/","link":"","permalink":"nbma.info/cisco-switch-reconvery-factory/","excerpt":"一、通过命令恢复出厂设置 1、delete vlan.dat delete config.text reload","text":"一、通过命令恢复出厂设置 1、delete vlan.dat delete config.text reload Compiled Wed 20-Jul-11 06:23 by prod_rel_team 回车 Would you like to enter the initial configuration dialog? [yes/no]: n 2、delete vlan.dat erase startup-config(与write erase命令效果一样) reload Compiled Wed 20-Jul-11 06:23 by prod_rel_team 回车 Would you like to enter the initial configuration dialog? [yes/no]: n 二、硬恢复出厂设置 1、如果忘记密码，断电重启，按住mode键10s左右，进入rommon模式； 2、长按MODE键12秒钟左右，下面三个灯闪,然后,第二,第三个灯变成橙色,松开自动重启(这样会恢复出厂设置)。 附：新购交换机进入Web页面并进行配置方法： 新购的思科交换机往往都没有说明书，要进行初始化配置，一般都需要专业的网络工程师，通过用CISCO随机带CONSOLE线,一端连在CISCO交换机的CONSOLE口,一端连在计算机的COM口进行设置，这个我们下次再谈，先谈谈菜鸟级的配置。 实际上思科 Catalyst 2950/2960 已经具备了WEB的初始化设置功能，只是没有说明书或者是全英文的说明书，很多人不太了解，我们现在就讲讲这个，以方便非网络专业人员学习和设置。 第一步：先把交换机断电，再接通电源，各LED灯会依次不停的闪烁，等待3分钟。 第二步：等各LED灯无变化后，按下MODE按钮3-4秒不松，待MODE按钮上面的LED灯全亮后松开MODE按钮 这个时候，交换机已经进入了设置状态 第三步：将你的计算机网卡设置为自动获取IP地址，并打开DHCP 第四步：将网络线（直通线）一头接到计算机的网卡，另一头接到交换机的1X口，（注意：一定要1X入口，其他口不行） 这个时候你可以在计算机输入命令，CMD / ipconfig 你可以发现，你计算机取到的ip地址是 10.0.0.2 如果不是，请重新从第一步开始。 第五步：打开计算机的浏览器，输入10.0.0.1 即可出现交换机的配置窗口，我的2960配置窗口居然还是全中文的，好爽。 第六步：依次按说明输入交换机的ip地址、子网掩码、网关、交换机名称、密码，以及远程telnet管理密码，点提交即可。 第七步：交换机将重新启动，按新的ip连接交换机即可。","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"nbma.info/tags/网络/"}]},{"title":"chrome在使用idrac6出现“失败 已屏蔽的错误”","slug":"chrome-idrac6-fail-error","date":"un44fin44","updated":"un22fin22","comments":true,"path":"chrome-idrac6-fail-error/","link":"","permalink":"nbma.info/chrome-idrac6-fail-error/","excerpt":"出于安全上的考虑，会使用内网IP作为IPMI的管理IP，然后通过ssh的隧道或者xshell的隧道翻墙进行IPMI的管理。","text":"出于安全上的考虑，会使用内网IP作为IPMI的管理IP，然后通过ssh的隧道或者xshell的隧道翻墙进行IPMI的管理。 偶尔会遇到一个问题，就是下载的jnlp文件被chrome屏蔽，转用firefox则会报错”update title error”，一直未能解决。怀疑过idrac的固件版本，比对同组几台尝试更新固件未有结论。因为要用到java的虚拟介质来进行一些重装的操作，得想办法解决。返回到问题现象：检查被屏蔽以及正常下载open的文件之间的差别：https://10.10.10.61/viewer.jnlp(10.10.10.61@0@idrac-99MC53X%2C+PowerEdge+R610%2C+%u7528%u6237%uFF1Aroot@1476947550673) https://10.10.10.51/viewer.jnlp(10.10.10.51@0@idrac-H7SB33X%2C+PowerEdge+R610%2C+%26%2329992%3B%26%2325143%3B%26%2365306%3Broot@1476947000322) 似乎除了后面括号里的一些参数差异之外没有其他不同，尝试将正常的一些参数替代到被屏蔽的url，可以下载但是打开提示超时了。嗯?似乎这个方式可以绕过chrome的某些检测，继续尝试，终于发现了一个方式：打开一个正常的jnlp查看这个文件的名称，将其IP修改为被屏蔽的IP，比如将51修改为61.在浏览器打开（确认代理设置），确认可下载，解决。 这个解决方法应该是绕过了chrome的检测（不清楚chrome这个安全策略到底如何绕过。。）。而且从实际测试上看，chrome应该是对java的相关策略支持最好的。","categories":[],"tags":[]},{"title":"面试到最后，该反过来问面试官一个问题了","slug":"interview-question","date":"un11fin11","updated":"un22fin22","comments":true,"path":"interview-question/","link":"","permalink":"nbma.info/interview-question/","excerpt":"当面试快完的时候你跟着常会被问到：你有什么问题需要问我的吗？之前的一切准备都是为了给面试官一个深刻的印象，现在你脑海却一片空白了！有很多问题其实是很值得你向面试官提出来的特别是那些事后回想起来觉得 “如果当时自己问了该问题该多好啊”的问题。","text":"当面试快完的时候你跟着常会被问到：你有什么问题需要问我的吗？之前的一切准备都是为了给面试官一个深刻的印象，现在你脑海却一片空白了！有很多问题其实是很值得你向面试官提出来的特别是那些事后回想起来觉得 “如果当时自己问了该问题该多好啊”的问题。&nbsp;1. 你们招聘这个职位的原因是什么？对方的回答也许并不一定意义非凡， 但，从中你会知道究竟他们招聘这个职位是否是因为有人离开了所以需要你进来填补空缺。 该员工因何故而出走呢？或者说该公司是否正处于一个上升通道中所以需要投入更多的人员？ 这些都是你可能（应该？）提前知道的信息。 相比招聘信息列出来的岗位信息，通过这个问题还会让你得到更多特别的信息。2. 贵公司的增长模式是什么？ 即使给你提供一份非常可观的基本工资的公司也比不上一个拥有着一个切实可行的增长模式的公司更有吸引力 （以小米为例子，如果当时雷军在黄章麾下工作，充其量也就做个好的职业经理人拿分优厚的薪水而已）。 3. 我需要/能够怎么做才可以直接为我们公司的增长和收益做贡献呢？ 在一个公司打工，需要完成一大堆繁杂的事情往往是在所难辨的了。 作为整个公司运作机器的一个齿轮，你往往会陷入在这堆繁杂的琐事上面。 但同时你也想要去知道和发现所有可以让你在公司更上一层楼的机会。 这会让你尽早的为往后的管理之路打好基础。 4. 公司将为我个人技术提升和在公司的重要性提供怎么样的机会呢？ 没有人愿意为同一岗位反反复复停滞不前的消耗10年光阴。 在一个小公司里面你将很有可能/也许会处于一个机动的岗位上面。 也有很多公司会提供（或者强制）一些参加峰会的机会给员工来作为对员工技术的投资。 如果你热爱学习和到处跑（去参加不同峰会）的话，这也许是一件很值得留意的事情。 5. 这次面试我还有哪些需要提高的方面吗？ 这个问题是在 Hacker News 上面提及的， 我个人非常喜欢这个问题。 无论该面试进行的是好是坏， 这都是一个很好的问题。 谁不需要成长和学习呢？ &nbsp; 好的，以上就是我带给大家的面试尾声应该问你的面试官的问题了。 这些都是我最近思考的结晶。 很明显你也许和我的兴趣/目标不一致， 但至少这写问题都会给你相应的帮助或者会带给处于类似情况你相应的灵感。 &nbsp; 再次提一下，热切期望你能在评论中留下你对这个问题的想法！ &nbsp; “你会对一个正在招聘员工或实习生的公司问出什么样的问题呢？”","categories":[],"tags":[]},{"title":"csico2911/k9激活securityk9的license","slug":"csico2911k-securityk9-license","date":"un44fin44","updated":"un22fin22","comments":true,"path":"csico2911k-securityk9-license/","link":"","permalink":"nbma.info/csico2911k-securityk9-license/","excerpt":"新买了一台2911/K9，不带security功能，找公司买了个license，激活过程如下","text":"新买了一台2911/K9，不带security功能，找公司买了个license，激活过程如下 一、需要具备的东西1. securityk9的license文件：xxxxxxx.lic 2.一台思科2911/K9 3.网线 激活步骤1.PC开启TFTP服务2。将license拷到路由器中router#copy tftp flash0: 按提示输入tftp地址、文件名。然后确认即可 3.安装router#licence install flash0:xxxxxxx.lic 4.安装完成，reload之后show version安装前：12345678910------------------------------------------------------------------------Technology Technology-package Technology-packageCurrent Type Next reboot------------------------------------------------------------------------ipbase ipbasek9 Permanent ipbasek9&lt;span style=&quot;color: #ff0000;&quot;&gt;security None None None&lt;/span&gt;uc None None Nonedata None None NoneNtwkEss None None NoneCollabPro None None None 安装reload后：123456789101112Technology Package License Information for Module:&apos;c2900&apos;------------------------------------------------------------------------ Technology Technology-package Technology-package Current Type Next reboot ------------------------------------------------------------------------ ipbase ipbasek9 Permanent ipbasek9 &lt;span style=&quot;color: #ff0000;&quot;&gt;security securityk9 Permanent securityk9&lt;/span&gt; uc None None None data None None None NtwkEss None None None CollabPro None None None","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"nbma.info/tags/网络/"}]},{"title":"GNS3模拟ASA8.4(2)激活license","slug":"gns3-asa842-license","date":"un11fin11","updated":"un22fin22","comments":true,"path":"gns3-asa842-license/","link":"","permalink":"nbma.info/gns3-asa842-license/","excerpt":"正常情况下，用GNS3模拟ASA8.4，模拟出来的系统failover、VPN-DES、VPN-3DES-AES功能是disabled的。需要用liences激活，激活过程如下：","text":"正常情况下，用GNS3模拟ASA8.4，模拟出来的系统failover、VPN-DES、VPN-3DES-AES功能是disabled的。需要用liences激活，激活过程如下： show ver可以看到没激活的功能： ciscoasa(config)# show ver Cisco Adaptive Security Appliance Software Version 8.4(2) Compiled on Wed 15-Jun-11 18:17 by buildersSystem image file is “Unknown, monitor mode tftp booted image”Config file at boot was “startup-config” ciscoasa up 1 hour 13 mins Hardware: ASA 5520, 512 MB RAM, CPU Pentium II 1000 MHzInternal ATA Compact Flash, 256MBBIOS Flash unknown @ 0x0, 0KB0: Ext: GigabitEthernet0 : address is 0000.aba3.be00, irq 01: Ext: GigabitEthernet1 : address is 0000.aba3.be01, irq 02: Ext: GigabitEthernet2 : address is 0000.aba3.be02, irq 03: Ext: GigabitEthernet3 : address is 0000.aba3.be03, irq 0 Licensed features for this platform:Maximum Physical Interfaces : Unlimited perpetualMaximum VLANs : 100 perpetualInside Hosts : Unlimited perpetualFailover : Disabled perpetualVPN-DES : Disabled perpetualVPN-3DES-AES : Disabled perpetualSecurity Contexts : 0 perpetualGTP/GPRS : Disabled perpetualAnyConnect Premium Peers : 5000 perpetualAnyConnect Essentials : Disabled perpetualOther VPN Peers : 5000 perpetualTotal VPN Peers : 0 perpetualShared License : Disabled perpetualAnyConnect for Mobile : Disabled perpetualAnyConnect for Cisco VPN Phone : Disabled perpetualAdvanced Endpoint Assessment : Disabled perpetualUC Phone Proxy Sessions : 2 perpetualTotal UC Proxy Sessions : 2 perpetualBotnet Traffic Filter : Disabled perpetualIntercompany Media Engine : Disabled perpetual This platform has an ASA 5520 VPN Plus license. Serial Number: 123456789ABRunning Permanent Activation Key: 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000Configuration register is 0x0Configuration last modified by enable_15 at 08:15:56.899 UTC Mon Feb 29 2016 &nbsp; 进入config模式，输入license ciscoasa(config)# activation-key 0x4a3ec071 0x0d86fbf6 0x7cb1bc48 0x8b48b8b0 0$Validating activation key. This may take a few minutes…Failed to retrieve permanent activation key.Failover is different.running permanent activation key: Restricted(R)new permanent activation key: Unrestricted(UR)WARNING: The running activation key was not updated with the requested key.Proceed with update flash activation key? [confirm]The flash permanent activation key was updated with the requested key,and will become active after the next reload.ciscoasa(config)# activation-key 0xb23bcf4a 0x1c713b4f 0x7d53bcbc 0xc4f8d09c 0$Validating activation key. This may take a few minutes…Failover is different.running permanent activation key: Restricted(R)new permanent activation key: Unrestricted(UR)WARNING: The running activation key was not updated with the requested key.Proceed with update flash activation key? [confirm]The flash permanent activation key was updated with the requested key,and will become active after the next reload.ciscoasa(config)# reload 重启之后： ciscoasa# show version Cisco Adaptive Security Appliance Software Version 8.4(2) Compiled on Wed 15-Jun-11 18:17 by buildersSystem image file is “Unknown, monitor mode tftp booted image”Config file at boot was “startup-config” ciscoasa up 11 secs Hardware: ASA 5520, 512 MB RAM, CPU Pentium II 1000 MHzInternal ATA Compact Flash, 256MBBIOS Flash unknown @ 0x0, 0KB0: Ext: GigabitEthernet0 : address is 0000.ab2c.3a00, irq 01: Ext: GigabitEthernet1 : address is 0000.ab2c.3a01, irq 02: Ext: GigabitEthernet2 : address is 0000.ab2c.3a02, irq 03: Ext: GigabitEthernet3 : address is 0000.ab2c.3a03, irq 0 Licensed features for this platform:Maximum Physical Interfaces : Unlimited perpetualMaximum VLANs : 100 perpetualInside Hosts : Unlimited perpetualFailover : Active/Active perpetualVPN-DES : Enabled perpetualVPN-3DES-AES : Enabled perpetualSecurity Contexts : 5 perpetualGTP/GPRS : Disabled perpetualAnyConnect Premium Peers : 25 perpetualAnyConnect Essentials : Disabled perpetualOther VPN Peers : 5000 perpetualTotal VPN Peers : 0 perpetualShared License : Enabled perpetualAnyConnect for Mobile : Disabled perpetualAnyConnect for Cisco VPN Phone : Disabled perpetualAdvanced Endpoint Assessment : Enabled perpetualUC Phone Proxy Sessions : 10 perpetualTotal UC Proxy Sessions : 10 perpetualBotnet Traffic Filter : Enabled perpetualIntercompany Media Engine : Enabled perpetual This platform has an ASA 5520 VPN Plus license. Serial Number: 123456789ABRunning Permanent Activation Key: 0xb23bcf4a 0x1c713b4f 0x7d53bcbc 0xc4f8d09c 0x0e24c6b6Configuration register is 0x0Configuration has not been modified since last system restart.ciscoasa# 已激活 下面是两个license: 用这两条命令分两次激活，第一次很快，第二次很慢，估计需要六七分钟。 activation-key 0x4a3ec071 0x0d86fbf6 0x7cb1bc48 0x8b48b8b0 0xf317c0b5activation-key 0xb23bcf4a 0x1c713b4f 0x7d53bcbc 0xc4f8d09c 0x0e24c6b6","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"nbma.info/tags/网络/"},{"name":"asa","slug":"asa","permalink":"nbma.info/tags/asa/"}]},{"title":"ASA告警，cpu98%","slug":"asa-cpu98","date":"un22fin22","updated":"un22fin22","comments":true,"path":"asa-cpu98/","link":"","permalink":"nbma.info/asa-cpu98/","excerpt":"某天上午10点半，网络报警，服务器上不了，连接网络设备卡顿严重，网络告急！！！","text":"某天上午10点半，网络报警，服务器上不了，连接网络设备卡顿严重，网络告急！！！ 打开ASDM发现现象如下：CPU98%、ouside口out方向流量打满。分析如下： 1.ASA的cpu98%。第一反应：关闭log、关闭snmp。没有反应， cpu正常是在10%以内。 2. 查看接口流量，out方向流量能说明流量来自内部，定位源头区域。锁定inside。 3.登录到下级交换机，查看接口流量，show interface coun 查看每个接口的流速，定位接口。e0/5的流量特别大。锁定e0/5。 4.查看e0/5学习到的mac，有2个。定位主机：1台是web测试机，1台是xx公司的web服务器。 5.查看2台服务器的进程，2台都是linux的系统。web测试机，没有什么进程，处于闲置状态。基本可以排除。把它重启一下，在这过程中，ASA的cpu始终没有下降。所以，完全肯定不是它。真凶是：xx公司的web服务器。 6.验证真凶：重启xx公司的web服务器，ASA的cpu立马下降到3%。果不出其然。 7.导出xx公司的web服务器的log，好好分析原因吧！","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"nbma.info/tags/网络/"},{"name":"asa","slug":"asa","permalink":"nbma.info/tags/asa/"}]},{"title":"通过站对站的ipsec vpn无法ping通ASA的inside口","slug":"ipsec-vpn-ping-asa-inside","date":"un22fin22","updated":"un22fin22","comments":true,"path":"ipsec-vpn-ping-asa-inside/","link":"","permalink":"nbma.info/ipsec-vpn-ping-asa-inside/","excerpt":"正常情况下，ASA只允许相应方向的地址ping对应的接口，公网地址能ping通ouside口，内部直连inside网段可以ping通inside口. 某公司在A/B两个IDC机房之间通过两台ASA配置了ipsec vpn，并且在A机房部署了zabbix监控，通过私有地址监控网络状态","text":"正常情况下，ASA只允许相应方向的地址ping对应的接口，公网地址能ping通ouside口，内部直连inside网段可以ping通inside口. 某公司在A/B两个IDC机房之间通过两台ASA配置了ipsec vpn，并且在A机房部署了zabbix监控，通过私有地址监控网络状态 在配置B机房的ASA监控时，从zabbix服务器无法ping到B机房的ASA inside口，查询思科文档发现如下文字： Ping 其他接口management-access 命令使用户只有在使用全通道 IPSec VPN 或 SSL VPN 客户端（AnyConnect 2.x 客户端 SVC 1.x）或通过站点到站点 IPSec 通道连接到 PIX/ASA 时，才可以从外部连接到 management-access 接口。 除非已在全局配置模式下配置了 management-access，否则无法从外部访问 PIX 的内部接口，反之亦然。启用了 management-access 之后，必须为所需的主机配置 Telnet、SSH 或 HTTP 访问。 pix(config)#management-access insidepix(config)#show running-config management-accessmanagement-access inside注意： 对于ASA， ICMP类型的127以下硬编码不可能被关闭的检查。当开/关时， icmp命令的Inspect没有在此检查的影响。 注意： 发送在参考已经未横断ASA的数据包的ASA间的一种方式的目的地不可达消息将被标记并且被终止。此防护能力不可能被关闭。按上面叙述，在B机房ASA全局模式下，配置对应命令保存。 zabbix监控生效！ 9ps@C","categories":[],"tags":[]},{"title":"2015年的最后一天","slug":"2015-last-day","date":"un44fin44","updated":"un22fin22","comments":true,"path":"2015-last-day/","link":"","permalink":"nbma.info/2015-last-day/","excerpt":"有两年没写每年的最后一天了，","text":"有两年没写每年的最后一天了， 最近刚找了工作，上了四天班，一直想找时间总结一些今天的得失。现在距离下班还有半个小时，刚好趁现在总结一下。20114年底的时候，离开银川，回家处理了户口的事情，然后就匆匆北上，一个扛着行李来北京，第一次坐北京的地铁，从西站出来，走了一站路到10号线的什么站上车，忘了叫什么名字了。总之是被百度地图的导航坑了，我都不知道还有9号线。然后去我哥租的地方，出地铁好像还走错了方向，12月20号，那天早上还挺冷的。之后花了一个月的时间，咨询了比较有名的几家培训机构，最终还是没有决定是不是培训CCIE，然后同时还面试了N多公司，一个月，去了四惠东、海淀黄庄、知春路、上地、中央电视台、世贸天阶。以最快的速度熟悉了北京。1月19号，在魏公村，一次面试通过，给了一个比我期望还高的工资，然后第二天入职，开始了我北漂的第一份工作，从魏公村到知春路、再到人民大学、再到安联大厦、再到华彬大厦、终于金地中心，这一份工作的职场变动路线，我想再遇不到这样的工作了。入职第一周工资上涨50%、一个月不到换了三个地方，然后开始着手组建属于自己的IT支持团队，进入自己最熟悉的状态，学习各种知识，接触各种高科技产品维护，超规模的IT支持，环幕融合投影，手势互动设备，3d立体投影，人体动态跟踪设备、华为视频会议设备等等，分析对比各类工单协作系统、最终组成20多人的团队，申请配行政编制，差点就要独立部门，然后卷入公司内部派系斗争。被折腾的死去活来还抱有一丝希望。一直持续到12月份，公司以迅雷不及掩耳之势一天之内倒闭。2015年的尾声就这么近了。在家休息了几天，缓解一下这一年一直单休还经常加班的紧绷神经，重新踏上征程。12月28日跨年前四天，入职新公司。2015，再见2016，你好1月1日，丹哈加班，心疼","categories":[],"tags":[]},{"title":"华为USG6000防火墙L2TP over IPSec配置","slug":"usg6000-l2tp-over-ipsec","date":"un00fin00","updated":"un22fin22","comments":true,"path":"usg6000-l2tp-over-ipsec/","link":"","permalink":"nbma.info/usg6000-l2tp-over-ipsec/","excerpt":"","text":"马克http://www.huawei.com/ecommunity/bbs/10216483.html【组网需求】如图下所示，公司通过USG5500（V3R1版本）连接Internet。公司希望出差员工能够使用手机（3G/4G）接入公司内部网络，实现安全、高效的移动办公。http://support.huawei.com/ecommunity/bbs/10246004.htmlhttp://support.huawei.com/enterprise/productsupport?lang=zh&amp;pid=8661805&amp;idAbsPath=7919710|9856724|21430823|21100508|8661805","categories":[],"tags":[]},{"title":"文昌北街的日子","slug":"wenchangbeijiederizi-trashed","date":"un11fin11","updated":"un22fin22","comments":true,"path":"wenchangbeijiederizi-trashed/","link":"","permalink":"nbma.info/wenchangbeijiederizi-trashed/","excerpt":"文昌北街的日子","text":"文昌北街的日子 开始的开始 我们都是孩子最后的最后 渴望变成天使歌谣的歌谣 藏着童话的影子孩子的孩子 该要飞往哪儿去 当某天 你若听见老同学说起共同的怀念当某天 你若看见满眼的回忆都是那几年当某天 再回首曾经那青涩懵懂的朋友当某天 再相见开心哭泣的那些表情冻结时间的流年 真的 从后湖到学院的距离原来只有四年到底 我们分别后是否陌生将无缘相见四级高数离散都搞不懂 还有C语言曾经火爆排队的清真拉面 卖几块几毛钱我们穿上西装假装成长 胶片挥霍习惯的笑脸悲伤一发 寂寞唏嘘 痛的初体验离别和追梦的瞬间 定格美丽画面拥抱彼此的感伤 我们会微笑走远 一年后 你若听见有人在说要去学委的婚宴十年后 你若看见勇敢的经哥骑车去冒险 表示 从南门到北门的距离短短只有四年感叹 清真三楼盖饭的涨价不是一点点微博八卦谣言都在一起 网二最正点各种曾经狂热的刀塔岁月 我们一起到深夜我们悠悠相聚匆匆离去 天南海北不同地点唱起这首歌来 还会记得那模糊的岁月思科红帽JAVA大神 网二我爱你也或许 谁会忘记谁的名字但记得文昌北街的日子 开始的开始 我们都是孩子最后的最后 渴望变成天使歌谣的歌谣 藏着童话的影子孩子的孩子 该要飞往哪儿去","categories":[],"tags":[]},{"title":"流量劫持 —— 浮层登录框的隐患","slug":"danger-behind-popup-login-dialog","date":"un11fin11","updated":"un22fin22","comments":true,"path":"danger-behind-popup-login-dialog/","link":"","permalink":"nbma.info/danger-behind-popup-login-dialog/","excerpt":"## 传统的登录框在之前的文章流量劫持危害详细讲解了 HTTP 的高危性，以至于重要的操作都使用 HTTPS 协议，来保障流量在途中的安全。","text":"## 传统的登录框在之前的文章流量劫持危害详细讲解了 HTTP 的高危性，以至于重要的操作都使用 HTTPS 协议，来保障流量在途中的安全。 这是最经典的登录模式。尽管主页面并没有开启 HTTPS，但登录时会跳转到一个安全页面来进行，所以整个过程仍是比较安全的 —— 至少在登录页面是安全的。 对于这种安全页面的登录模式，黑客硬要下手仍是有办法的。在之前的文章里也列举了几种最常用的方法：拦截 HTTPS 向下转型、伪造证书、跳转钓鱼网站。 其中转型 HTTPS 的手段最为先进，甚至一些安全意识较强的用户也时有疏忽。 然而，用户的意识和知识总是在不断提升的。尤其在如今各种网上交易的时代，安全常识广泛普及，用户在账号登录时会格外留心，就像过马路时那样变得小心翼翼。 久而久之，用户的火眼金睛一扫地址栏即可识别破绽。 因此，这种传统的登录模式，仍具备一定的安全性，至少能给用户提供识别真假的机会。 华丽的登录框不知从何时起，人们开始热衷在网页里模仿传统应用程序的界面。无论控件、窗口还是交互体验，纷纷向着本地程序靠拢，效果越做越绚。 然而华丽的背后，其本质仍是一个网页，自然掩盖不了网页的安全缺陷。 当网页特效蔓延到一些重要数据的交互 —— 例如账号登录时，风险也随之产生。因为它改变了用户的使用习惯，同时也彻底颠覆了传统的意识。 乍一看，似乎也没什么问题。虽然未使用登录页跳转，但数据仍通过 HTTPS 传输，途中还是无法被截获。 HTTP 页面用 HTTPS 有意义吗？如果认为这类登录框没什么大问题，显然还没领悟到『流量劫持』的精髓 —— 流量不是单向的，而是有进也有出。 能捕获你『出流量』的黑客，大多也有办法控制你的『入流量』。这在流量劫持第一篇里也详细列举了。 使用 HTTPS 确实能保障通信的安全。但在这个场合里，它只能保障『发送』的数据，对于『接收』的流量，则完全不在其保护范围内。 因为整个登录框都当作『虚拟窗口』嵌套在主页面里的，因此其中的一切都在同个页面环境里。而主页面使用的仍是不安全的 HTTP 协议，所以注入的 XSS 代码能轻而易举的控制登录框。 当然，或许你会说这只是设计缺陷。若是直接嵌入 HTTPS 登录页的 iframe 框架，那就会因同源策略而无法被 XSS 控制了。 这样的改进确实能提高一些安全性，但也只是略微的。既然我们能控制主页面，里面显示什么内容完全可以由 XSS 说了算。不论什么登录框、框架页，甚至安全插件，我们都可以将其删除，用看起来完全相同的文本框代替。得到账号后，通过后台反向代理实现登录，然后通知前端脚本伪造一个登录成功的界面。 所以，HTTPS 被用在 HTTP 页面里，意义就大幅下降了。 和『缓存投毒』配合出击在流量劫持第二篇里提到『HTTP 缓存投毒』这一概念，只要流量暂时性的被劫持，都可导致缓存长期感染。但这种攻击有个前提，必须事先找到站点下较稳定的脚本资源，做投毒的对象。 传统登录在传统的登录模式里，缓存投毒非常难以利用： HTTPS 资源显然无法被感染。 而使用 HTTPS 向下转型的方案，也会因为离开劫持环境，而无法访问中间人的 HTTP 版登陆页面，导致缓存失效；或者这个真实的 HTTP 版的登录页面根本就不接受你的本地缓存，直接重定向到正常的 HTTPS 页面。 因此只有在主页面上，修改链接地址，让用户跳转到钓鱼网站去登录，才能勉强利用。 浮层登录制作一个精良的浮层登录框，需要不少的界面代码，所以经常引用 jQuery 这类通用脚本库。而这些脚本往往是长久不会修改的，因此是缓存投毒的绝好原料。 所以，浮层登录框的存在，让『缓存投毒』有了绝佳的用武之地。 在之前的文章 WiFi流量劫持 —— JS脚本缓存投毒，演示了如何利用 www.163.com 下的某个长缓存脚本进行投毒，最终利用网易的浮层登录框获取账号。尽管网易也使用 HTTPS 传输账号数据，但在流量攻击面前不堪一击。 尽管这种登录模式风险重重，但最近百度也升级成浮层登录框，并且还是所有产品。所以，我们再次尝试那套的古老方法，看看在如今是否仍能发起攻击。 我们选几个最常用的产品线，进行一次缓存扫描： 果然，每个产品线里都有长期未修改、并且缓存很久的脚本库。 接着开启我们的钓鱼热点，让前来连接的用户，访问任何一个页面都能中毒。 为了让钓鱼热点更隐蔽，这次我们不再使用路由器，而是利用报废的安卓手机（下一篇文章详细讲解如何实现）。 为了不影响附近办公，本文就不演示同名热点钓鱼了，所以随便取了个名字。 接着让『受害者』来连一下我们的热点： 之前正好开着网页，所以很快收到了 HTTP 请求。我们在任何网页里注入 XSS，进行缓存投毒。 （由于原理和之前讲一样，所以这里就省略步骤了） 然后重启电脑，连上正常的 WiFi（模拟用户回到安全的场合）。 打开 tiebai.baidu.com，一切正常。 开始登录了。。。 看看这种浮层登录框，能否躲避我们的从沉睡中唤起的 XSS 脚本： 奇迹依然发生！ 由于之前有过详细的原理讲解，因此这里就不再累述了。不过在实战中，缓存投毒+非安全页面登录框，是批量获取明文账号的最理想手段。 不可逆的记忆如果现在再将登录模式换回传统的，还来得及吗？显然，为时已晚。 当网站第一次从传统登录，升级到浮层登录时，用户大多不会立即输入，而是『欣赏』下这个新版本的创意。确认不是病毒广告弹出的窗口，而是真的官方设计的，才开始登录。 当用户多次使用浮层登录框之后，慢慢也就接受了这种新模式。 即使未来，网站取消了浮层登录，黑客使用 XSS 创建一个类似的浮层，用户仍会毫不犹豫的输入账号。因为在他们的记忆里，官方就曾使用过，仍然保留着对其信任度。 安全性升级既然这个过程是不可逆的，撤回传统模式意义也不大。事实上，使用浮层的用户体验还是不错的，对于不了解安全性的用户来说，还是喜欢华丽的界面。 要保留体验，又得考虑安全性，最好的解决方案就是将所有的页面都使用 HTTPS，将站点武装到牙齿，不留一丝安全缝隙。这也是未来网站的趋势。 &lt;/div&gt;","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"nbma.info/tags/网络/"},{"name":"安全","slug":"安全","permalink":"nbma.info/tags/安全/"}]},{"title":"流量劫持能有多大危害？","slug":"traffic-hijack-2","date":"un55fin55","updated":"un22fin22","comments":true,"path":"traffic-hijack-2/","link":"","permalink":"nbma.info/traffic-hijack-2/","excerpt":"上一篇文章，介绍了常见的流量劫持途径。然而无论用何种方式获得流量，只有加以利用才能发挥作用。 不同的劫持方式，获得的流量也有所差异。DNS 劫持，只能截获通过域名发起的流量，直接使用 IP 地址的通信则不受影响；CDN 入侵，只有浏览网页或下载时才有风险，其他场合则毫无问题；而网关被劫持，用户所有流量都难逃魔掌。","text":"上一篇文章，介绍了常见的流量劫持途径。然而无论用何种方式获得流量，只有加以利用才能发挥作用。 不同的劫持方式，获得的流量也有所差异。DNS 劫持，只能截获通过域名发起的流量，直接使用 IP 地址的通信则不受影响；CDN 入侵，只有浏览网页或下载时才有风险，其他场合则毫无问题；而网关被劫持，用户所有流量都难逃魔掌。 在本文中，我们通过技术原理，讲解如下问题： 为什么喜欢劫持网页？ 只浏览不登陆就没事吗？ 自动填写表单有风险吗？ 离开劫持环境还受影响吗？ 使用 HTTPS 能否避免劫持？ 流量劫持能否控制我电脑？ 为什么喜欢劫持网页？理论上说，劫持到用户的流量数据，也就获得相应程序的网络通信。但在现实中，数据并不代表真实内容。一些重要的网络程序，都是私有的二进制协议，以及各种加密方式。想通过流量来还原出用户的聊天信息、支付密码，几乎是不可能的。即使花费各种手段，破解出某个程序的通信协议，然而一旦程序升级改变了协议格式，或许就前功尽弃了。因此，很难找到种一劳永逸的客户端劫持方案。 然而，并非所有程序都是客户端的。一种新兴的应用模式 —— WebApp，发展是如此之快，以至于超越客户端之势。在如今这个讲究跨平台、体验好，并有云端支持的年代，WebApp 越来越火热。各种应用纷纷移植成网页版，一些甚至替代了客户端。同时，也造就了流量劫持前所未有的势头。 WebApp，其本质仍是普通的网页而已。尽管网页技术在近些年里有了很大的发展，各种新功能一再增加，但其底层协议始终没有太大的改进 —— HTTP，一种使用了 20 多年古老协议。 在 HTTP 里，一切都是明文传输的，流量在途中可随心所欲的被控制。传统程序事先已下至本地，运行时只有通信流量；而在线使用的 WebApp，流量里既有通信数据，又有程序的界面和代码，劫持简直轻而易举。 上一篇也提到，如果在户外没有 3G 信号的地方钓鱼，无法将获得的流量转发到外网。然而，使用网页这一切就迎刃而解。我们完全可以在自己的设备上搭建一个站点，留住用户发起离线攻击。对于那些连上 WiFi 能自动弹网页的设备，那就更容易入侵了。 因此，劫持网页流量成了各路黑客们的钟爱，一种可在任意网页发起 XSS 的入侵方式。 下面，开始我们的攻防之旅。 只浏览不登陆就没事吗？每当砖家出来提醒时，总免不了这么一句：公共场合尽量不登录账号。于是，大家就认为只看网页不登陆就平安无事了。 如果是公共的电脑，那也就无所谓；否则，自己的一些账号可能就倒霉了。 在自己的设备上，大家都会记住各种账号的登录状态，反正只有自己用，也没什么大不了的。然而，在被劫持的网络里，一切皆有可能发生。即使浏览再平常不过的网页，或许一个悄无声息的间谍脚本已暗藏其中，正偷偷访问你那登录着的网页，操控起你的账号了。 听起来似乎很玄乎吧，砖家似乎也没说已登录的账号会怎么样。难道随便一个网页，就能让各种账号被控制吗？ 大家都知道，HTTP 是无状态的，不像传统协议有个『会话』之类的概念。各种账号的登录状态，只能依靠浏览器的 Cookie 来实现。因此，只要有了的 Cookie 也就获得了用户账号的使用权。 和传统 XSS 攻击不同，流量劫持可以得到任何通信数据，当然也包括那些受 HttpOnly 保护的 Cookie。攻击脚本只需对某个站点发起请求，黑客即可在中途劫持到传输的 Cookie 数据。如果同时发起众多站点，就能覆盖相当一部分目标了。 这种请求未必要真正访问一次页面，仅仅将 URL 作为图片加载，将目标站点的 Cookie 送出即可。 黑客得到 Cookie，即可在自己浏览器里还原出登录状态。尽管你确实没有登录操作，但那些已登录的却能出卖你。 防范措施：访问一些重要的网站，尽量不要记住登录状态，以免 Cookie 被泄露。不过，只要网站绑定了 Cookie 和 IP 段，这招的危害程度就大幅降低了，仅凭 HttpOnly 还是很不靠谱的。 自动填写表单有风险吗？使用上面的方法获得 Cookie，即使能控制账号，但其密码仍无法得知，随时都有可能失去控制权。 不过，一些用户有让浏览器自动保存密码的习惯。通过这点，我们是否能套出记住的密码来呢？ 分析下浏览器是如何自动填写页面表单的。其实很简单，浏览器发现页面 URL 和表单名匹配记录里的，就自动填上了。 要是在流量可控的网络里，剥离页面所有内容只剩表单，又会如何？ 保存着的密码仍能自动填上，并且可被脚本访问到！ 如果我们在用户访问的页面里，创建大量的隐藏框架页，即可尝试获取各种网站保存着的账号了。（如今 Chrome 框架页已经不会自动填写了。具体实现和浏览器有关）。 然而，即使框架页不自动填写，但主页面总得保留该功能吧。如果发现用户某个打开着的网页很久没有交互了，可悄悄跳转到如上那样的纯表单页，无论能否获取数据，都将继续跳转，一个接一个的尝试。。。直到用户切回窗口，再恢复到原先那个页面。 由于泄露的是明文的账号和密码，即使数量不多，也能通过社工获取到用户的更多信息，最终导致更严重的泄露。 防范措施：所以无论是 Cookie 记住登录，还是浏览器自动填表，重要的账号都应慎用。 浏览器的自动填表也应增加些安全策略，例如必须有用户的交互才开始填写，规定的时间里只能填有限次。 离开劫持环境还受影响吗？或许你在想，网络再怎么不安全，离开之后就应该没事了吧。 有时在公共场合赶上免费的 WiFi，打开网页看一会新闻，是常有的事。这么短的时间里能有多大的事。不过在入侵脚本面前，一小会和长久并没太大区别。机会只要出现了，无论多么短暂都能渗透。 如果只看重眼前利益，这种短暂的入侵并没多少利用价值；但若放远目光，能让攻击在今后发起，那就不再局限于时间和空间了。因此，我们需要一个时光机，让入侵脚本穿越到用户未来的时空运行。 若用传统 XSS 的思维，这几乎无法实现。但在流量劫持面前，一切皆有可能 —— 因为我们能控制任意流量！ HTTP 缓存投毒上一篇文章提到，但凡有缓存的地方都是大有可为的。显然，对于有着复杂的 HTTP 缓存系统来说，存在缺陷是在所难免了。这种简单的纯文本协议，几乎没有一种签名机制，来验证内容的真实性。即使页面被篡改了，浏览器也完全无法得知，甚至连同注入的脚本也一块缓存起来。 于是，我们可以将『缓存投毒』的概念，引入 HTTP 协议里。但凡具备可执行的资源，都可以通过预加载带毒的版本，将其提前缓存起来。 为了将缓存的有效期发挥到极致，我们事先在各大网站上，找出一些过期时间长、很久没有修改的资源，评估其未来变化不大的可能。 当用户打开任意一个 HTTP 网页时，注入的 XSS 代码开始预加载这些资源。由于一切流量都在控制之中，我们可以完全不走代理，而是返回自己的攻击脚本。 用户浏览器收到回复后，就将其一一缓存起来了。我们可以事先收集大量的资源地址，让用户在线的时间里，尽可能多的缓存受到感染。 未来，用户访问引用了这些资源的网站时，入侵脚本将穿越时空，从沉睡中唤醒。 只要用户不清空缓存，这些被感染的脚本始终附着在浏览器缓存里，直到用户强制刷新页面时或许才能解脱。更多细节可参考这里。 离线储存投毒不过，有些网站使用的都是很短的缓存，上述的入侵方式似乎就无能为力了。不过，HTML5 时代带来了一项新的缓存技术 —— 离线储存。由于它没有过期时间，因此适用于任意网页的投毒！ 类似的，当用户触发了我们的注入脚本之后，我们创建一个隐形的框架页，加载被感染的网页。同样，通过流量劫持，我们返回一个简单的页面，里面包含一个带有 manifest 属性的 HTML 文档，以及后期运行的脚本。 由于通过隐藏框架访问了这个页面，用户并不知情，但尽职的浏览器却将其缓存起来。 未来，用户打开被感染的网页时，浏览器直接从离线储存里取出，其中布置的脚本因此触发。 由于是个空白页面，因此需要填充上真实的网站内容。最简单的方法，就是嵌套一个原页面的框架，并在 URL 里加上随机数，确保是最新的在线内容。 因为嵌套的是同域框架，最终仍能被入侵脚本所控制。 不过，离线存储投毒的后期影响会小一些。未来用户在安全的网络里打开页面时，虽然能立即显示之前缓存的页面，但同时也会尝试访问 .appcache 文件。由于这个文件大多都不存在，因此浏览器很可能删除掉离线数据，导致之后的访问不再使用离线储存。 因此理论上说只有一次的触发机会，但它没有过期时间，适用于任意 HTTP 页面投毒。 防范措施：在不安全的场合，尽量使用『隐身模式』浏览网页。例如 Chrome 里按 Ctrl+Shift+N 就能调出，可将自己处于隔离的沙盒里。 FireFox 浏览器存储离线文件时，会有用户交互提示，提醒用户是否有这必要。 也许不久后，框架页面不再被离线储存所接受，新标准随时都有可能改变。但 HTTP 缓存投毒是协议栈的缺陷，因此很难防范，下一篇会发现实际入侵效果非常理想。 使用 HTTPS 能否避免劫持？如果从密码学的角度来说，使用了 SSL 加密的数据确实难以破解，更不用谈修改了。 然而，惹不起但总躲得起吧。虽然无法破解，但流量仍掌握在自己手中，走哪条路还是由我说的算，完全可以绕过你。 偷换证书不同于简单的 HTTP 代理，HTTPS 服务需要一个权威机构认定的证书才算有效。自己随便签发的证书，显然是没有说服力的，HTTPS 客户端因此会质疑。 在过去，这并不怎么影响使用过程，无非弹出一个无效的证书之类的提示框。大多用户并不明白是什么情况，就点了继续，导致允许了黑客的伪证书，HTTPS 流量因此遭到劫持。 在经历越来越多的入侵事件之后，人们逐渐意识到，不能再轻易的让用户接受不信任的证书了。如今，主流浏览器对此都会给予严重的警告提示，避免用户进入伪安全站点。 如果重要的账户网站遇到这种情况，无论如何都不该继续，否则大门钥匙或许就落入黑客之手。 因此，这种偷换证书的劫持，在安全意识越来越高的今天，很难再发挥实效了。我们需要一个更隐蔽的方式来躲开加密数据。 过滤 HTTPS 跳转事实上，在 PC 端上网很少有直接进入 HTTPS 网站的。例如支付宝网站，大多是从淘宝跳转过来，而淘宝使用的仍是不安全的 HTTP 协议。如果在淘宝网的页面里注入 XSS，屏蔽对 HTTPS 的页面访问，用 HTTP 取而代之，那么用户也就永远无法进入安全站点了。 尽管地址栏里没有出现 HTTPS 的字样，但域名看起来也是正确的，大多用户都会认为不是钓鱼网站，因此也就忽视了。 因此，只要入口页是不安全的，那么之后的页面再安全也无济于事。 当然也有一些用户通过输网址访问的，他们输入了 www.alipaly.com 就敲回车进入了。然而，浏览器并不知道这是一个 HTTPS 的站点，于是使用默认的 HTTP 去访问。不过这个 HTTP 版的支付宝的确也存在，其唯一功能就是重定向到自己 HTTPS 站点上。 劫持流量的中间人一旦发现有重定向到 HTTPS 站点的，显然不愿意让用户走这条不受自己控制的路。于是拦下重定向的命令，自己去获取重定向后的站点内容，然后再回复给用户。于是，用户始终都是在 HTTP 站点上访问，自然就可以无限劫持了。 搜索引擎劫持事实上，HTTPS 站点还有个很大的来源 —— 搜索引擎。遗憾的是，国产搜索引擎几乎都不提供 HTTPS 服务。因此在不安全的网络里，搜索结果是不具备任何权威的。 防范措施：重要的网站必定使用 HTTPS 协议，登陆时需格外留意。 国外的大型网站几乎都提供 HTTPS 服务，甚至是默认的标准。相比国内只有少数重要的服务才使用，绝大多数的信息都是在明文传输。这是为了方便什么来着，你猜。 流量劫持能否控制我电脑？如果不考虑一些浏览器安全漏洞，理论上说网页与系统是完全隔离的，因此无需担心系统受到影响。 钓鱼插件有时为了能让网页获得更多的在线能力，安装插件必不可少，例如支付控件、在线播放器等等。在方便使用的同时，也埋下了安全隐患。 如果是一些小网站强迫用户安装插件的，大家几乎都是置之不理。但若一些正规的大网站，提示用户缺少某些插件，并且配上一些专业的提示，相信大多都会选择安装。而这一切，通过被注入的攻击脚本完全能办到。 不过，正规的插件都是有完整的数字签名的，而伪造的很难躲过浏览器的验证，会出现各种安全提示。因此，攻击者往往使用直接下载的方式，提示用户保存并打开安装包。 页面提权现在越来越多的应用程序，选择使用内嵌网页来简化界面的开发，在移动设备上更是普遍。 通常为了能让页面和客户端交互，赋予一些本地程序的接口供调用，因此具有了较高的权限。不过，正常情况下嵌入的都是受白名单限制的可信页面，因此不存在安全隐患。 然而在被劫持的网络里，一切明文传输的数据都不再具备可信度。同样的脚本注入，就能获得额外的权限了。 一些带有缺陷的系统，攻击脚本甚至能获得出乎意料的能力。通过之前提到的网页缓存投毒，这颗埋下的地雷随时都有可能触发。 下载程序即使上网从不安装插件，但是下载程序还是经常需要的。由于大多数的下载网站，使用的都是 HTTP 流量，因此劫持者能轻易的修改可执行文件，将其感染上病毒或木马，甚至完全替换成另一个程序。 用户总认为从官网上下载的肯定没问题，于是就毫无顾虑的打开了。这时，入侵的不再是浏览器环境，而是能控制整个系统了。 防范措施：如果是从浏览器里下载的程序，留意是否具有数字签名，正规的厂商几乎都会提供。如果想试用一些来路不明的小程序，保存到虚拟机里使用就放心多了。 未来 SPDY 技术普及的时候，就再不用担心网页劫持这些事。它将 HTTP 协议封装在加密的流量里传输，想劫持一个普通网页都很困难了。 结尾暂时就说到这。事实上类似 XSS 的攻击方式还有很多，这里只谈了一些能和流量劫持配合使用的。利用上一篇讲述的各种劫持途径，配合本文提到的入侵方式，可以劫持不少用户了。下一篇，将演示如何利用这些原理，发起实战攻击。","categories":[],"tags":[]},{"title":"流量劫持是如何产生的？","slug":"traffic-hijack","date":"un55fin55","updated":"un22fin22","comments":true,"path":"traffic-hijack/","link":"","permalink":"nbma.info/traffic-hijack/","excerpt":"流量劫持，这种古老的攻击沉寂了一段时间后，最近又开始闹的沸沸扬扬。众多知名品牌的路由器相继爆出存在安全漏洞，引来国内媒体纷纷报道。只要用户没改默认密码，打开一个网页甚至帖子，路由器配置就会被暗中修改。互联网一夜间变得岌岌可危。","text":"流量劫持，这种古老的攻击沉寂了一段时间后，最近又开始闹的沸沸扬扬。众多知名品牌的路由器相继爆出存在安全漏洞，引来国内媒体纷纷报道。只要用户没改默认密码，打开一个网页甚至帖子，路由器配置就会被暗中修改。互联网一夜间变得岌岌可危。 攻击还是那几种攻击，报道仍是那千篇一律的砖家提醒，以至于大家都麻木了。早已见惯运营商的各种劫持，频繁的广告弹窗，大家也无可奈何。这么多年也没出现过什么损失，也就睁只眼闭只眼。 事实上，仅仅被运营商劫持算是比较幸运了。相比隐匿在暗中的神秘黑客，运营商作为公众企业还是得守法的，广告劫持虽无节操但还是有底线的。这不，能让你看见广告了，也算是在提醒你，当前网络存在被劫持的风险，得留点神；相反，一切看似风平浪静毫无异常，或许已有一个天大的间谍潜伏在网络里，随时等你上钩 —— 这可不是弹广告那样简单，而是要谋财盗号了！ 我会被劫持吗？不少人存在这样的观点：只有那些安全意识薄弱的才会被入侵。只要装了各种专业的防火墙，系统补丁及时更新，所有的密码都很复杂，劫持肯定是轮不到我了。 的确，安全意识强的自然不容易被入侵，但那只对传统的病毒木马而已。而在流量劫持面前，几乎是人人平等的。网络安全与传统的系统安全不同，网络是各种硬件设备组合的整体，木桶效应尤为明显。即使有神一样的系统，但遇到猪一样的设备，你的安全等级瞬间就被拉低了。现在越来越流行便宜的小路由，它们可是承载着各种网上交易的流量，你能放心使用吗？ 即使你相信系统和设备都绝对可靠，就能高枕无忧了吗？事实上有问题的设备并不多，但出问题的事却不少，难道其中还存在什么缺陷？没错，还遗漏了最重要的一点：网络环境。 如果网络环境里有黑客潜伏着，即使有足够专业的技术，是在所难逃了，敌暗我明，稍不留神就会落入圈套。 当然，苍蝇不叮无缝的蛋。有哪些隐患导致你的网络环境出现了裂缝？太多了，从古到今流行过的攻击方式数不胜数。甚至可以根据实际环境，自己创造一种。 现在回忆下尝试过的劫持案例。 上古时代： Hub 嗅探 MAC 欺骗 MAC 冲刷 ARP 攻击 DHCP 钓鱼 DNS 劫持 CDN 入侵 中世纪： 路由器弱口令 路由器 CSRF PPPoE 钓鱼 蜜罐代理 工业时代： WiFi 弱口令 WiFi 伪热点 WiFi 强制断线 WLAN 基站钓鱼 Hub 嗅探集线器（Hub）这种设备如今早已销声匿迹了，即使在十年前也少有人用。作为早期的网络设备，它唯一的功能就是广播数据包：把一个接口的收到的数据包群发到所有接口上。且不吐槽那小得惊人的带宽，光是这转发规则就是多么的不合理。任何人能收到整个网络环境的数据，隐私安全可想而知。 嗅探器成了那个时代的顶尖利器。只要配置好过滤器，不多久就能捕捉到各种明文数据，用户却没有任何防御对策。 防范措施：还在用的赶紧扔了吧。 这种设备目前唯一可用之处就是旁路嗅探。利用广播的特性，可以非常方便分析其他设备的通信，例如抓取机顶盒的数据包而不影响正常通信。 MAC 欺骗交换机的出现逐渐淘汰了集线器。交换机会绑定 MAC 地址和接口，数据包最终只发往一个终端。因此只要事先配置好 MAC 对应的接口，理论上非常安全了。 不过，很少有人会那么做，大多为了偷懒，直接使用了设备默认的模式 —— 自动学习。设备根据某个接口发出的包，自动关联该包的源地址到此接口。 然而这种学习并不智能，甚至太过死板，任何一个道听途说都会当作真理。用户发送一个自定义源 MAC 地址的包是非常容易的，因此交换机成了非常容易被忽悠的对象。只要伪造一个源地址，就能将这个地址关联到自己的接口上，以此获得受害者的流量。 不过，受害者接着再发出一个包，绑定关系又恢复原先正常的。因此只要比谁发的频繁，谁就能竞争到这个 MAC 地址的接收权。如果伪造的是网关地址，交换机就误以为网关电缆插到你接口上，网络环境里的出站流量瞬间都到了你这里。 当然，除非你有其他出站渠道，可以将窃取的数据代理出去；否则就别想再转发给被你打垮的真网关了，被劫持的用户也就没法上外网。所以这招危害性不是很大，但破坏性很强，可以瞬间集体断网。 防范措施：机器固定的网络尽量绑定 MAC 和接口吧。貌似大多数网吧都绑定了 MAC 和接口，极大增强了链路层的安全性。同时，独立的子网段尽可能划分 VLAN，避免过大的广播环境。 大学里见过千人以上还不划分 VLAN 的，用一根短路网线就可以毁掉整个网络。 MAC 冲刷之前说了集线器和交换机的转发区别。如果交换机发现一个暂时还未学习到的 MAC 地址，将会把数据包送往何处呢？为了不丢包，只能是广播到所有接口。 如果能让交换机的学习功能失效，那就退化成一个集线器了。由于交换机的硬件配置有限，显然不可能无限多的记录地址对应条目。我们不停伪造不重复的源地址，交换机里的记录表很快就会填满，甚至覆盖原有的学习记录，用户的数据包无法正常转发，只能广播到所有接口上了。 防范措施：还是 MAC 和接口绑定。一旦绑定，该接口只允许固定的源地址，伪造的自然就失效了。当然，好一点的交换机都有些策略，不会让一个接口关联过多的 MAC 地址。 曾经在家试过一次，捕捉到小区内用户上网的流量。不过伪造包发的太快，~15万包/秒，更致命的是发错目标地址，发到城域网准入服务器上，导致工作人员切断了整个小区半天的网络… 所以必须得选一个 VLAN 内的、并且实际存在的地址做为目标 MAC，以免产生大量的数据风暴。 ARP 攻击这种攻击大家几乎都听出老茧了，即使不懂电脑的人也知道装个 ARP 防火墙保平安，其危害之大可想而知。 简单的说，ARP 就是广播查询某个 IP 对应的 MAC 地址，在用这个 IP 的人回个声。知道这个 IP 对应的 MAC 地址，就可以链路通信了（链路层只能通过MAC地址通信）。 如果有人冒充回复，并抢在正常人之前，伪造的答案也就先入为主。IP 被解析到错误的地址上，之后所有的通信都被劫持了。 事实上，早期的系统还有个更严重的BUG：直接给用户发送一个 ARP 回复包，即使对方从没请求过，系统也会接受这个回复，并提前保存里面的记录。这种基于缓存的投毒，让劫持成功率更上一层楼。 防范措施：由于这种攻击太过泛滥，以至大部分路由器都带了防 ARP 攻击的功能。客户端的 ARP 防火墙也数不胜数，似乎成了安全软件的标配。当然，系统也支持强制绑定 IP 与 MAC 的对应，必要时可以使用。 很多教程都是用 Wireshark 来演示，事实上当年有一款叫 Iris 的软件非常好用，可以修改封包再次发送，用它可以很容易搞明白各种攻击的原理。不过N年没更新了还不支持64位的。 DHCP 钓鱼现实中，并不是每个人都会配置网络参数，或者出于方便，让网络系统自动配置。出于这个目的，DHCP 服务诞生了。 由于没有配置IP地址、网关、DNS 等，在网络上是寸步难行的，因此首先需要从 DHCP 那获得这些。然而，既然连 IP 地址都没有，那又是如何通信的？显然，只能发到广播地址（255.255.255.255）上，而自己则暂时使用无效的IP地址（0.0.0.0）。（事实上，链路层的通信只要有 MAC 地址就行，IP 地址已属于网络层了，但 DHCP 由于某些特殊需要使用的是 UDP 协议） 因为是发往广播，内网环境里的所有用户都能听到。如果存在多个DHCP服务器，则分别予以回复；用户则选择最先收到的。由于规则是如此简单，以至于用户没有选择的余地。 尚若黑客也在内网里也开启了 DHCP 服务，用户收到的回复包很可能就是黑客发出的，这时用户的网络配置完全听天由命了，不想被劫持都难了。 防范措施：如果是用网线上网的话，最好还是手动的配置。当然，管理员应该严格控制 DHCP 回复的权限，只允许交换机特定的接口才有资格发送回复包。 只要是这类提问/抢答模式的，都面临被冒充回答的风险。很多原理都类似。 DNS 劫持如同 ARP 将 IP 解析成 MAC 地址 一样，DNS 负责将域名解析成 IP 地址。作为网络层的服务，面对的用户更广泛，当然面临的风险也大的多。一旦遭到入侵，所有用户都倒霉了。近些年的重大网络事故无不和 DNS 有关。 DNS 服务一旦被黑客控制，用户发起的各种域名解析，都将被暗中操控。将正常网站解析成黑客服务器的 IP，并事先开启了 HTTP 代理，用户上网时几乎看不出任何破绽；而黑客则获取到所有访问流量，各种网站账号信息都将一览无余。 由于 DNS 服务器的重要性，现实中通常有着较高的安全防护，想入侵它系统不是件易事。但实际未必如此兴师动众，一些 DNS 程序本身就存在着设计缺陷，导致黑客能控制某些域名的指向。其中最恶名昭彰的当属 DNS 缓存投毒。 大家或许已发现，域名-&gt;IP-&gt;MAC-&gt;接口，只要是动态查询的就会多一个环节，风险自然增加。灵活性与安全性始终是不可兼得。 防范措施：手动设置一些权威的 DNS 服务器，例如 8.8.8.8，4.4.4.4 会靠谱的多。 公网上的 DNS 劫持很少发生，但家用路由器的 DNS 劫持已泛滥成灾了。开头报道的路由器漏洞，最终的利用方式也就是修改了 DNS 地址。 CDN 入侵CDN 能加速大家都知道，但其中原理不少人都不清楚。其实，CDN 本身就是一种 DNS 劫持，只不过是良性的。 不同于黑客强制 DNS 把域名解析到自己的钓鱼 IP 上，CDN 则是让 DNS 主动配合，把域名解析到临近的服务器上。这台服务器同样也开启了 HTTP 代理，让用户感觉不到 CDN 的存在。 不过 CDN 不像黑客那样贪心，劫持用户所有流量，它只『劫持』用户的静态资源访问，对于之前用户访问过的资源，CDN 将直接从本地缓存里反馈给用户，因此速度有了很大的提升。 然而，只要是有缓存的地方，都是大有可为的。一旦 CDN 服务器遭受入侵，硬盘上的缓存文件就岌岌可危了，网页被注入脚本，可执行文件被感染，一大波僵尸即将出现。 防范措施：感觉运营商不靠谱的话，换个第三方不带加速的 DNS，或许就不会解析到 CDN 服务器上了。 不少 CDN 黑白通吃，为了省流量不按套路出牌，超过了缓存时间也不更新，甚至还有忽略 URL 问号后面的，导致程序猿们在资源更新的问题上头疼不已。 路由器弱口令当电脑价格一再下降，到了大家打算买第二台的时候，路由器市场也随之火热起来。 但由于繁琐的配置，差劲的用户体验，至今仍有相当部分的用户不明白如何配置路由器。192.168.1.1 和 admin/admin 几乎成了国内路由器的常量。多少回，用这毫无技术含量的方法进入网吧或图书馆的路由器后台。 如果有人恶搞重启路由，或者给他人限速，你得感谢他的仁慈，这都算不严重。要是把路由器的DNS给改了，那就相当严重了！公网的 DNS 劫持一般不会持续太久，但路由器的 DNS 劫持也许长年累月都不会觉察到。 事实上，不乏一些安全意识强的用户也使用默认密码。理由很简单，目前的路由器有两道门槛：一个 WiFi 连接密码，另一个才是管理密码。很多人设置了复杂的 WiFi 密码就高枕无忧了，心想都连不到我的网络里怎么可能进的了后台？ 之前我也有过这观念，但总觉不对劲：万一家里其他电脑或手机中毒了，自动尝试用弱口令爆进路由器后台怎么办。城门都被占领了，城墙再牢固又有何用。 事实上，黑客除了修改 DNS 配置外，还有更恐怖的行为：升级路由器的固件 —— 替换成一个看似完全相同但植入了恶意程序的固件！尽管这目前还尚未普及，然而一旦流行，大批路由器将成为潘多拉魔盒。 防范措施：千万别轻视路由器的密码，其实它比你所有账号都重要。 不改默认密码的用户，神都保佑不了你~ 路由器 CSRF回到本文开始所说的，为什么有那么多路由器会出现这个漏洞呢？也许是路由器的开发人员太高估用户了，认为绝大多数用户都修改了默认密码，因此 CSRF 几乎难以产生。 事实上，国内网民的安全意识远超他们的想象。加上刚才说的，只设置了 WiFi 密码而忽略了管理密码，导致一个恶意程序就能悄悄进入路由器后台。 没想到现在这种病毒还真出现了，而且居然还是 Web 版的！ CSRF 漏洞让病毒木马都用不着了。用户直接访问一个网页，甚至是一帖子，浏览器自动向路由器发起修改配置的请求。 由于国产路由器的网页开发是如此的差劲，登录基本都是用既不安全又丑陋的 HTTP 401 弹框。这种登录只需在 URL 里填上『用户名:密码@』即可自动通过，即使登录失败也不会有什么提示。 防范措施：绝对要看管好路由器密码，并且定期去检查配置是否被篡改。 看过路由器页面源代码会发现，那简直是惨不忍睹，甚至还是 IE5 时代的风格。路由器芯片都是采购的，内核也有开源的，所谓的『自主研发』就是做了那几个页面？ PPPoE 钓鱼好了，不吐槽路由器了，下面说说再高级的路由器也无法避免的事。 除了一些大公司或学校，用的是固定的专线接入上网，个人或者小组织很少会使用这种土豪级套餐，只能老老实实的拨号上网 —— 无论是电信，还是网通铁通各种通。 不少人都存在误区，认为拨号是物理信号的建立过程，在没有拨上之前，点对点是不通的。如果真是这样，那么拨号时账号密码是如何传过去的呢？显然不可能。事实上，终端之间时刻都是畅通的，只不过不拨号就无法得到IP、网关、会话等参数，即使强制把包发给网关，人家虽能收到，但没有认证的会话是不予理睬的，你自然没法上网。 PPPoE，大家经常在拨号时看到这词。Point-Point Protocol over Ethernet，故名思议，就是点对点的协议：用户发送账号密码认证给终端（BRAS），并得到上网 IP、网关地址、会话等。而且协议是基于以太网的，哪怕线路不是，也得想办法把数据封装进去。 传统的 ADSL 是通过电话线上网的，于是需要一个『猫』来把以太网数据调制成电话信号，最终通过电信交换机传输。这种设备保障每家每户都是独立的，以免电话信号被窃听。 然而，后来兴起的各种通就不一定了。不少打着的『千兆到楼，百兆到家』的宽带，就是建了N个小区局域网，然后合并到一个大的城域网（MAN）里。所谓的『百兆』，无非就是拖进你家的那根网线插在楼下一个 100Mbps 的交换机上而已。 用过网通的都知道，百兆带宽并没有快到哪里，甚至在一些南方地区网速慢如蜗牛。但在下载的时候，却能轻松飙到数兆每秒。这时局域网的作用就发挥出来了，如果附近有多个人在看同样的视频，P2P 就直接在内网里共享流量了，大幅减轻了节点的压力。 但是，整个小区成了一个局域网，是多么的不安全。有时甚至不合理的 VLAN 划分，导致多个小区成一内网。要是有人开启 DHCP 服务，其他用户插上网线就能上网了，连拨号都不用，难道天上掉馅饼了？如果敢吃，那可能就落入黑客的陷阱了。 当然，现在直接插网线的并不多，基本通过路由器自动拨号了。但他们的协议都是一样的 —— PPPoE，一种极不安全的协议。 类似 DHCP 协议，PPPoE 也是通过广播来探寻有哪些可用的终端，意味着整个小区的内网用户都能收到；同时探寻包一直往上冒泡，直到被城域网的终端们收到，然后开始纷纷回应。 如果小区里有人私自开启一个 PPPoE 终端服务，显然是最先被收到的。真正的回应包还在大街小巷里传递着，用户和黑客已经开始协商认证了。 不过或许你会说，这必须有人拨号才能上钩，现在都用路由器，长年累月不会断开。如果不想耐心等，也有很简单的方法：来一次集体掉线。 刚刚说过，可以用短路的网线，引发一场广播风暴。不过这太过暴力了，甚至会引起流量异常的报警。我们可以使用更简单有效的方法：MAC 欺骗，不停伪造终端服务器的 MAC 地址，就可以将小区用户的数据包统统吸过来了。 PPPoE 使用的是一种隧道方式，将任何数据都封装在其栈下，因此捕捉到用户任意一个包，即可得到 PPPoE 栈上的会话 ID。然后冒充终端，向用户发送一个『断开连接』的指令，用户就乖乖下线了。使用这种方法，分分钟就能让整个小区的用户重新拨一次号，于是可以快速钓鱼了。 还有更糟的是，PPPoE 绝大多数时候都是明文传输用户名和密码的，因此还能额外获得用户发来的认证账号。 前面吐槽了大学寝室楼 1000 多机器还不划 VLAN 的，于是写一个简单的 PPPoE 模拟器，就能轻松抓到整个网络环境里的上网账号。（还支持一键全都拨上，集体下线的恶作剧功能~） 防范措施：由于 PPPoE 的安全严重依赖物理层，所以尽量不要装以太网接入的宽带。当然，管理员们应该严格限制 PPPoE 搜寻回复包，就像 DHCP 那样只允许特定接口出现。事实上小区内部是不可能出现 BRAS 服务器的，因此只允许交换机的 WAN 口出现回复包，那样就不容易被钓鱼了。 PPPoE 还有个更严重 BUG，会话 ID 只有 2 字节，最多 65536 种可能。事先构造个『拨号断开』的请求包，接着把会话 ID 依次遍历一下，就能让某个终端服务器的所有用户下线。如果事先收集好所有终端服务器地址，可以发起一次全城断网- - 这个 BUG 应该早已经修复了，只需绑定 &lt;会话 ID，用户 MAC，小区 VLAN-ID&gt; 关系即可。而且一个小脚本就能断开全城各县市的网络，说明终端部署不能太过集中。 蜜罐代理由于众所周知的原因，某国对代理的需求居高不下。不管黑的白的，透明的还是高匿的，只要能翻出去就是好的。 VPN 需要用户名密码以及各种认证，中途被劫持几乎是不可能的。黑客抓住了人们的纯真的心里，将目光转到代理上面。的确，加密后的数据中途确实难以劫持，但最终仍要在服务端还原出真实内容吧。如果一时大意，连接了某个免费的 VPN，或许就登上了黑客的贼船了。 相比 HTTP 代理只影响部分功能，VPN 将整个系统的流量都通过穿越过去了。而这一切应用程序并不知晓，仍然将一些重要的数据往外发送，最终被黑客所劫持。 防范措施：不要贪图小利，用那些打着免费幌子的代理。天下没有免费的午餐。 很多蜜罐代理未必是黑客布下的，而是你懂的。 WiFi 弱口令当互联网延伸到移动设备时，网线成了最大的累赘，无线网络逐渐进入人们视野。如今，由于无线的廉价和便利，几乎应用到所有的便捷设备。一切都不再受限制，人们可以随时随地上网，这是过去难以想象的；黑客也可以随时随地发起攻击，这是过去梦寐以求的。 但无论上网方式如何变化，以太网始终是网络的核心。如同刚才说的 ADSL，尽管载体是电话线路，但最终解调出来的仍是以太网数据。WiFi 也一样，无论电波怎样传播，最终只有还原出标准的以太网封包才能被路由。 无线网络形同一个看不见的巨大集线器，无需任何物理传播介质，附近所有人都可以收听数据信号，专业设备甚至能在更远处捕获。如果没有一种强有力的加密方式把数据封装起来，那么就毫无隐私可言了。 在经历了各种加密被攻破后，WPA2 如今成为无线网络标准加密算法。如果企图通过传统爆后台那样，一次次的尝试弱口令去连接，那效率将是何其的低下。 和拨号不同，WiFi 用户首先需『关联』热点，以建立起物理通道。类似 PPPoE 那样，WiFi 在认证之前也是可以通信的，并且是明文数据 —— 不过，这仅仅是认证数据包明文而已，真正密码显然不会出现在其中。毕竟它和拨号的目的完全不同：一个是为了加密之后所有的流量，而后者仅仅识别下你有没有上网的权限。 通过传统的嗅探工具，可以方便获取这些握手通信包。尽管找不出密码，但里面保存着密钥初始化相关的数据。通过专业的 WPA2 破解工具，加上丰富的密码字典，有相当一部分的无线网络，能在可接受的时间里被破解。 对于不少人来说，无线密码是他第一道也是唯一一道防线。连上之后，不出意外即可轻易进入路由器后台，然后就可以控制他整个内网的流量了。 防范措施：最简单也是最有效的方法：给密码加些特殊符号。 如果给他的路由器刷一个固件，能自动破解其他的无线网络，破解之后自动进后台，自动给它升级自己的固件。。。排山倒海的路由器木马爆发了。 WiFi 热点钓鱼上面简单的说了无线密码的破解。但若本来就知道密码的情况下，又如何发起入侵呢？ 这种场合很常见，在一些商场、餐厅、旅馆等地方，无线网络即使有密码，大家一般也能在墙上或卡片上找到，处于半公开的状态。或者是破解了邻居的无线密码，但无法进入路由器后台，又该如何继续？ 如今越来越智能的无线设备，已能很好的防御诸如 MAC 欺骗以及 ARP 攻击这类原始入侵了，因此需要一个更先进和隐蔽的方式，能绕过网络设备，直接发起点对点的进攻。 在大公司或大商场上过无线网的用户会发现，在室内无论走到哪里网络都存在，即使从一层到五层信号照样满格，而在自己家中信号隔墙就下降不少。难道是开了信号特别强大的热点吗？但在建筑外面却收不到。事实上，不难发现每层楼天花板上，都吸附着不少盘子似的东西。没错，正是这些分布在各处的设备，覆盖了整栋楼的无线网络，让信号死角变得更少。 但是同时存在那么多热点，搜索列表里显示的却没有几个。因为他们都有着同样的热点名（SSID），客户端通常会将同名热点合并成一个。至于连接时，系统会选择信号最好的那个。如果这些热点的认证方式也是相同的，无论连哪个都没问题。 仔细揣摩这条特征，不难发现其中大有文章可做 —— 这不天生就为我们钓鱼准备的！我们再开一个同名同认证的伪热点，只要在信号上压倒对方，钓上附近的鱼儿那是妥妥的。 目前几乎还没有哪个客户端对此有防御，无论是商场还是咖啡店，甚至是一些大公司里，对此也束手无策。原因很简单，问题既不出在设备、也不是部署上，更不能归咎与用户。这是整个协议栈的弱点。 发起此攻击的唯一材料，就是一个超大功率的热点，以此来压倒正常的，争做用户『最信赖』的信号源。 其实，每个热点都时时刻刻广播着一种叫 Beacon 的数据包，里面带有热点名等相关的信息。用户网卡收集之后进过筛选分析，即可得知附近有哪些热点，各自信号如何。功率大的热点，用户接收时的信号强度（RSSI）自然也会高一些。 当然，过高的信号源可能会引起一些监控的警觉，自己也被置于巨大的辐射之中。如果仅仅是对某个方位片杀，使用定向天线会有更好的效果。 不过，光有发射能力还是不够的。即使能把 Beacon 推送到数十公里外，让全城都能看见你的热点名，但前来连接的设备可没有那么强劲信号。因此没有一个高灵敏的接收系统，再强的信号也只是一厢情愿罢了。 防范措施：因为是底层的缺陷，这种劫持通常很难防护。从理论上说，热点通常是固定着的，因此可以事先记录下每个热点的3D坐标，然后根据 WiFi 定位时刻监控热点位置，如果某个热点信号出现在远离事先的地方，很可能是钓鱼热点发出的假信号。 但在现实中，要同时追踪那么多设备并不容易。除非所有的无线设备，都自带监控附近热点的功能，那样可以节省大量追踪成本。 不过在安全性高的场合，还是使用『接入认证』，连接时要求输入用户名和密码来准入。 用户成功连上 WiFi 后，导致网络状态发生改变，一些系统会尝试请求某个特定的 URL，如果返回的是 HTTP 302，会自动弹出重定向后的网页。目的是为了方便打开网页版的准入，有时连上 CMCC 会自动弹出一个登录网页就是如此。iPhone，iPad，WP 都支持，MacOS 最新版弹出的网页不会执行脚本了。利用这个废功能来弹广告应该很不错~ WiFi 强制断线不得不说 WiFi 的另一个缺陷 —— 被下线。类似 PPPoE 主动或被动断开拨号时都有一个注销包，WiFi 也一样。 之前提到，遍历 PPPoE 的会话ID，冒充所有用户发出注销请求，可以断开全城的网络。WiFi 也有类似的缺陷，只不过正好反过来：冒充热点，向所有用户广播注销包，于是所有连着该热点的用户都下线了。 不过，WiFi 的被下线仅仅是认证被注销，用户和热点仍是关联着的。用户接着重新发起认证，因此又给黑客一个获取握手数据的机会。 如果广播持续不断，用户也就一直没法上网，屏幕上会不停的闪烁着『连接中… / 已断开』。对方可能会尝试重启路由，但发现问题仍在，而且所有设备都是这情况，会认为路由器出问题了，于是尝试恢复出厂设置 —— 这一刻，危险降临了！ 照国产路由器的风格，出厂时 WiFi 是没有密码的，而且后台基本是弱口令。因此有个非常短暂的安全缝隙，能钻入这台设备并拿下他的网络！如果事先写好脚本，一旦发现有开放的热点，立即连上并且爆入后台，更是可以直接秒杀！对方刚恢复完路由器，还没回到电脑前就已被劫持了，这是无论如何也想不到的。。。 当然，为了防止他之后进入路由器改密码，你必须立即隐藏 SSID，让 Beacon 不再发出，这样大家都看不见这台设备了，只能通过 BSSID（路由器 MAC 地址）来连接。但是人家会有疑问，刚恢复好的路由器怎么看不见？这时得事先建立一个钓鱼热点，名字和那被隐藏的 SSID 一样，将对方引诱到自己的蜜罐上。 在这个蜜罐里开启一个和路由器页面差不多的站点（可以直接反向代理他路由器的页面），拖住用户，让你有充足的时间来操作那台被隐藏的真设备。甚至可以换掉他固件了！ 当然，有些设备不让轻易更新固件，需要输入路由器上的某个号码，或者按一个键才能开始。这时得发挥蜜罐站点的作用了，你可以在页面上画个文本框，提示他输入路由器上的那号码，或者直接让他去按那按钮。由于路由器后台太过专业，很少会有人质疑它的权威性，几乎都是按部就班。 事实上，你的蜜罐一直开着，对方肯定会在里面配置 WiFi 密码和管理密码，以及 PPPoE 账号。于是他的一切上网秘密都被掌控！即使不改他路由器也无所谓了，以后可以随时进入。 防范措施：不要轻易恢复路由器的出厂设置。真有必要请务必留神，尽快改掉默认密码。即使周围没有黑客，一些中毒的设备随时可能来连上并爆进后台窜乱。 软硬兼施，这招是不是太阴了？稍微用一点心理学或是社工，原本不怎么严重的漏洞可以扩大很多倍。 WLAN 基站钓鱼前面说的热点钓鱼，只能在特定的场合下进行。劫持KFC的用户，只能在KFC附近；入侵小区的路由，只能在家完成。这极大的限制了攻击范围，完全没有发挥出无线网络的灵活性。 然而有一种网络，无论走到哪都能收到。打开手机，总能看见 CMCC 这类热点如同幽灵一般存在。如今，WLAN 业务已遍地开花，几乎覆盖了全国各地。它支持更高的频段，并向下兼容 WiFi，设备遍布全城，试图打造一个无线城域网。唯一的遗憾是收费的，而且信号也一般，远不如 3G 实用。 有时我们并没有连接这些热点，系统却自动连上了。原因很简单，之前某个时候手贱，去连过它们。而系统会保存主动连过的热点，再次出现时就自动上了。事实上，去连过这些热点的人不在少数。 不用说，你也想到开热点钓鱼了。并且用户几乎都是用 WiFi 来连接，也就没有必要使用 WLAN 设备。使用之前的大功率热点，取个 CMCC 的名字，放在阳台上对着大街，不一会就连上一堆用户了。要是支持虚 AP 的话，把 CMCC-AUTO，ChinaNet 等等这些名字全部用上，前来光临的就更多了。 上面提到了，不少设备连上 WiFi 后能自动弹网页，利用这个特性，钓鱼就更容易了。大多手机系统为了节省流量，当 WiFi 和 3G 同时可用时，会优先使用 WiFi，于是用户的流量不知不觉流到黑客那里。 事实上，我们还可以把整套钓鱼方案集成到安卓里。利用手机创建的热点吸引附近的用户，捕捉到的流量还可以通过自己的 3G 网络代理出去。使用 Linux 内核强大的转发机制，我们可以轻易的控制用户的各种流量。以后可别嘲笑街上低头玩手机的人，人家说不定正在劫持你呢。 不过，在一些地方例如地铁上面，3G 信号很差，难以将热点收到的数据转发出去，因此只能钓鱼无法劫持。这种单机模式是否仍能入侵呢？下篇文章将叙述，如何发起离线钓鱼。 防范措施：WiFi 不用就应及时关闭，以免自动连上不安全的热点。对于一些长期不用的连接记录，不如趁早删了吧。 安卓热点默认只支持 10 个用户，在街上开个叫 CMCC 的热点，会发现瞬间就连满了。所以还是把笔记本藏书包里，配几个好点的无线网卡，既隐蔽效果也好。大功率天线虽然很过瘾，但不能过度使用，说不定哪天就被查水表了~ 结尾就谈到这里吧，这些只是之前尝试有效的案例，事实上还有太多的途径，要是再算上系统内部的方式那就无数了。但不论如何变化，流量劫持的最终利用方式几乎是如出一辙的 —— 利用它能做些什么呢？终极危害能有多大？请听下回分解。","categories":[],"tags":[]},{"title":"毕业设计进入测试阶段","slug":"bi-ye-she-ji-vote","date":"un22fin22","updated":"un22fin22","comments":true,"path":"bi-ye-she-ji-vote/","link":"","permalink":"nbma.info/bi-ye-she-ji-vote/","excerpt":"","text":"2014年4月27日，毕业设计-在线投票系统开始上线测试","categories":[],"tags":[]},{"title":"每个人都会变成自己最讨厌的样子","slug":"hehe","date":"un33fin33","updated":"un22fin22","comments":true,"path":"hehe/","link":"","permalink":"nbma.info/hehe/","excerpt":"幼稚跟天真的状态终究都会成为过去时，每个人要想适应这个社会的规则出人头地，就要学会变的残酷跟寒冷，即便内心有多么的不愿意。","text":"幼稚跟天真的状态终究都会成为过去时，每个人要想适应这个社会的规则出人头地，就要学会变的残酷跟寒冷，即便内心有多么的不愿意。 &nbsp; 其实昨天义无反顾的不加班跑去看这个片子，一半是因为片名，一半是因为王菲的MV。结果，这部电影成为我个人观影历史上少有的完全没法认真看的片子，因为一认真就会发现每个镜头都有槽点，实在难以直视。 我不想说太多剪辑、编剧和表演上的硬伤，大家心知肚明。只是有感于一句台词：是不是每个人终究都会变成自己最讨厌的样子。那个敢爱敢恨无法无天的郑少女，变成了内敛隐忍的御姐；那个平和冷静万人膜拜的阮御姐，变成了为爱献身的小女生；那个木讷自律的陈geek，变成了自私自我的优孟；那个少女心中温和美好的邻家大哥哥，变成了沧桑乖戾的男人；那个永远阳光灿烂活泼率真的帅T，变成了道貌岸然的传销咖；那个素面朝天的昔日学霸，变成了俗不可耐的暴发户。倒是那个全身哪里都能张开的老张，竟然前后没有太大变化，还是一副打肿脸充胖子的二逼样儿，问题是他没有变，也当然混的极差。 最近我也常常在想，到底应该成为什么样的人，才能让别人满意的同时自己内心不觉得憋屈。这个星期我每天都失眠，想破了脑袋也没有得出结论。最近Y总跟我说：你这个小朋友，要学会长大。换做以前我会在“幼稚和成熟”这个点上纠结很久，但现在我并不想论证我成熟与否，反而更愿意变得幼稚。因为成熟就代表着需要做到六亲不认，需要对别人和对自己一样残忍(对于自律型星座而言)，需要撇开不理智的情绪把心变得很硬很硬。而幼稚至少不用如此，更多的时候可以感情用事，更多的时候愿意相信世界是美好的，更多的时候对未来葆有天真的幻想。其实当时我就想回复Y说：抱歉，我做不到。我可能现在还成不了你期望我成为的人。思虑了再三，决定删掉那条未发短信，因为选择幼稚这样的结果我想还是不要告诉Y的好。 但就算我现在选择幼稚，迟早有一天会变成Y期望的样子吧。因为更多的时候，幼稚就意味着被欺负以及羸弱。在我小的时候，肯定是无法想象原来工作会是这样的；原来很多事情从来就没有对错，只有亲疏；原来人与人之间仅仅为了利益便可以有那么赤裸裸的情感贩卖。在我们念大学的时候，根本就不会想到这些吧。因为经历是最难复制跟模仿的一个东西，唯有亲身体验过，才能真正的了解到原来这世界上还有那么多未知面等待我们去探索，去体验。 所以即便这个片子一无是处，我也会把两星全给标题：致我们终将逝去的青春。直白的翻译过来就是，幼稚跟天真的状态终究都会成为过去时，每个人要想适应这个社会的规则出人头地，就要学会变的残酷跟寒冷，即便内心有多么的不愿意。很多时候不是愿意不愿意的问题，而是想要成功出色，就得符合周遭呼吸的节奏，你真的很难做到去改变它，除非你已经outstanding了，问题是又有多少人在那之后还能记得自己最开始的初衷呢？少之又少。所以，青春既美好又残酷，就是因为像镜花水月，过了就再也回不去了。 是不是每个人都会变成自己最讨厌的样子？ 会吧。如果曾经是那样单纯天真的幻想着美好世界的人。 转自豆瓣","categories":[],"tags":[]},{"title":"2013年的最后一天","slug":"2013-lastday","date":"un22fin22","updated":"un22fin22","comments":true,"path":"2013-lastday/","link":"","permalink":"nbma.info/2013-lastday/","excerpt":"转眼之间，又是一年","text":"转眼之间，又是一年 想一想，一年365天，说长确实是长，但总是瞬间即逝…还记得前几年的今天昨天宿舍写着201X年的最后一天……像是一眨眼的功夫一年就过去了，都来不及细细回味一下。","categories":[],"tags":[]},{"title":"Html合并单元格","slug":"html-merge-cells","date":"un33fin33","updated":"un22fin22","comments":true,"path":"html-merge-cells/","link":"","permalink":"nbma.info/html-merge-cells/","excerpt":"今做简历的时候，需要在html合并单元格，找到了这个： 在Html合并单元格时，使用的属性为: 跨行合并：rowspan, 跨列合并： colspan.","text":"今做简历的时候，需要在html合并单元格，找到了这个： 在Html合并单元格时，使用的属性为: 跨行合并：rowspan, 跨列合并： colspan. 第一部分：rowspan使用方法 1. ： &lt;table border=”2” width=”50%”&gt;&lt;tr&gt;&lt;td rowspan=”2”&gt;AAAAA&lt;/td&gt;&lt;td&gt;BBBBBB&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CCCCC&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; AAAAABBBBBBCCCCC2. ：&lt;table border=”2” width=”50%”&gt;&lt;tr&gt;&lt;td&gt;AAAAA&lt;/td&gt;&lt;td rowspan=”2”&gt;BBBBB&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;CCCCC&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;AAAAABBBBBCCCCC&nbsp;第二部分：colspan使用方法1. ：&lt;table border=”2” width=”50%”&gt;&lt;tr&gt;&lt;td&gt;AAAAAA&lt;/td&gt;&lt;td&gt;BBBBBB&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=”2” align=”center”&gt;CCCCC&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;AAAAAABBBBBBCCCCC2. ：&lt;table border=”2” width=”50%”&gt;&lt;tr&gt;&lt;td colspan=”2” align=”center”&gt;AAAAAA&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;BBBBBB&lt;/td&gt;&lt;td&gt;CCCCC&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;AAAAAABBBBBBCCCCC","categories":[],"tags":[]},{"title":"CentOS系统DNS不能解析问题","slug":"centos-dns-unresolution","date":"un44fin44","updated":"un22fin22","comments":true,"path":"centos-dns-unresolution/","link":"","permalink":"nbma.info/centos-dns-unresolution/","excerpt":"新装一台机器，双网卡，系统为CentOS6.0 ，eth0为内网ip，eth1为公网ip。 放到外地公网上去，ip地址已经设好了。dns也设置成功，保存退出。重启service network restart后发现不能解析了。用ｉｐ地址可以连，但是不能ping www.baidu.com","text":"新装一台机器，双网卡，系统为CentOS6.0 ，eth0为内网ip，eth1为公网ip。 放到外地公网上去，ip地址已经设好了。dns也设置成功，保存退出。重启service network restart后发现不能解析了。用ｉｐ地址可以连，但是不能ping www.baidu.com 总是这样，设置一次可以，过一会或者重启一下服务器，重启一下network都不能解析了。发现/etc/resolv.conf又恢复到原来的状态，里面什么都没有了。手动加入nameserver也不行。 后来到网上查找，发现有人与我同样的问题。原来在CentOS下面直接修改/etc/resolv.conf不行。必须要在/etc/sysconfig/network-scripts/ifcfg-eth0里面最后加上dns的设置。要不然，重启后，肯定使用eth0设置中没有设dns的相关信息，使/etc/resolv.conf恢复到原来的状态。 打开/etc/sysconfig/network-scripts/ifcfg-eth0，为了保险起见，可以同样修改eth1的设置 这样设置后，/etc/resolv.conf里面根本就不需要设置。service network restart 后，可以发现/etc/resolv.conf里面就有两个dns的解析ip了。配置好以后重启网络，cat /etc/resolv.conf，可以看到如下参数：DEVICE=eth0BOOTPROTO=noneHWADDR=00:xx:19:xx:xx:xxONBOOT=yesTYPE=EthernetUSERCTL=noIPV6INIT=noPEERDNS=yesNETMASK=255.255.255.0IPADDR=xxx.xxx.xxx.xxxGATEWAY=xxx.xxx.xxx.xxxDNS1=8.8.8.8 nameserver 202.96.209.5nameserver 202.96.209.133search localdomain DNS解析设置成功。在此要强调一点的是，直接修改/etc/resolv.conf这个文件是没用的，网络服务重启以后会根据/etc/sysconfig/network-scripts/ifcfg-eth0来重载配置，如果ifcfg-eth0没有配置DNS，那么resolv.conf会被冲掉，重新变成空值。","categories":[],"tags":[{"name":"centos","slug":"centos","permalink":"nbma.info/tags/centos/"}]},{"title":"练习 5.6.1:Packet Tracer 综合技能练习（访问控制列表）","slug":"packet-tracer-acl","date":"un55fin55","updated":"un22fin22","comments":true,"path":"packet-tracer-acl/","link":"","permalink":"nbma.info/packet-tracer-acl/","excerpt":"","text":"地址表 简介 在本练习中，您需要演练配置实施五项安全策略的 ACL 的技能。此外，您还要配置 PPP 和 OSPF 路由。设备已配置了 IP 地址。用户执行口令是 cisco，特权执行口令是 class。 任务 1：配置带有 CHAP 身份验证的 PPP步骤 1. 将 HQ 和 B1 之间的链路配置为使用带有 CHAP 身份验证的 PPP 封装。 CHAP 身份验证的口令是 cisco123。 B1: username HQ password cisco123 interface Serial0/0/0encapsulation pppppp authentication chap HQ: username B1 password 0 cisco123 interface Serial0/0/0encapsulation pppppp authentication chap 步骤 2. 将 HQ 和 B2 之间的链路配置为使用带有 CHAP 身份验证的 PPP 封装。 CHAP 身份验证的口令是 cisco123。 B2: username HQ password 0 cisco123 interface Serial0/0/0encapsulation pppppp authentication chap HQ: username B2 password 0 cisco123 interface Serial0/0/1encapsulation pppppp authentication chap 步骤 3. 检查路由器之间是否已恢复连通性。 HQ 应能 ping 通 B1 和 B2。接口恢复可能需要几分钟。在 Realtime（实时）模式和 Simulation（模拟）模式之间来回切换可加快此过程。要让 Packet Tracer 加快此过程，另一种可行的方法是对接口使用 shutdown 和 no shutdown 命令。 注：由于 Packet Tracer 程序缺陷，接口可能会在练习期间的任何时候随机关闭。请等待几秒钟，通常接口会自行重新打开。 步骤 4. 检查结果。 完成比例应为 29%。如果并非如此，请单击 Check Results（检查结果）查看尚未完成哪些必要部分。 任务 2：配置默认路由步骤 1. 配置从 HQ 到 ISP 的默认路由。 在 HQ 上使用送出接口参数配置默认路由，将所有默认流量发送到 ISP。 ip route 0.0.0.0 0.0.0.0 Serial0/1/0 步骤 2. 测试与 Web Server 的连通性。 从 HQ 的 Serial0/1/0 接口发出 ping。HQ 应该能成功 ping 通 Web Server (209.165.202.130)。 步骤 3. 检查结果。 完成比例应为 32%。如果并非如此，请单击 Check Results（检查结果）查看尚未完成哪些必要部分。 任务 3：配置 OSPF 路由步骤 1. 在 HQ 上配置 OSPF。 使用进程 ID 1 配置 OSPF。 通告除 209.165.201.0 网络外的所有子网。 向 OSPF 相邻设备传播默认路由。 在接入 ISP 和接入 HQ LAN 的接口上禁用 OSPF 更新。HQ: router ospf 1passive-interface FastEthernet0/0passive-interface FastEthernet0/1passive-interface Serial0/1/0network 10.1.50.0 0.0.0.255 area 0network 10.1.40.0 0.0.0.255 area 0network 10.1.1.0 0.0.0.3 area 0network 10.1.1.4 0.0.0.3 area 0default-information originate 步骤 2. 在 B1 和 B2 上配置 OSPF。 使用进程 ID 1 配置 OSPF。 在每台路由器上配置适当的子网。 在接入 LAN 的接口上禁用 OSPF 更新。B1: router ospf 1passive-interface FastEthernet0/0passive-interface FastEthernet0/1network 10.1.1.0 0.0.0.3 area 0network 10.1.10.0 0.0.0.255 area 0network 10.1.20.0 0.0.0.255 area 0 B2: router ospf 1passive-interface FastEthernet0/0passive-interface FastEthernet0/1network 10.1.1.4 0.0.0.3 area 0network 10.1.70.0 0.0.0.255 area 0network 10.1.80.0 0.0.0.255 area 0 步骤 3. 测试整个网络的连通性。 现在，网络应该实现了完全的端到端连通性。所有设备均应能够成功 ping 通所有其它设备，包括地址为 209.165.202.130 的 Web Server。 步骤 4. 检查结果。 完成比例应为 76%。如果并非如此，请单击 Check Results（检查结果）查看尚未完成哪些必要部分。 任务 4：实施多项 ACL 安全策略步骤 1. 实施第一项安全策略。 阻止 10.1.10.0 网络访问 10.1.40.0 网络。允许对 10.1.40.0 的所有其它访问。在 HQ 上使用 ACL 编号 10 配置 ACL。 HQ:access-list 10 deny 10.1.10.0 0.0.0.255access-list 10 permit any interface FastEthernet0/1ip access-group 10 out 步骤 2. 检查第一项安全策略是否已实现。 从 PC5 ping PC1 应该失败。 步骤 3. 检查结果。 完成比例应为 80%。如果并非如此，请单击 Check Results（检查结果）查看尚未完成哪些必要部分。 步骤 4. 实施第二项安全策略。 拒绝主机 10.1.10.5 访问主机 10.1.50.7。允许所有其它主机访问 10.1.50.7。在 B1 上使用 ACL 编号 115 配置 ACL。 B1: access-list 115 deny ip host 10.1.10.5 host 10.1.50.7access-list 115 permit ip any any interface FastEthernet0/0ip access-group 115 in 步骤 5. 检查第二项安全策略是否已实现。 从 PC5 ping PC3 应该失败。 步骤 6. 检查结果。 完成比例应为 85%。如果并非如此，请单击 Check Results（检查结果）查看尚未完成哪些必要部分。 步骤 7. 实施第三项安全策略。 拒绝从 10.1.50.1 到 10.1.50.63 的主机通过 Web 访问地址为 10.1.80.16 的内部网服务器。允许所有其它访问。在适当的路由器上使用 ACL 编号 101 配置 ACL。 HQ: access-list 101 deny tcp 10.1.50.0 0.0.0.63 host 10.1.80.16 eq wwwaccess-list 101 permit ip any any interface FastEthernet0/0ip access-group 101 in 步骤 8. 检查第三项安全策略是否已实现。 要测试此策略，请单击 PC3，然后单击 Desktop（桌面）选项卡，再单击Web Browser（Web 浏览器）。URL 应键入内部网服务器的 IP 地址 10.1.80.16，然后按 Enter。几秒后应收到 Request Timeout（请求超时）消息。PC2 和该网络中的所有其它 PC 都应该能够访问内部网服务器。 步骤 9. 检查结果。 完成比例应为 90%。如果并非如此，请单击 Check Results（检查结果）查看尚未完成哪些必要部分。 步骤 10. 实施第四项安全策略。 使用名称 NO_FTP 配置命名 ACL，阻止 10.1.70.0/24 网络访问文件服务器 (10.1.10.2) 上的 FTP 服务（端口 21）。所有其它访问都应允许。 注意：名称区分大小写。 B2: ip access-list extended NO_FTPdeny tcp 10.1.70.0 0.0.0.255 host 10.1.10.2 eq ftppermit ip any any interface FastEthernet0/1ip access-group NO_FTP in 步骤 11. 检查结果。 Packet Tracer 不支持测试 FTP 访问，因此您无法检验此策略。不过，完成比例应为 95%。如果并非如此，请单击 Check Results（检查结果）查看尚未完成哪些必要部分。 步骤 12. 实施第五项安全策略。 由于 ISP 代表与 Internet 之间的连通性，因此请按照下列顺序配置名为FIREWALL 的命名 ACL： 仅允许来自 ISP 和来自 ISP 之外任何源地址的入站 ping 应答。 仅允许来自 ISP 和来自 ISP 之外任何源地址的已建立 TCP 会话。* 明确阻止来自 ISP 和来自 ISP 之外任何源地址的所有其它入站访问HQ:ip access-list extended FIREWALLpermit icmp any any echo-replypermit tcp any any establisheddeny ip any any interface Serial0/1/0description Link to ISPip access-group FIREWALL in步骤 13. 检查第五项安全策略是否已实现。此策略的测试结果应该是任何 PC 都能 ping 通 ISP 或 Web Server。但 ISP 和 Web Server 应该都无法 ping 通 HQ 或 FIREWALL ACL 后的任何其它设备。","categories":[],"tags":[{"name":"cisco","slug":"cisco","permalink":"nbma.info/tags/cisco/"}]},{"title":"网关冗余（HSRP）","slug":"packet-tracer-hsrp","date":"un11fin11","updated":"un22fin22","comments":true,"path":"packet-tracer-hsrp/","link":"","permalink":"nbma.info/packet-tracer-hsrp/","excerpt":"最近学习cisco技术，看到一个网关冗余的实验挺不错了，自己做了一遍，成功完成实验，下面给大家分享一下","text":"最近学习cisco技术，看到一个网关冗余的实验挺不错了，自己做了一遍，成功完成实验，下面给大家分享一下实验拓扑： 实验配置： 路由器配置**=========== R1*Router&gt;enRouter#conf tRouter(config)#enable secret ciscoRouter(config)#int f0/0Router(config-if)#ip address 192.168.13.1 255.255.255.0Router(config-if)#no shutRouter(config-if)#exitRouter(config)#int s1/0Router(config-if)#ip address 192.168.12.1 255.255.255.0Router(config-if)#clock rate 64000Router(config-if)#no shutRouter(config-if)#exitRouter(config)#router ripRouter(config-router)#network 192.168.13.0Router(config-router)#network 192.168.12.0Router(config-router)#passive-interface f0/0 //设为被动接口Router(config-router)#exitRouter(config)#exitRouter#Router(config-if)#standby 1 ip 192.168.13.254 //启用 HSRP 功能，并设置虚拟IP ，组号为 1Router(config-if)#standby 1 preempt //设置该路由器在优先级最高时成为活动路由器。如果不设置，即使该路由器权值再高，也不会成为活动路由器Router(config-if)#standby 1 priority 120 //设置优先级，默认为100Router(config-if)#standby 1 timers 3 10 //设置Hello time 和 Hold time ，即每隔3秒发Hello包，超过10秒没收到Hello宣告该路由器故障Router(config-if)#standby 1 authentication cisco //配置认证密码，防止非法设备加入到HSRP中，同一组密码必须一致Router(config-if)#exitRouter(config)#exitRouter#Router#conf tRouter(config)#hostname R1R1(config)#exitR1#show ip routeCodes: C - connected, S - static, I - IGRP, R - RIP, M - mobile, B - BGPD - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter areaN1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2E1 - OSPF external type 1, E2 - OSPF external type 2, E - EGPi - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2ia - IS-IS inter area, - candidate default, U - per-user static routeo - ODR, P - periodic downloaded static routeGateway of last resort is not setC 192.168.12.0/24 is directly connected, Serial1/0C 192.168.13.0/24 is directly connected, FastEthernet0/0R 192.168.20.0/24 [120/1] via 192.168.12.2, 00:00:28, Serial1/0R 192.168.23.0/24 [120/1] via 192.168.12.2, 00:00:28, Serial1/0R1# =============R2=============Router&gt;enRouter#conf tRouter(config)#enable secret ciscoRouter(config)#int s1/0Router(config-if)#ip address 192.168.12.2 255.255.255.0Router(config-if)#clock rate 64000Router(config-if)#no shutRouter(config-if)#exitRouter(config)#Router(config)#router ripRouter(config-router)#network 192.168.12.0Router(config-router)#network 192.168.23.0Router(config-router)#network 192.168.20.0Router(config-router)#passive-interface f0/0Router(config-router)#exitRouter(config)#int s1/1Router(config-if)#ip address 192.168.23.2 255.255.255.0Router(config-if)#clock rate 64000Router(config-if)#no shutRouter(config-if)#exitRouter(config)#int f0/0Router(config-if)#ip address 192.168.20.2 255.255.255.0Router(config-if)#exitRouter(config)#exitRouter#Router#conf tRouter(config)#hostname R2R2(config)#exitR2# =============R3=============Router&gt;enRouter#conf tRouter(config)#enable secret ciscoRouter(config)#int f0/0Router(config-if)#ip address 192.168.13.3 255.255.255.0Router(config-if)#no shutRouter(config-if)#exitRouter(config)#int s1/1Router(config-if)#ip address 192.168.23.3 255.255.255.0Router(config-if)#clock rate 64000Router(config-if)#no shutRouter(config-if)#exitRouter(config)#router ripRouter(config-router)#network 192.168.13.0Router(config-router)#network 192.168.23.0Router(config-router)#passive-interface f0/0Router(config-router)#exitRouter(config)#exitRouter#Router#conf tRouter(config)#int f0/0Router(config-if)#standby 1 ?authentication Authenticationip Enable HSRP and set the virtual IP addressmac-address Virtual MAC addressname Redundancy name stringpreempt Overthrow lower priority Active routerspriority Priority leveltimers Hello and hold timerstrack Priority tracking Router(config-if)#standby 1 ip 192.168.13.254Router(config-if)#standby 1 preemptRouter(config-if)#standby 1 timers 3 10Router(config-if)#standby 1 authentication ciscoRouter(config-if)#exitRouter(config)#exitRouter#confRouter(config)#hostname R3R3(config)#exitR3# PC 配置 =============R12 和 R11 当PC使用R12&gt;enR12#conf tR12(config)#hostname PC12PC12(config)#no ip routingPC12(config)#int f0PC12(config-if)#ip address 192.168.13.100 255.255.255.0PC12(config-if)#no shutPC12(config-if)#exitPC12(config)#ip default-gateway 192.168.13.254 //.254是虚拟网关 R11&gt;enR11#conf tR11(config)#hostname PC11PC11(config)#no ip routingPC11(config)#int f0PC11(config-if)#ip address 192.168.20.100 255.255.255.0PC11(config-if)#no shutPC11(config-if)#exitPC11(config)#ip default-gateway 192.168.20.2 测试:ping (分别断开到R1和到R3的线路 下图可以看出自动就跳到另一条) PC12#ping 192.168.20.100 repeat 500Type escape sequence to abort.Sending 500, 100-byte ICMP Echos to 192.168.20.100, timeout is 2 seconds:!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!.!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!…..!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!………….…..!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!Success rate is 94 percent (473/500), round-trip min/avg/max = 16/80/424 msPC12# traceroute 测试PC12#traceroute 192.168.20.100 //到R1和R3的线路都正常时 Type escape sequence to abort.Tracing the route to 192.168.20.1001 192.168.13.1 456 msec 312 msec 284 msec2 192.168.12.2 528 msec 888 msec 3 192.168.20.100 632 msecPC12#traceroute 192.168.20.100 //断开R1后测试结果 Type escape sequence to abort.Tracing the route to 192.168.20.1001 192.168.13.3 368 msec 272 msec 228 msec2 192.168.23.2 488 msec 1084 msec 1048 msec3 192.168.20.100 928 msec 556 msecPC12#traceroute 192.168.20.100 //断开R3后测试结果 Type escape sequence to abort.Tracing the route to 192.168.20.1001 192.168.13.1 372 msec 928 msec 1552 msec2 192.168.12.2 1604 msec 576 msec3 4 *192.168.20.100 772 msec 668 msecPC12#","categories":[],"tags":[{"name":"cisco","slug":"cisco","permalink":"nbma.info/tags/cisco/"}]},{"title":"配置静态路由的下一跳使用出站接口和下一跳IP的差别","slug":"compare-next-hop","date":"un33fin33","updated":"un22fin22","comments":true,"path":"compare-next-hop/","link":"","permalink":"nbma.info/compare-next-hop/","excerpt":"配置静态路由的下一跳使用出站接口和下一跳IP的差别 在配置静态路由时，下一跳可以使用下一路由器的IP地址，也可以使用本路由器的出站接口。在点对点的网络中，两者可能没有什么差别，但在以太网中，两者有很大差别。","text":"配置静态路由的下一跳使用出站接口和下一跳IP的差别 在配置静态路由时，下一跳可以使用下一路由器的IP地址，也可以使用本路由器的出站接口。在点对点的网络中，两者可能没有什么差别，但在以太网中，两者有很大差别。 在以太网中，两个相邻接口之间的通信是依靠MAC地址。相邻接口通信时，需要知道对方的MAC地址，根据MAC地址，将通信数据转换成数据帧后交付给网络，进而到对方。而对方MAC地址的获得，是通过第二层数据帧广播，由ARP协议完成的。 当静态路由中使用出站接口做为下一跳时，路由器会认为目标网络和接口处在“直连网络”中。看下图的拓扑： &nbsp; 在路由器R1中的静态路由为 ip route 192.168.2.0 255.255.255.0 fastethernet0/1 时，R1就认为192.168.2.0/24网络和自己直连。可以在R1中使用 show ip route 命令看出，如下图示： &nbsp; &nbsp; 在以太网中，直连网络中主机间的通信是通过ARP协议广播来获取到要交付的目标主机的MAC地址的。也就是说，当R1左侧网络中的PC1要和R2右侧网络的PC2和PC3通信时，数据传递到R1时，R1看到目标网络是自己的直连网络（由于静态路由中指定下一跳为自身接口所致），于是R1就要在F0/1所处网络发出ARP请求广播，来寻找192.168.2.11/12对应的MAC地址。 这时，如果R2启用了ARP代理，那么R2将代替PC2和PC3应答此ARP请求，也就是说返回给R1：192.168.2.11和12对应的MAC地址是R2的F0/1接口MAC。这样，R1中将产生两条ARP缓存记录，分别为： 192.168.2.11 R2的F0/1的MAC 192.168.2.12 R2的F0/1的MAC 在PC1上分别PING 192.168.11和12，然后在R1上使用show arp命令查看到的结果如下图示： &nbsp; c803.0f8c.0001正是R2的F0/1接口的MAC。 当R2中没有启用ARP代理时，PC1和PC2、PC3将不能正常通信。 从上述实验中我们知道，当R1中使用F0/1接口做为到达目标网络192.168.2.0/24的下一跳时，R1左侧网络中的PC，如果要和R2右侧的192.168.2.0/24网络中的所有PC通信，那么在R1上均会产生ARP缓存记录。可以想象：当双方通信的PC很多时，R1中势必会产生大量的ARP缓存，从而可能会导致R1的内存被耗尽。 如果R1中到192.168.2.0/24网络的静态路由设置为 ip route 192.168.2.0 255.255.255.0 10.0.0.2，这样的话，R1中到192.168.2.0/24网络的数据包，都只会交付给10.0.0.2。R1通过ARP协议来获取10.0.0.2对应的MAC地址，然后将数据包以第二层数据帧方式交付出去。也就是说，R1上只会保留一条ARP缓存信息，即：10.0.0.2 R2的F0/1的MAC。这样可以避免R1中产生大量ARP缓存而导致内存耗尽。 &nbsp;","categories":[],"tags":[{"name":"网络","slug":"网络","permalink":"nbma.info/tags/网络/"}]}]}